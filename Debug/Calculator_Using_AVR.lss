
Calculator_Using_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000472c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  0000472c  000047c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  0080019a  0080019a  000048fa  2**0
                  ALLOC
  3 .stab         00003cb4  00000000  00000000  000048fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000178e  00000000  00000000  000085b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00009ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000a0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000c4da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000d851  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ea2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000ebec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000eedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 22 	call	0x4410	; 0x4410 <main>
      8a:	0c 94 94 23 	jmp	0x4728	; 0x4728 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 22 	jmp	0x44b0	; 0x44b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 64 22 	jmp	0x44c8	; 0x44c8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 80 22 	jmp	0x4500	; 0x4500 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7d 22 	jmp	0x44fa	; 0x44fa <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_enuInit>:
#include "DIO_config.h"



ES DIO_enuInit(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	89 83       	std	Y+1, r24	; 0x01

	//Initialize Direction Pins
	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     e06:	ea e3       	ldi	r30, 0x3A	; 58
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     e1e:	e1 e3       	ldi	r30, 0x31	; 49
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	80 83       	st	Z, r24

	//Initialize Port Pins
	PORTA = CONC(PA_PIN7_Val, PA_PIN6_Val, PA_PIN5_Val, PA_PIN4_Val, PA_PIN3_Val, PA_PIN2_Val, PA_PIN1_Val, PA_PIN0_Val);
     e26:	eb e3       	ldi	r30, 0x3B	; 59
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_Val, PB_PIN6_Val, PB_PIN5_Val, PB_PIN4_Val, PB_PIN3_Val, PB_PIN2_Val, PB_PIN1_Val, PB_PIN0_Val);
     e2e:	e8 e3       	ldi	r30, 0x38	; 56
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	8e ef       	ldi	r24, 0xFE	; 254
     e34:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_Val, PC_PIN6_Val, PC_PIN5_Val, PC_PIN4_Val, PC_PIN3_Val, PC_PIN2_Val, PC_PIN1_Val, PC_PIN0_Val);
     e36:	e5 e3       	ldi	r30, 0x35	; 53
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_Val, PD_PIN6_Val, PD_PIN5_Val, PD_PIN4_Val, PD_PIN3_Val, PD_PIN2_Val, PD_PIN1_Val, PD_PIN0_Val);
     e3e:	e2 e3       	ldi	r30, 0x32	; 50
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     e46:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <DIO_enuSetPortDirection>:


ES DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <DIO_enuSetPortDirection+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <DIO_enuSetPortDirection+0x8>
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
     e62:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	18 f0       	brcs	.+6      	; 0xe74 <DIO_enuSetPortDirection+0x22>
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	33 c0       	rjmp	.+102    	; 0xeda <DIO_enuSetPortDirection+0x88>
	else{
		switch(Copy_u8PortID){
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3d 83       	std	Y+5, r19	; 0x05
     e7c:	2c 83       	std	Y+4, r18	; 0x04
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	d1 f0       	breq	.+52     	; 0xebc <DIO_enuSetPortDirection+0x6a>
     e88:	2c 81       	ldd	r18, Y+4	; 0x04
     e8a:	3d 81       	ldd	r19, Y+5	; 0x05
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	2c f4       	brge	.+10     	; 0xe9c <DIO_enuSetPortDirection+0x4a>
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	9d 81       	ldd	r25, Y+5	; 0x05
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	61 f0       	breq	.+24     	; 0xeb2 <DIO_enuSetPortDirection+0x60>
     e9a:	1e c0       	rjmp	.+60     	; 0xed8 <DIO_enuSetPortDirection+0x86>
     e9c:	2c 81       	ldd	r18, Y+4	; 0x04
     e9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	81 f0       	breq	.+32     	; 0xec6 <DIO_enuSetPortDirection+0x74>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	81 f0       	breq	.+32     	; 0xed0 <DIO_enuSetPortDirection+0x7e>
     eb0:	13 c0       	rjmp	.+38     	; 0xed8 <DIO_enuSetPortDirection+0x86>
			case DIO_PORTA:
				DDRA = Copy_u8Value;
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	80 83       	st	Z, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTB:
				DDRB = Copy_u8Value;
     ebc:	e7 e3       	ldi	r30, 0x37	; 55
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	80 83       	st	Z, r24
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTC:
				DDRC = Copy_u8Value;
     ec6:	e4 e3       	ldi	r30, 0x34	; 52
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	80 83       	st	Z, r24
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTD:
				DDRD = Copy_u8Value;
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     ed8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <DIO_enuSetPortValue>:

ES DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <DIO_enuSetPortValue+0x6>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <DIO_enuSetPortValue+0x8>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	8a 83       	std	Y+2, r24	; 0x02
     efc:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	18 f0       	brcs	.+6      	; 0xf0e <DIO_enuSetPortValue+0x22>
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	33 c0       	rjmp	.+102    	; 0xf74 <DIO_enuSetPortValue+0x88>
	else{
		switch(Copy_u8PortID){
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3d 83       	std	Y+5, r19	; 0x05
     f16:	2c 83       	std	Y+4, r18	; 0x04
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	d1 f0       	breq	.+52     	; 0xf56 <DIO_enuSetPortValue+0x6a>
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	3d 81       	ldd	r19, Y+5	; 0x05
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	2c f4       	brge	.+10     	; 0xf36 <DIO_enuSetPortValue+0x4a>
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	61 f0       	breq	.+24     	; 0xf4c <DIO_enuSetPortValue+0x60>
     f34:	1e c0       	rjmp	.+60     	; 0xf72 <DIO_enuSetPortValue+0x86>
     f36:	2c 81       	ldd	r18, Y+4	; 0x04
     f38:	3d 81       	ldd	r19, Y+5	; 0x05
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	81 f0       	breq	.+32     	; 0xf60 <DIO_enuSetPortValue+0x74>
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	81 f0       	breq	.+32     	; 0xf6a <DIO_enuSetPortValue+0x7e>
     f4a:	13 c0       	rjmp	.+38     	; 0xf72 <DIO_enuSetPortValue+0x86>
			case DIO_PORTA:
				PORTA = Copy_u8Value;
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	80 83       	st	Z, r24
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
     f56:	e8 e3       	ldi	r30, 0x38	; 56
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	80 83       	st	Z, r24
     f5e:	09 c0       	rjmp	.+18     	; 0xf72 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
     f60:	e5 e3       	ldi	r30, 0x35	; 53
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	80 83       	st	Z, r24
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     f72:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <DIO_enuTogPort>:

ES DIO_enuTogPort(u8 Copy_u8PortID)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <DIO_enuTogPort+0x6>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <DIO_enuTogPort+0x8>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	84 30       	cpi	r24, 0x04	; 4
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <DIO_enuTogPort+0x1e>
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	3f c0       	rjmp	.+126    	; 0x1022 <DIO_enuTogPort+0x9c>
	else{
		switch(Copy_u8PortID){
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3c 83       	std	Y+4, r19	; 0x04
     fac:	2b 83       	std	Y+3, r18	; 0x03
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	e9 f0       	breq	.+58     	; 0xff2 <DIO_enuTogPort+0x6c>
     fb8:	2b 81       	ldd	r18, Y+3	; 0x03
     fba:	3c 81       	ldd	r19, Y+4	; 0x04
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	2c f4       	brge	.+10     	; 0xfcc <DIO_enuTogPort+0x46>
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <DIO_enuTogPort+0x5c>
     fca:	2a c0       	rjmp	.+84     	; 0x1020 <DIO_enuTogPort+0x9a>
     fcc:	2b 81       	ldd	r18, Y+3	; 0x03
     fce:	3c 81       	ldd	r19, Y+4	; 0x04
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	b1 f0       	breq	.+44     	; 0x1002 <DIO_enuTogPort+0x7c>
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	c9 f0       	breq	.+50     	; 0x1012 <DIO_enuTogPort+0x8c>
     fe0:	1f c0       	rjmp	.+62     	; 0x1020 <DIO_enuTogPort+0x9a>
			case DIO_PORTA:
				PORTA = ~PORTA;
     fe2:	ab e3       	ldi	r26, 0x3B	; 59
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e3       	ldi	r30, 0x3B	; 59
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 95       	com	r24
     fee:	8c 93       	st	X, r24
     ff0:	17 c0       	rjmp	.+46     	; 0x1020 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
     ff2:	a8 e3       	ldi	r26, 0x38	; 56
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e8 e3       	ldi	r30, 0x38	; 56
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 95       	com	r24
     ffe:	8c 93       	st	X, r24
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	80 95       	com	r24
    100e:	8c 93       	st	X, r24
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 95       	com	r24
    101e:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1020:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_enuGetPort>:

ES DIO_enuGetPort(u8 Copy_u8PortID, u8* Copy_pu8Value)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_enuGetPort+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <DIO_enuGetPort+0x8>
    103a:	00 d0       	rcall	.+0      	; 0x103c <DIO_enuGetPort+0xa>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	7c 83       	std	Y+4, r23	; 0x04
    1044:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value == NULL) Local_enuErrorState = ES_NULL_POINTER;
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	19 f4       	brne	.+6      	; 0x1058 <DIO_enuGetPort+0x26>
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	41 c0       	rjmp	.+130    	; 0x10da <DIO_enuGetPort+0xa8>
	else if (Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	18 f0       	brcs	.+6      	; 0x1064 <DIO_enuGetPort+0x32>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	3b c0       	rjmp	.+118    	; 0x10da <DIO_enuGetPort+0xa8>
	else{
		switch(Copy_u8PortID){
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3e 83       	std	Y+6, r19	; 0x06
    106c:	2d 83       	std	Y+5, r18	; 0x05
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	e1 f0       	breq	.+56     	; 0x10b0 <DIO_enuGetPort+0x7e>
    1078:	2d 81       	ldd	r18, Y+5	; 0x05
    107a:	3e 81       	ldd	r19, Y+6	; 0x06
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <DIO_enuGetPort+0x5a>
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	61 f0       	breq	.+24     	; 0x10a2 <DIO_enuGetPort+0x70>
    108a:	26 c0       	rjmp	.+76     	; 0x10d8 <DIO_enuGetPort+0xa6>
    108c:	2d 81       	ldd	r18, Y+5	; 0x05
    108e:	3e 81       	ldd	r19, Y+6	; 0x06
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	a1 f0       	breq	.+40     	; 0x10be <DIO_enuGetPort+0x8c>
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	b1 f0       	breq	.+44     	; 0x10cc <DIO_enuGetPort+0x9a>
    10a0:	1b c0       	rjmp	.+54     	; 0x10d8 <DIO_enuGetPort+0xa6>
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    10a2:	e9 e3       	ldi	r30, 0x39	; 57
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	eb 81       	ldd	r30, Y+3	; 0x03
    10aa:	fc 81       	ldd	r31, Y+4	; 0x04
    10ac:	80 83       	st	Z, r24
    10ae:	14 c0       	rjmp	.+40     	; 0x10d8 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    10b0:	e6 e3       	ldi	r30, 0x36	; 54
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	eb 81       	ldd	r30, Y+3	; 0x03
    10b8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ba:	80 83       	st	Z, r24
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    10be:	e3 e3       	ldi	r30, 0x33	; 51
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	eb 81       	ldd	r30, Y+3	; 0x03
    10c6:	fc 81       	ldd	r31, Y+4	; 0x04
    10c8:	80 83       	st	Z, r24
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    10cc:	e0 e3       	ldi	r30, 0x30	; 48
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	eb 81       	ldd	r30, Y+3	; 0x03
    10d4:	fc 81       	ldd	r31, Y+4	; 0x04
    10d6:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    10d8:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
}
    10dc:	26 96       	adiw	r28, 0x06	; 6
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <DIO_enuSetPinDirection>:




ES DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <DIO_enuSetPinDirection+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_enuSetPinDirection+0x8>
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <DIO_enuSetPinDirection+0xa>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    10fe:	6b 83       	std	Y+3, r22	; 0x03
    1100:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	18 f4       	brcc	.+6      	; 0x1112 <DIO_enuSetPinDirection+0x24>
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	18 f0       	brcs	.+6      	; 0x1118 <DIO_enuSetPinDirection+0x2a>
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	cd c0       	rjmp	.+410    	; 0x12b2 <DIO_enuSetPinDirection+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	18 f0       	brcs	.+6      	; 0x1124 <DIO_enuSetPinDirection+0x36>
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	c7 c0       	rjmp	.+398    	; 0x12b2 <DIO_enuSetPinDirection+0x1c4>
	else {
		switch(Copy_u8PortID){
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3e 83       	std	Y+6, r19	; 0x06
    112c:	2d 83       	std	Y+5, r18	; 0x05
    112e:	6d 81       	ldd	r22, Y+5	; 0x05
    1130:	7e 81       	ldd	r23, Y+6	; 0x06
    1132:	61 30       	cpi	r22, 0x01	; 1
    1134:	71 05       	cpc	r23, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <DIO_enuSetPinDirection+0x4c>
    1138:	41 c0       	rjmp	.+130    	; 0x11bc <DIO_enuSetPinDirection+0xce>
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	34 f4       	brge	.+12     	; 0x1150 <DIO_enuSetPinDirection+0x62>
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	71 f0       	breq	.+28     	; 0x116a <DIO_enuSetPinDirection+0x7c>
    114e:	b0 c0       	rjmp	.+352    	; 0x12b0 <DIO_enuSetPinDirection+0x1c2>
    1150:	6d 81       	ldd	r22, Y+5	; 0x05
    1152:	7e 81       	ldd	r23, Y+6	; 0x06
    1154:	62 30       	cpi	r22, 0x02	; 2
    1156:	71 05       	cpc	r23, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <DIO_enuSetPinDirection+0x6e>
    115a:	59 c0       	rjmp	.+178    	; 0x120e <DIO_enuSetPinDirection+0x120>
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_enuSetPinDirection+0x7a>
    1166:	7c c0       	rjmp	.+248    	; 0x1260 <DIO_enuSetPinDirection+0x172>
    1168:	a3 c0       	rjmp	.+326    	; 0x12b0 <DIO_enuSetPinDirection+0x1c2>
			case DIO_PORTA:
				DDRA &= ~(1 << Copy_u8PinID);
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_enuSetPinDirection+0x98>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	2a 95       	dec	r18
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_enuSetPinDirection+0x94>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Value << Copy_u8PinID);
    1190:	aa e3       	ldi	r26, 0x3A	; 58
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ea e3       	ldi	r30, 0x3A	; 58
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	b9 01       	movw	r22, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_enuSetPinDirection+0xc2>
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_enuSetPinDirection+0xbe>
    11b4:	cb 01       	movw	r24, r22
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	7a c0       	rjmp	.+244    	; 0x12b0 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTB:
				DDRB &= ~(1 << Copy_u8PinID);
    11bc:	a7 e3       	ldi	r26, 0x37	; 55
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e7 e3       	ldi	r30, 0x37	; 55
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_enuSetPinDirection+0xea>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	2a 95       	dec	r18
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_enuSetPinDirection+0xe6>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Value << Copy_u8PinID);
    11e2:	a7 e3       	ldi	r26, 0x37	; 55
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	b9 01       	movw	r22, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_enuSetPinDirection+0x114>
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_enuSetPinDirection+0x110>
    1206:	cb 01       	movw	r24, r22
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	51 c0       	rjmp	.+162    	; 0x12b0 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTC:
				DDRC &= ~(1 << Copy_u8PinID);
    120e:	a4 e3       	ldi	r26, 0x34	; 52
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_enuSetPinDirection+0x13c>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	2a 95       	dec	r18
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_enuSetPinDirection+0x138>
    122e:	80 95       	com	r24
    1230:	84 23       	and	r24, r20
    1232:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Value << Copy_u8PinID);
    1234:	a4 e3       	ldi	r26, 0x34	; 52
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e4 e3       	ldi	r30, 0x34	; 52
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	b9 01       	movw	r22, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_enuSetPinDirection+0x166>
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	8a 95       	dec	r24
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_enuSetPinDirection+0x162>
    1258:	cb 01       	movw	r24, r22
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	28 c0       	rjmp	.+80     	; 0x12b0 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTD:
				DDRD &= ~(1 << Copy_u8PinID);
    1260:	a1 e3       	ldi	r26, 0x31	; 49
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e1 e3       	ldi	r30, 0x31	; 49
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuSetPinDirection+0x18e>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	2a 95       	dec	r18
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuSetPinDirection+0x18a>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Value << Copy_u8PinID);
    1286:	a1 e3       	ldi	r26, 0x31	; 49
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	b9 01       	movw	r22, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_enuSetPinDirection+0x1b8>
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_enuSetPinDirection+0x1b4>
    12aa:	cb 01       	movw	r24, r22
    12ac:	84 2b       	or	r24, r20
    12ae:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    12b0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b4:	26 96       	adiw	r28, 0x06	; 6
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <DIO_enuSetPinValue>:

ES DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_enuSetPinValue+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_enuSetPinValue+0x8>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <DIO_enuSetPinValue+0xa>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	6b 83       	std	Y+3, r22	; 0x03
    12d8:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	18 f4       	brcc	.+6      	; 0x12ea <DIO_enuSetPinValue+0x24>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	18 f0       	brcs	.+6      	; 0x12f0 <DIO_enuSetPinValue+0x2a>
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	cd c0       	rjmp	.+410    	; 0x148a <DIO_enuSetPinValue+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 30       	cpi	r24, 0x08	; 8
    12f4:	18 f0       	brcs	.+6      	; 0x12fc <DIO_enuSetPinValue+0x36>
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	c7 c0       	rjmp	.+398    	; 0x148a <DIO_enuSetPinValue+0x1c4>
	else{
		switch(Copy_u8PortID){
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3e 83       	std	Y+6, r19	; 0x06
    1304:	2d 83       	std	Y+5, r18	; 0x05
    1306:	6d 81       	ldd	r22, Y+5	; 0x05
    1308:	7e 81       	ldd	r23, Y+6	; 0x06
    130a:	61 30       	cpi	r22, 0x01	; 1
    130c:	71 05       	cpc	r23, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <DIO_enuSetPinValue+0x4c>
    1310:	41 c0       	rjmp	.+130    	; 0x1394 <DIO_enuSetPinValue+0xce>
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	34 f4       	brge	.+12     	; 0x1328 <DIO_enuSetPinValue+0x62>
    131c:	2d 81       	ldd	r18, Y+5	; 0x05
    131e:	3e 81       	ldd	r19, Y+6	; 0x06
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	71 f0       	breq	.+28     	; 0x1342 <DIO_enuSetPinValue+0x7c>
    1326:	b0 c0       	rjmp	.+352    	; 0x1488 <DIO_enuSetPinValue+0x1c2>
    1328:	6d 81       	ldd	r22, Y+5	; 0x05
    132a:	7e 81       	ldd	r23, Y+6	; 0x06
    132c:	62 30       	cpi	r22, 0x02	; 2
    132e:	71 05       	cpc	r23, r1
    1330:	09 f4       	brne	.+2      	; 0x1334 <DIO_enuSetPinValue+0x6e>
    1332:	59 c0       	rjmp	.+178    	; 0x13e6 <DIO_enuSetPinValue+0x120>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	91 05       	cpc	r25, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <DIO_enuSetPinValue+0x7a>
    133e:	7c c0       	rjmp	.+248    	; 0x1438 <DIO_enuSetPinValue+0x172>
    1340:	a3 c0       	rjmp	.+326    	; 0x1488 <DIO_enuSetPinValue+0x1c2>
			case DIO_PORTA:
				PORTA &= ~(1 << Copy_u8PinID);
    1342:	ab e3       	ldi	r26, 0x3B	; 59
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	eb e3       	ldi	r30, 0x3B	; 59
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_enuSetPinValue+0x98>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	2a 95       	dec	r18
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_enuSetPinValue+0x94>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
    1368:	ab e3       	ldi	r26, 0x3B	; 59
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b9 01       	movw	r22, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_enuSetPinValue+0xc2>
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_enuSetPinValue+0xbe>
    138c:	cb 01       	movw	r24, r22
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	7a c0       	rjmp	.+244    	; 0x1488 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTB:
				PORTB &= ~(1 << Copy_u8PinID);
    1394:	a8 e3       	ldi	r26, 0x38	; 56
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e8 e3       	ldi	r30, 0x38	; 56
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_enuSetPinValue+0xea>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	2a 95       	dec	r18
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_enuSetPinValue+0xe6>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
    13ba:	a8 e3       	ldi	r26, 0x38	; 56
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e8 e3       	ldi	r30, 0x38	; 56
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	b9 01       	movw	r22, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_enuSetPinValue+0x114>
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	8a 95       	dec	r24
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_enuSetPinValue+0x110>
    13de:	cb 01       	movw	r24, r22
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	51 c0       	rjmp	.+162    	; 0x1488 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTC:
				PORTC &= ~(1 << Copy_u8PinID);
    13e6:	a5 e3       	ldi	r26, 0x35	; 53
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e3       	ldi	r30, 0x35	; 53
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_enuSetPinValue+0x13c>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	2a 95       	dec	r18
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_enuSetPinValue+0x138>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
    140c:	a5 e3       	ldi	r26, 0x35	; 53
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e3       	ldi	r30, 0x35	; 53
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	b9 01       	movw	r22, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_enuSetPinValue+0x166>
    1428:	66 0f       	add	r22, r22
    142a:	77 1f       	adc	r23, r23
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_enuSetPinValue+0x162>
    1430:	cb 01       	movw	r24, r22
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	28 c0       	rjmp	.+80     	; 0x1488 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTD:
				PORTD &= ~(1 << Copy_u8PinID);
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_enuSetPinValue+0x18e>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	2a 95       	dec	r18
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_enuSetPinValue+0x18a>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
    145e:	a2 e3       	ldi	r26, 0x32	; 50
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	b9 01       	movw	r22, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_enuSetPinValue+0x1b8>
    147a:	66 0f       	add	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_enuSetPinValue+0x1b4>
    1482:	cb 01       	movw	r24, r22
    1484:	84 2b       	or	r24, r20
    1486:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1488:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	26 96       	adiw	r28, 0x06	; 6
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_enuGetpin>:

ES DIO_enuGetpin(u8 Copy_u8PortID,u8 Copy_u8PinID, u8* Copy_pu8Value)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	27 97       	sbiw	r28, 0x07	; 7
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	6b 83       	std	Y+3, r22	; 0x03
    14b6:	5d 83       	std	Y+5, r21	; 0x05
    14b8:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	18 f0       	brcs	.+6      	; 0x14ca <DIO_enuGetpin+0x2c>
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	7e c0       	rjmp	.+252    	; 0x15c6 <DIO_enuGetpin+0x128>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	18 f0       	brcs	.+6      	; 0x14d6 <DIO_enuGetpin+0x38>
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	78 c0       	rjmp	.+240    	; 0x15c6 <DIO_enuGetpin+0x128>
	else if(Copy_pu8Value == NULL)Local_enuErrorState = ES_NULL_POINTER;
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <DIO_enuGetpin+0x46>
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	71 c0       	rjmp	.+226    	; 0x15c6 <DIO_enuGetpin+0x128>
	else{
		switch(Copy_u8PortID){
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3f 83       	std	Y+7, r19	; 0x07
    14ec:	2e 83       	std	Y+6, r18	; 0x06
    14ee:	4e 81       	ldd	r20, Y+6	; 0x06
    14f0:	5f 81       	ldd	r21, Y+7	; 0x07
    14f2:	41 30       	cpi	r20, 0x01	; 1
    14f4:	51 05       	cpc	r21, r1
    14f6:	59 f1       	breq	.+86     	; 0x154e <DIO_enuGetpin+0xb0>
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	9f 81       	ldd	r25, Y+7	; 0x07
    14fc:	82 30       	cpi	r24, 0x02	; 2
    14fe:	91 05       	cpc	r25, r1
    1500:	34 f4       	brge	.+12     	; 0x150e <DIO_enuGetpin+0x70>
    1502:	2e 81       	ldd	r18, Y+6	; 0x06
    1504:	3f 81       	ldd	r19, Y+7	; 0x07
    1506:	21 15       	cp	r18, r1
    1508:	31 05       	cpc	r19, r1
    150a:	69 f0       	breq	.+26     	; 0x1526 <DIO_enuGetpin+0x88>
    150c:	5b c0       	rjmp	.+182    	; 0x15c4 <DIO_enuGetpin+0x126>
    150e:	4e 81       	ldd	r20, Y+6	; 0x06
    1510:	5f 81       	ldd	r21, Y+7	; 0x07
    1512:	42 30       	cpi	r20, 0x02	; 2
    1514:	51 05       	cpc	r21, r1
    1516:	79 f1       	breq	.+94     	; 0x1576 <DIO_enuGetpin+0xd8>
    1518:	8e 81       	ldd	r24, Y+6	; 0x06
    151a:	9f 81       	ldd	r25, Y+7	; 0x07
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <DIO_enuGetpin+0x86>
    1522:	3d c0       	rjmp	.+122    	; 0x159e <DIO_enuGetpin+0x100>
    1524:	4f c0       	rjmp	.+158    	; 0x15c4 <DIO_enuGetpin+0x126>
			case DIO_PORTA:
				*Copy_pu8Value = getBit(PINA,Copy_u8PinID);
    1526:	e9 e3       	ldi	r30, 0x39	; 57
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_enuGetpin+0xa0>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_enuGetpin+0x9c>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	ec 81       	ldd	r30, Y+4	; 0x04
    1548:	fd 81       	ldd	r31, Y+5	; 0x05
    154a:	80 83       	st	Z, r24
    154c:	3b c0       	rjmp	.+118    	; 0x15c4 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = getBit(PINB,Copy_u8PinID);
    154e:	e6 e3       	ldi	r30, 0x36	; 54
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_enuGetpin+0xc8>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_enuGetpin+0xc4>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	ec 81       	ldd	r30, Y+4	; 0x04
    1570:	fd 81       	ldd	r31, Y+5	; 0x05
    1572:	80 83       	st	Z, r24
    1574:	27 c0       	rjmp	.+78     	; 0x15c4 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = getBit(PINC,Copy_u8PinID);
    1576:	e3 e3       	ldi	r30, 0x33	; 51
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_enuGetpin+0xf0>
    158a:	55 95       	asr	r21
    158c:	47 95       	ror	r20
    158e:	8a 95       	dec	r24
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_enuGetpin+0xec>
    1592:	ca 01       	movw	r24, r20
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	ec 81       	ldd	r30, Y+4	; 0x04
    1598:	fd 81       	ldd	r31, Y+5	; 0x05
    159a:	80 83       	st	Z, r24
    159c:	13 c0       	rjmp	.+38     	; 0x15c4 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = getBit(PIND,Copy_u8PinID);
    159e:	e0 e3       	ldi	r30, 0x30	; 48
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_enuGetpin+0x118>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_enuGetpin+0x114>
    15ba:	ca 01       	movw	r24, r20
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	ec 81       	ldd	r30, Y+4	; 0x04
    15c0:	fd 81       	ldd	r31, Y+5	; 0x05
    15c2:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    15c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c8:	27 96       	adiw	r28, 0x07	; 7
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <DIO_enuTogPin>:

ES DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <DIO_enuTogPin+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <DIO_enuTogPin+0x8>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	84 30       	cpi	r24, 0x04	; 4
    15f4:	18 f0       	brcs	.+6      	; 0x15fc <DIO_enuTogPin+0x22>
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	75 c0       	rjmp	.+234    	; 0x16e6 <DIO_enuTogPin+0x10c>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 30       	cpi	r24, 0x08	; 8
    1600:	18 f0       	brcs	.+6      	; 0x1608 <DIO_enuTogPin+0x2e>
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6f c0       	rjmp	.+222    	; 0x16e6 <DIO_enuTogPin+0x10c>
	else{
		switch(Copy_u8PortID){
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3d 83       	std	Y+5, r19	; 0x05
    1610:	2c 83       	std	Y+4, r18	; 0x04
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	9d 81       	ldd	r25, Y+5	; 0x05
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	49 f1       	breq	.+82     	; 0x166e <DIO_enuTogPin+0x94>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <DIO_enuTogPin+0x56>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <DIO_enuTogPin+0x6c>
    162e:	5a c0       	rjmp	.+180    	; 0x16e4 <DIO_enuTogPin+0x10a>
    1630:	2c 81       	ldd	r18, Y+4	; 0x04
    1632:	3d 81       	ldd	r19, Y+5	; 0x05
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	71 f1       	breq	.+92     	; 0x1696 <DIO_enuTogPin+0xbc>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	e9 f1       	breq	.+122    	; 0x16be <DIO_enuTogPin+0xe4>
    1644:	4f c0       	rjmp	.+158    	; 0x16e4 <DIO_enuTogPin+0x10a>
			case DIO_PORTA:
				PORTA ^= (1 << Copy_u8PinID);
    1646:	ab e3       	ldi	r26, 0x3B	; 59
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb e3       	ldi	r30, 0x3B	; 59
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <DIO_enuTogPin+0x8a>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <DIO_enuTogPin+0x86>
    1668:	84 27       	eor	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	3b c0       	rjmp	.+118    	; 0x16e4 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTB:
				PORTB ^= (1 << Copy_u8PinID);
    166e:	a8 e3       	ldi	r26, 0x38	; 56
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e8 e3       	ldi	r30, 0x38	; 56
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_enuTogPin+0xb2>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_enuTogPin+0xae>
    1690:	84 27       	eor	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	27 c0       	rjmp	.+78     	; 0x16e4 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTC:
				PORTC ^= (1 << Copy_u8PinID);
    1696:	a5 e3       	ldi	r26, 0x35	; 53
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_enuTogPin+0xda>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_enuTogPin+0xd6>
    16b8:	84 27       	eor	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	13 c0       	rjmp	.+38     	; 0x16e4 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTD:
				PORTD ^= (1 << Copy_u8PinID);
    16be:	a2 e3       	ldi	r26, 0x32	; 50
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e2 e3       	ldi	r30, 0x32	; 50
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_enuTogPin+0x102>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_enuTogPin+0xfe>
    16e0:	84 27       	eor	r24, r20
    16e2:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    16e4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <Initialize_Stack>:
#include "..\stdTypes.h"
#include "stdlib.h"
#include "stack.h"

void Initialize_Stack(Stack* ps){
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <Initialize_Stack+0x6>
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
	ps->top = NULL;
    1706:	e9 81       	ldd	r30, Y+1	; 0x01
    1708:	fa 81       	ldd	r31, Y+2	; 0x02
    170a:	11 82       	std	Z+1, r1	; 0x01
    170c:	10 82       	st	Z, r1
	ps->size = 0;
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	13 82       	std	Z+3, r1	; 0x03
    1714:	12 82       	std	Z+2, r1	; 0x02
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <Push>:

void Push(Stack* ps, StackEntry val){
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Push+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <Push+0x8>
    1728:	0f 92       	push	r0
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	6d 83       	std	Y+5, r22	; 0x05
	StackNode* pn = (StackNode*) malloc(sizeof(StackNode));
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 8f 22 	call	0x451e	; 0x451e <malloc>
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
	pn->entry = val;
    1740:	e9 81       	ldd	r30, Y+1	; 0x01
    1742:	fa 81       	ldd	r31, Y+2	; 0x02
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	80 83       	st	Z, r24
	pn->next = ps->top;
    1748:	eb 81       	ldd	r30, Y+3	; 0x03
    174a:	fc 81       	ldd	r31, Y+4	; 0x04
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	e9 81       	ldd	r30, Y+1	; 0x01
    1752:	fa 81       	ldd	r31, Y+2	; 0x02
    1754:	92 83       	std	Z+2, r25	; 0x02
    1756:	81 83       	std	Z+1, r24	; 0x01
	ps->top = pn;
    1758:	eb 81       	ldd	r30, Y+3	; 0x03
    175a:	fc 81       	ldd	r31, Y+4	; 0x04
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
	ps->size++;
    1764:	eb 81       	ldd	r30, Y+3	; 0x03
    1766:	fc 81       	ldd	r31, Y+4	; 0x04
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	eb 81       	ldd	r30, Y+3	; 0x03
    1770:	fc 81       	ldd	r31, Y+4	; 0x04
    1772:	93 83       	std	Z+3, r25	; 0x03
    1774:	82 83       	std	Z+2, r24	; 0x02
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <Pop>:

void Pop(StackEntry *pe,Stack* ps){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <Pop+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <Pop+0x8>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <Pop+0xa>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	7e 83       	std	Y+6, r23	; 0x06
    179a:	6d 83       	std	Y+5, r22	; 0x05
	*pe = ps->top->entry;
    179c:	ed 81       	ldd	r30, Y+5	; 0x05
    179e:	fe 81       	ldd	r31, Y+6	; 0x06
    17a0:	01 90       	ld	r0, Z+
    17a2:	f0 81       	ld	r31, Z
    17a4:	e0 2d       	mov	r30, r0
    17a6:	80 81       	ld	r24, Z
    17a8:	eb 81       	ldd	r30, Y+3	; 0x03
    17aa:	fc 81       	ldd	r31, Y+4	; 0x04
    17ac:	80 83       	st	Z, r24
	StackNode* pn = ps->top;
    17ae:	ed 81       	ldd	r30, Y+5	; 0x05
    17b0:	fe 81       	ldd	r31, Y+6	; 0x06
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	ps->top = ps->top->next;
    17ba:	ed 81       	ldd	r30, Y+5	; 0x05
    17bc:	fe 81       	ldd	r31, Y+6	; 0x06
    17be:	01 90       	ld	r0, Z+
    17c0:	f0 81       	ld	r31, Z
    17c2:	e0 2d       	mov	r30, r0
    17c4:	81 81       	ldd	r24, Z+1	; 0x01
    17c6:	92 81       	ldd	r25, Z+2	; 0x02
    17c8:	ed 81       	ldd	r30, Y+5	; 0x05
    17ca:	fe 81       	ldd	r31, Y+6	; 0x06
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
	free(pn);
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	0e 94 3c 23 	call	0x4678	; 0x4678 <free>
	ps->size--;
    17d8:	ed 81       	ldd	r30, Y+5	; 0x05
    17da:	fe 81       	ldd	r31, Y+6	; 0x06
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	ed 81       	ldd	r30, Y+5	; 0x05
    17e4:	fe 81       	ldd	r31, Y+6	; 0x06
    17e6:	93 83       	std	Z+3, r25	; 0x03
    17e8:	82 83       	std	Z+2, r24	; 0x02
}
    17ea:	26 96       	adiw	r28, 0x06	; 6
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <Stack_Empty>:

int Stack_Empty(Stack* ps){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <Stack_Empty+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <Stack_Empty+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
	return ps->top == NULL;
    180c:	e9 81       	ldd	r30, Y+1	; 0x01
    180e:	fa 81       	ldd	r31, Y+2	; 0x02
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	1c 82       	std	Y+4, r1	; 0x04
    1816:	1b 82       	std	Y+3, r1	; 0x03
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	21 f4       	brne	.+8      	; 0x1824 <Stack_Empty+0x28>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <Stack_Size>:

int Stack_Size(Stack* ps){
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <Stack_Size+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	return ps->size;
    1844:	e9 81       	ldd	r30, Y+1	; 0x01
    1846:	fa 81       	ldd	r31, Y+2	; 0x02
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <Clear_Stack>:

void Clear_Stack(Stack* ps){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <Clear_Stack+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <Clear_Stack+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
	StackNode* pn = ps->top;
    1866:	eb 81       	ldd	r30, Y+3	; 0x03
    1868:	fc 81       	ldd	r31, Y+4	; 0x04
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <Clear_Stack+0x42>
	while(pn){
		pn = pn->next;
    1874:	e9 81       	ldd	r30, Y+1	; 0x01
    1876:	fa 81       	ldd	r31, Y+2	; 0x02
    1878:	81 81       	ldd	r24, Z+1	; 0x01
    187a:	92 81       	ldd	r25, Z+2	; 0x02
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
		free(ps->top);
    1880:	eb 81       	ldd	r30, Y+3	; 0x03
    1882:	fc 81       	ldd	r31, Y+4	; 0x04
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	0e 94 3c 23 	call	0x4678	; 0x4678 <free>
		ps->top = pn;
    188c:	eb 81       	ldd	r30, Y+3	; 0x03
    188e:	fc 81       	ldd	r31, Y+4	; 0x04
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
	return ps->size;
}

void Clear_Stack(Stack* ps){
	StackNode* pn = ps->top;
	while(pn){
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	51 f7       	brne	.-44     	; 0x1874 <Clear_Stack+0x1e>
		pn = pn->next;
		free(ps->top);
		ps->top = pn;
	}
	ps->size = 0;
    18a0:	eb 81       	ldd	r30, Y+3	; 0x03
    18a2:	fc 81       	ldd	r31, Y+4	; 0x04
    18a4:	13 82       	std	Z+3, r1	; 0x03
    18a6:	12 82       	std	Z+2, r1	; 0x02
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <Top>:


StackEntry Top(Stack* ps){
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <Top+0x6>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
	return ps->top->entry;
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	01 90       	ld	r0, Z+
    18ca:	f0 81       	ld	r31, Z
    18cc:	e0 2d       	mov	r30, r0
    18ce:	80 81       	ld	r24, Z
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <max>:
 */


double factorial[100];

int max(int a, int b){
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <max+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <max+0x8>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <max+0xa>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	7c 83       	std	Y+4, r23	; 0x04
    18ee:	6b 83       	std	Y+3, r22	; 0x03
	if(a > b) return a;
    18f0:	29 81       	ldd	r18, Y+1	; 0x01
    18f2:	3a 81       	ldd	r19, Y+2	; 0x02
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	82 17       	cp	r24, r18
    18fa:	93 07       	cpc	r25, r19
    18fc:	2c f4       	brge	.+10     	; 0x1908 <max+0x2e>
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <max+0x36>
	return b;
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1914:	26 96       	adiw	r28, 0x06	; 6
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <Float_Abs>:
double Float_Abs(double a){
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	28 97       	sbiw	r28, 0x08	; 8
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	69 83       	std	Y+1, r22	; 0x01
    193c:	7a 83       	std	Y+2, r23	; 0x02
    193e:	8b 83       	std	Y+3, r24	; 0x03
    1940:	9c 83       	std	Y+4, r25	; 0x04
	if(a > 0) return a;
    1942:	69 81       	ldd	r22, Y+1	; 0x01
    1944:	7a 81       	ldd	r23, Y+2	; 0x02
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f4       	brge	.+18     	; 0x196c <Float_Abs+0x46>
    195a:	29 81       	ldd	r18, Y+1	; 0x01
    195c:	3a 81       	ldd	r19, Y+2	; 0x02
    195e:	4b 81       	ldd	r20, Y+3	; 0x03
    1960:	5c 81       	ldd	r21, Y+4	; 0x04
    1962:	2d 83       	std	Y+5, r18	; 0x05
    1964:	3e 83       	std	Y+6, r19	; 0x06
    1966:	4f 83       	std	Y+7, r20	; 0x07
    1968:	58 87       	std	Y+8, r21	; 0x08
    196a:	0b c0       	rjmp	.+22     	; 0x1982 <Float_Abs+0x5c>
	return -1 * a;
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	ab 81       	ldd	r26, Y+3	; 0x03
    1972:	bc 81       	ldd	r27, Y+4	; 0x04
    1974:	9c 01       	movw	r18, r24
    1976:	ad 01       	movw	r20, r26
    1978:	50 58       	subi	r21, 0x80	; 128
    197a:	2d 83       	std	Y+5, r18	; 0x05
    197c:	3e 83       	std	Y+6, r19	; 0x06
    197e:	4f 83       	std	Y+7, r20	; 0x07
    1980:	58 87       	std	Y+8, r21	; 0x08
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	af 81       	ldd	r26, Y+7	; 0x07
    1988:	b8 85       	ldd	r27, Y+8	; 0x08
}
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	28 96       	adiw	r28, 0x08	; 8
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <Math_voidInit>:

void Math_voidInit(){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	set_factorial();
    19a8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <set_factorial>
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <set_factorial>:

void set_factorial(){
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <set_factorial+0x12>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    factorial[0] = 1;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a0 e8       	ldi	r26, 0x80	; 128
    19ce:	bf e3       	ldi	r27, 0x3F	; 63
    19d0:	80 93 9a 01 	sts	0x019A, r24
    19d4:	90 93 9b 01 	sts	0x019B, r25
    19d8:	a0 93 9c 01 	sts	0x019C, r26
    19dc:	b0 93 9d 01 	sts	0x019D, r27
    for(int i = 1; i < 100; i++){
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	35 c0       	rjmp	.+106    	; 0x1a54 <set_factorial+0xa2>
        factorial[i] = factorial[i - 1] * i;
    19ea:	c9 80       	ldd	r12, Y+1	; 0x01
    19ec:	da 80       	ldd	r13, Y+2	; 0x02
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	fc 01       	movw	r30, r24
    19fe:	e6 56       	subi	r30, 0x66	; 102
    1a00:	fe 4f       	sbci	r31, 0xFE	; 254
    1a02:	e0 80       	ld	r14, Z
    1a04:	f1 80       	ldd	r15, Z+1	; 0x01
    1a06:	02 81       	ldd	r16, Z+2	; 0x02
    1a08:	13 81       	ldd	r17, Z+3	; 0x03
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	aa 27       	eor	r26, r26
    1a10:	97 fd       	sbrc	r25, 7
    1a12:	a0 95       	com	r26
    1a14:	ba 2f       	mov	r27, r26
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1a1e:	9b 01       	movw	r18, r22
    1a20:	ac 01       	movw	r20, r24
    1a22:	c8 01       	movw	r24, r16
    1a24:	b7 01       	movw	r22, r14
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9c 01       	movw	r18, r24
    1a30:	ad 01       	movw	r20, r26
    1a32:	c6 01       	movw	r24, r12
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	e6 56       	subi	r30, 0x66	; 102
    1a40:	fe 4f       	sbci	r31, 0xFE	; 254
    1a42:	20 83       	st	Z, r18
    1a44:	31 83       	std	Z+1, r19	; 0x01
    1a46:	42 83       	std	Z+2, r20	; 0x02
    1a48:	53 83       	std	Z+3, r21	; 0x03
	set_factorial();
}

void set_factorial(){
    factorial[0] = 1;
    for(int i = 1; i < 100; i++){
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	84 36       	cpi	r24, 0x64	; 100
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	34 f2       	brlt	.-116    	; 0x19ea <set_factorial+0x38>
        factorial[i] = factorial[i - 1] * i;
    }
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	df 90       	pop	r13
    1a70:	cf 90       	pop	r12
    1a72:	08 95       	ret

00001a74 <LN>:

double LN(double x) {
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	62 97       	sbiw	r28, 0x12	; 18
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	6b 87       	std	Y+11, r22	; 0x0b
    1a8a:	7c 87       	std	Y+12, r23	; 0x0c
    1a8c:	8d 87       	std	Y+13, r24	; 0x0d
    1a8e:	9e 87       	std	Y+14, r25	; 0x0e

    if (x >= 2) {
    1a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	50 e4       	ldi	r21, 0x40	; 64
    1aa0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	0c f1       	brlt	.+66     	; 0x1aea <LN+0x76>
        return LN(x/2.0) + (double)0.6931471806;
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	50 e4       	ldi	r21, 0x40	; 64
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LN>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	28 e1       	ldi	r18, 0x18	; 24
    1ad2:	32 e7       	ldi	r19, 0x72	; 114
    1ad4:	41 e3       	ldi	r20, 0x31	; 49
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	a9 8b       	std	Y+17, r26	; 0x11
    1ae6:	ba 8b       	std	Y+18, r27	; 0x12
    1ae8:	93 c0       	rjmp	.+294    	; 0x1c10 <LN+0x19c>
    }

    x = x-1;
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8b 87       	std	Y+11, r24	; 0x0b
    1b04:	9c 87       	std	Y+12, r25	; 0x0c
    1b06:	ad 87       	std	Y+13, r26	; 0x0d
    1b08:	be 87       	std	Y+14, r27	; 0x0e

    double total = 0.0;
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	8f 83       	std	Y+7, r24	; 0x07
    1b14:	98 87       	std	Y+8, r25	; 0x08
    1b16:	a9 87       	std	Y+9, r26	; 0x09
    1b18:	ba 87       	std	Y+10, r27	; 0x0a
    double xToTheIPower = x;
    1b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b1e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b20:	be 85       	ldd	r27, Y+14	; 0x0e
    1b22:	8b 83       	std	Y+3, r24	; 0x03
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	ad 83       	std	Y+5, r26	; 0x05
    1b28:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 1; i < 100; i++) {
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	60 c0       	rjmp	.+192    	; 0x1bf4 <LN+0x180>
        if (i&1) total += xToTheIPower / (i);
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	81 70       	andi	r24, 0x01	; 1
    1b3a:	90 70       	andi	r25, 0x00	; 0
    1b3c:	88 23       	and	r24, r24
    1b3e:	19 f1       	breq	.+70     	; 0x1b86 <LN+0x112>
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	aa 27       	eor	r26, r26
    1b46:	97 fd       	sbrc	r25, 7
    1b48:	a0 95       	com	r26
    1b4a:	ba 2f       	mov	r27, r26
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1b54:	9b 01       	movw	r18, r22
    1b56:	ac 01       	movw	r20, r24
    1b58:	6b 81       	ldd	r22, Y+3	; 0x03
    1b5a:	7c 81       	ldd	r23, Y+4	; 0x04
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9c 01       	movw	r18, r24
    1b6a:	ad 01       	movw	r20, r26
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8f 83       	std	Y+7, r24	; 0x07
    1b7e:	98 87       	std	Y+8, r25	; 0x08
    1b80:	a9 87       	std	Y+9, r26	; 0x09
    1b82:	ba 87       	std	Y+10, r27	; 0x0a
    1b84:	22 c0       	rjmp	.+68     	; 0x1bca <LN+0x156>
        else total -= xToTheIPower / (i);
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	97 fd       	sbrc	r25, 7
    1b8e:	a0 95       	com	r26
    1b90:	ba 2f       	mov	r27, r26
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	6b 81       	ldd	r22, Y+3	; 0x03
    1ba0:	7c 81       	ldd	r23, Y+4	; 0x04
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 01       	movw	r18, r24
    1bb0:	ad 01       	movw	r20, r26
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	8f 83       	std	Y+7, r24	; 0x07
    1bc4:	98 87       	std	Y+8, r25	; 0x08
    1bc6:	a9 87       	std	Y+9, r26	; 0x09
    1bc8:	ba 87       	std	Y+10, r27	; 0x0a
        xToTheIPower *= x;
    1bca:	6b 81       	ldd	r22, Y+3	; 0x03
    1bcc:	7c 81       	ldd	r23, Y+4	; 0x04
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1bd4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bd6:	4d 85       	ldd	r20, Y+13	; 0x0d
    1bd8:	5e 85       	ldd	r21, Y+14	; 0x0e
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8b 83       	std	Y+3, r24	; 0x03
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	ad 83       	std	Y+5, r26	; 0x05
    1be8:	be 83       	std	Y+6, r27	; 0x06
    x = x-1;

    double total = 0.0;
    double xToTheIPower = x;

    for (int i = 1; i < 100; i++) {
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	84 36       	cpi	r24, 0x64	; 100
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	0c f4       	brge	.+2      	; 0x1c00 <LN+0x18c>
    1bfe:	9a cf       	rjmp	.-204    	; 0x1b34 <LN+0xc0>
        if (i&1) total += xToTheIPower / (i);
        else total -= xToTheIPower / (i);
        xToTheIPower *= x;
    }
    return total;
    1c00:	8f 81       	ldd	r24, Y+7	; 0x07
    1c02:	98 85       	ldd	r25, Y+8	; 0x08
    1c04:	a9 85       	ldd	r26, Y+9	; 0x09
    1c06:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c08:	8f 87       	std	Y+15, r24	; 0x0f
    1c0a:	98 8b       	std	Y+16, r25	; 0x10
    1c0c:	a9 8b       	std	Y+17, r26	; 0x11
    1c0e:	ba 8b       	std	Y+18, r27	; 0x12
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	98 89       	ldd	r25, Y+16	; 0x10
    1c14:	a9 89       	ldd	r26, Y+17	; 0x11
    1c16:	ba 89       	ldd	r27, Y+18	; 0x12
}
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	62 96       	adiw	r28, 0x12	; 18
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <e>:

double e(double x){
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	2e 97       	sbiw	r28, 0x0e	; 14
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	6b 87       	std	Y+11, r22	; 0x0b
    1c44:	7c 87       	std	Y+12, r23	; 0x0c
    1c46:	8d 87       	std	Y+13, r24	; 0x0d
    1c48:	9e 87       	std	Y+14, r25	; 0x0e
    double sum = 0, xToTheIPower = 1;
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e0       	ldi	r26, 0x00	; 0
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	8f 83       	std	Y+7, r24	; 0x07
    1c54:	98 87       	std	Y+8, r25	; 0x08
    1c56:	a9 87       	std	Y+9, r26	; 0x09
    1c58:	ba 87       	std	Y+10, r27	; 0x0a
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e8       	ldi	r26, 0x80	; 128
    1c60:	bf e3       	ldi	r27, 0x3F	; 63
    1c62:	8b 83       	std	Y+3, r24	; 0x03
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	ad 83       	std	Y+5, r26	; 0x05
    1c68:	be 83       	std	Y+6, r27	; 0x06
    for (int i = 0; i < 38; i++){
    1c6a:	1a 82       	std	Y+2, r1	; 0x02
    1c6c:	19 82       	std	Y+1, r1	; 0x01
    1c6e:	38 c0       	rjmp	.+112    	; 0x1ce0 <e+0xb2>
        sum += xToTheIPower/factorial[i] ;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	e6 56       	subi	r30, 0x66	; 102
    1c80:	fe 4f       	sbci	r31, 0xFE	; 254
    1c82:	20 81       	ld	r18, Z
    1c84:	31 81       	ldd	r19, Z+1	; 0x01
    1c86:	42 81       	ldd	r20, Z+2	; 0x02
    1c88:	53 81       	ldd	r21, Z+3	; 0x03
    1c8a:	6b 81       	ldd	r22, Y+3	; 0x03
    1c8c:	7c 81       	ldd	r23, Y+4	; 0x04
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	ad 01       	movw	r20, r26
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8f 83       	std	Y+7, r24	; 0x07
    1cb0:	98 87       	std	Y+8, r25	; 0x08
    1cb2:	a9 87       	std	Y+9, r26	; 0x09
    1cb4:	ba 87       	std	Y+10, r27	; 0x0a
        xToTheIPower *= x;
    1cb6:	6b 81       	ldd	r22, Y+3	; 0x03
    1cb8:	7c 81       	ldd	r23, Y+4	; 0x04
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cc0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cc2:	4d 85       	ldd	r20, Y+13	; 0x0d
    1cc4:	5e 85       	ldd	r21, Y+14	; 0x0e
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8b 83       	std	Y+3, r24	; 0x03
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	ad 83       	std	Y+5, r26	; 0x05
    1cd4:	be 83       	std	Y+6, r27	; 0x06
    return total;
}

double e(double x){
    double sum = 0, xToTheIPower = 1;
    for (int i = 0; i < 38; i++){
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	86 32       	cpi	r24, 0x26	; 38
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	1c f2       	brlt	.-122    	; 0x1c70 <e+0x42>
        sum += xToTheIPower/factorial[i] ;
        xToTheIPower *= x;
    }
    return sum;
    1cea:	8f 81       	ldd	r24, Y+7	; 0x07
    1cec:	98 85       	ldd	r25, Y+8	; 0x08
    1cee:	a9 85       	ldd	r26, Y+9	; 0x09
    1cf0:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	2e 96       	adiw	r28, 0x0e	; 14
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <power>:

double power(double a,double b){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	62 97       	sbiw	r28, 0x12	; 18
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	6b 87       	std	Y+11, r22	; 0x0b
    1d1e:	7c 87       	std	Y+12, r23	; 0x0c
    1d20:	8d 87       	std	Y+13, r24	; 0x0d
    1d22:	9e 87       	std	Y+14, r25	; 0x0e
    1d24:	2f 87       	std	Y+15, r18	; 0x0f
    1d26:	38 8b       	std	Y+16, r19	; 0x10
    1d28:	49 8b       	std	Y+17, r20	; 0x11
    1d2a:	5a 8b       	std	Y+18, r21	; 0x12
	if(b < 0){
    1d2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d2e:	78 89       	ldd	r23, Y+16	; 0x10
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	9a 89       	ldd	r25, Y+18	; 0x12
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	cc f4       	brge	.+50     	; 0x1d76 <power+0x6e>
		a = 1/a;
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	80 e8       	ldi	r24, 0x80	; 128
    1d4a:	9f e3       	ldi	r25, 0x3F	; 63
    1d4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d50:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d52:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8b 87       	std	Y+11, r24	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	ad 87       	std	Y+13, r26	; 0x0d
    1d62:	be 87       	std	Y+14, r27	; 0x0e
		b *= -1;
    1d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d66:	98 89       	ldd	r25, Y+16	; 0x10
    1d68:	a9 89       	ldd	r26, Y+17	; 0x11
    1d6a:	ba 89       	ldd	r27, Y+18	; 0x12
    1d6c:	b0 58       	subi	r27, 0x80	; 128
    1d6e:	8f 87       	std	Y+15, r24	; 0x0f
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	a9 8b       	std	Y+17, r26	; 0x11
    1d74:	ba 8b       	std	Y+18, r27	; 0x12
	}
	long IntegerVal = b;
    1d76:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d78:	78 89       	ldd	r23, Y+16	; 0x10
    1d7a:	89 89       	ldd	r24, Y+17	; 0x11
    1d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d7e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	8f 83       	std	Y+7, r24	; 0x07
    1d88:	98 87       	std	Y+8, r25	; 0x08
    1d8a:	a9 87       	std	Y+9, r26	; 0x09
    1d8c:	ba 87       	std	Y+10, r27	; 0x0a
	double ans = 1;
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	9c 83       	std	Y+4, r25	; 0x04
    1d9a:	ad 83       	std	Y+5, r26	; 0x05
    1d9c:	be 83       	std	Y+6, r27	; 0x06
	for(int i = 0; i < IntegerVal; i++){
    1d9e:	1a 82       	std	Y+2, r1	; 0x02
    1da0:	19 82       	std	Y+1, r1	; 0x01
    1da2:	15 c0       	rjmp	.+42     	; 0x1dce <power+0xc6>
		ans *= a;
    1da4:	6b 81       	ldd	r22, Y+3	; 0x03
    1da6:	7c 81       	ldd	r23, Y+4	; 0x04
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dae:	3c 85       	ldd	r19, Y+12	; 0x0c
    1db0:	4d 85       	ldd	r20, Y+13	; 0x0d
    1db2:	5e 85       	ldd	r21, Y+14	; 0x0e
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	ad 83       	std	Y+5, r26	; 0x05
    1dc2:	be 83       	std	Y+6, r27	; 0x06
		a = 1/a;
		b *= -1;
	}
	long IntegerVal = b;
	double ans = 1;
	for(int i = 0; i < IntegerVal; i++){
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	9c 01       	movw	r18, r24
    1dd4:	44 27       	eor	r20, r20
    1dd6:	37 fd       	sbrc	r19, 7
    1dd8:	40 95       	com	r20
    1dda:	54 2f       	mov	r21, r20
    1ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dde:	98 85       	ldd	r25, Y+8	; 0x08
    1de0:	a9 85       	ldd	r26, Y+9	; 0x09
    1de2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1de4:	28 17       	cp	r18, r24
    1de6:	39 07       	cpc	r19, r25
    1de8:	4a 07       	cpc	r20, r26
    1dea:	5b 07       	cpc	r21, r27
    1dec:	dc f2       	brlt	.-74     	; 0x1da4 <power+0x9c>
		ans *= a;
	}
	b -= IntegerVal;
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e00:	78 89       	ldd	r23, Y+16	; 0x10
    1e02:	89 89       	ldd	r24, Y+17	; 0x11
    1e04:	9a 89       	ldd	r25, Y+18	; 0x12
    1e06:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 87       	std	Y+15, r24	; 0x0f
    1e10:	98 8b       	std	Y+16, r25	; 0x10
    1e12:	a9 8b       	std	Y+17, r26	; 0x11
    1e14:	ba 8b       	std	Y+18, r27	; 0x12
	ans *= e(b * LN(a));
    1e16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e1a:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e1c:	be 85       	ldd	r27, Y+14	; 0x0e
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <LN>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e30:	38 89       	ldd	r19, Y+16	; 0x10
    1e32:	49 89       	ldd	r20, Y+17	; 0x11
    1e34:	5a 89       	ldd	r21, Y+18	; 0x12
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <e>
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	6b 81       	ldd	r22, Y+3	; 0x03
    1e4c:	7c 81       	ldd	r23, Y+4	; 0x04
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	ad 83       	std	Y+5, r26	; 0x05
    1e60:	be 83       	std	Y+6, r27	; 0x06

    return ans;
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	ad 81       	ldd	r26, Y+5	; 0x05
    1e68:	be 81       	ldd	r27, Y+6	; 0x06
}
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	62 96       	adiw	r28, 0x12	; 18
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <LCD_enuInit>:
#include "LCD_config.h"
#include "LCD_priv.h"

#include "util/delay.h"

ES LCD_enuInit(void){
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	e9 97       	sbiw	r28, 0x39	; 57
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
	ES Local_enuErrorState = ES_NOK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	62 e0       	ldi	r22, 0x02	; 2
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	67 e0       	ldi	r22, 0x07	; 7
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	66 e0       	ldi	r22, 0x06	; 6
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	65 e0       	ldi	r22, 0x05	; 5
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	64 e0       	ldi	r22, 0x04	; 4
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	ac e0       	ldi	r26, 0x0C	; 12
    1ee4:	b2 e4       	ldi	r27, 0x42	; 66
    1ee6:	8d ab       	std	Y+53, r24	; 0x35
    1ee8:	9e ab       	std	Y+54, r25	; 0x36
    1eea:	af ab       	std	Y+55, r26	; 0x37
    1eec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a e7       	ldi	r20, 0x7A	; 122
    1efc:	53 e4       	ldi	r21, 0x43	; 67
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	89 ab       	std	Y+49, r24	; 0x31
    1f08:	9a ab       	std	Y+50, r25	; 0x32
    1f0a:	ab ab       	std	Y+51, r26	; 0x33
    1f0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f10:	7a a9       	ldd	r23, Y+50	; 0x32
    1f12:	8b a9       	ldd	r24, Y+51	; 0x33
    1f14:	9c a9       	ldd	r25, Y+52	; 0x34
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <LCD_enuInit+0xb0>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	98 ab       	std	Y+48, r25	; 0x30
    1f2c:	8f a7       	std	Y+47, r24	; 0x2f
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    1f30:	69 a9       	ldd	r22, Y+49	; 0x31
    1f32:	7a a9       	ldd	r23, Y+50	; 0x32
    1f34:	8b a9       	ldd	r24, Y+51	; 0x33
    1f36:	9c a9       	ldd	r25, Y+52	; 0x34
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	98 ab       	std	Y+48, r25	; 0x30
    1f6e:	8f a7       	std	Y+47, r24	; 0x2f
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <LCD_enuInit+0x110>
    1f72:	89 e1       	ldi	r24, 0x19	; 25
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9e a7       	std	Y+46, r25	; 0x2e
    1f78:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_enuInit+0xfe>
    1f82:	9e a7       	std	Y+46, r25	; 0x2e
    1f84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f88:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	98 ab       	std	Y+48, r25	; 0x30
    1f8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f92:	98 a9       	ldd	r25, Y+48	; 0x30
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <LCD_enuInit+0xf2>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	98 ab       	std	Y+48, r25	; 0x30
    1fac:	8f a7       	std	Y+47, r24	; 0x2f
    1fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb2:	9c a7       	std	Y+44, r25	; 0x2c
    1fb4:	8b a7       	std	Y+43, r24	; 0x2b
    1fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_enuInit+0x13a>
    1fbe:	9c a7       	std	Y+44, r25	; 0x2c
    1fc0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	63 e0       	ldi	r22, 0x03	; 3
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	62 e0       	ldi	r22, 0x02	; 2
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
	LCD_inVoidSendCommand(0x3B);
    1fea:	8b e3       	ldi	r24, 0x3B	; 59
    1fec:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_inVoidSendCommand>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e8       	ldi	r26, 0x80	; 128
    1ff6:	bf e3       	ldi	r27, 0x3F	; 63
    1ff8:	8f a3       	std	Y+39, r24	; 0x27
    1ffa:	98 a7       	std	Y+40, r25	; 0x28
    1ffc:	a9 a7       	std	Y+41, r26	; 0x29
    1ffe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6f a1       	ldd	r22, Y+39	; 0x27
    2002:	78 a5       	ldd	r23, Y+40	; 0x28
    2004:	89 a5       	ldd	r24, Y+41	; 0x29
    2006:	9a a5       	ldd	r25, Y+42	; 0x2a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	53 e4       	ldi	r21, 0x43	; 67
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8b a3       	std	Y+35, r24	; 0x23
    201a:	9c a3       	std	Y+36, r25	; 0x24
    201c:	ad a3       	std	Y+37, r26	; 0x25
    201e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_enuInit+0x1c2>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a a3       	std	Y+34, r25	; 0x22
    203e:	89 a3       	std	Y+33, r24	; 0x21
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_enuInit+0x240>
	else if (__tmp > 65535)
    2042:	6b a1       	ldd	r22, Y+35	; 0x23
    2044:	7c a1       	ldd	r23, Y+36	; 0x24
    2046:	8d a1       	ldd	r24, Y+37	; 0x25
    2048:	9e a1       	ldd	r25, Y+38	; 0x26
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_enuInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_enuInit+0x222>
    2084:	89 e1       	ldi	r24, 0x19	; 25
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
    208c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208e:	98 a1       	ldd	r25, Y+32	; 0x20
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_enuInit+0x210>
    2094:	98 a3       	std	Y+32, r25	; 0x20
    2096:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	89 a1       	ldd	r24, Y+33	; 0x21
    209a:	9a a1       	ldd	r25, Y+34	; 0x22
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_enuInit+0x204>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_enuInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9a a3       	std	Y+34, r25	; 0x22
    20be:	89 a3       	std	Y+33, r24	; 0x21
    20c0:	89 a1       	ldd	r24, Y+33	; 0x21
    20c2:	9a a1       	ldd	r25, Y+34	; 0x22
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
    20c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_enuInit+0x24c>
    20d0:	9e 8f       	std	Y+30, r25	; 0x1e
    20d2:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommand(0x2B);
#endif
	_delay_ms(1);
	LCD_inVoidSendCommand(0x0f);
    20d4:	8f e0       	ldi	r24, 0x0F	; 15
    20d6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_inVoidSendCommand>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	89 8f       	std	Y+25, r24	; 0x19
    20e4:	9a 8f       	std	Y+26, r25	; 0x1a
    20e6:	ab 8f       	std	Y+27, r26	; 0x1b
    20e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	69 8d       	ldd	r22, Y+25	; 0x19
    20ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	53 e4       	ldi	r21, 0x43	; 67
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8d 8b       	std	Y+21, r24	; 0x15
    2104:	9e 8b       	std	Y+22, r25	; 0x16
    2106:	af 8b       	std	Y+23, r26	; 0x17
    2108:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    210a:	6d 89       	ldd	r22, Y+21	; 0x15
    210c:	7e 89       	ldd	r23, Y+22	; 0x16
    210e:	8f 89       	ldd	r24, Y+23	; 0x17
    2110:	98 8d       	ldd	r25, Y+24	; 0x18
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <LCD_enuInit+0x2ac>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LCD_enuInit+0x32a>
	else if (__tmp > 65535)
    212c:	6d 89       	ldd	r22, Y+21	; 0x15
    212e:	7e 89       	ldd	r23, Y+22	; 0x16
    2130:	8f 89       	ldd	r24, Y+23	; 0x17
    2132:	98 8d       	ldd	r25, Y+24	; 0x18
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <LCD_enuInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	69 8d       	ldd	r22, Y+25	; 0x19
    2146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LCD_enuInit+0x30c>
    216e:	89 e1       	ldi	r24, 0x19	; 25
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
    2176:	89 89       	ldd	r24, Y+17	; 0x11
    2178:	9a 89       	ldd	r25, Y+18	; 0x12
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_enuInit+0x2fa>
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8b 89       	ldd	r24, Y+19	; 0x13
    2184:	9c 89       	ldd	r25, Y+20	; 0x14
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <LCD_enuInit+0x2ee>
    2194:	14 c0       	rjmp	.+40     	; 0x21be <LCD_enuInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	6d 89       	ldd	r22, Y+21	; 0x15
    2198:	7e 89       	ldd	r23, Y+22	; 0x16
    219a:	8f 89       	ldd	r24, Y+23	; 0x17
    219c:	98 8d       	ldd	r25, Y+24	; 0x18
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	98 8b       	std	Y+16, r25	; 0x10
    21b0:	8f 87       	std	Y+15, r24	; 0x0f
    21b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b4:	98 89       	ldd	r25, Y+16	; 0x10
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_enuInit+0x336>
    21ba:	98 8b       	std	Y+16, r25	; 0x10
    21bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_inVoidSendCommand(0x01);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_inVoidSendCommand>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e0       	ldi	r26, 0x00	; 0
    21ca:	b0 e4       	ldi	r27, 0x40	; 64
    21cc:	8b 87       	std	Y+11, r24	; 0x0b
    21ce:	9c 87       	std	Y+12, r25	; 0x0c
    21d0:	ad 87       	std	Y+13, r26	; 0x0d
    21d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a e7       	ldi	r20, 0x7A	; 122
    21e2:	53 e4       	ldi	r21, 0x43	; 67
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8f 83       	std	Y+7, r24	; 0x07
    21ee:	98 87       	std	Y+8, r25	; 0x08
    21f0:	a9 87       	std	Y+9, r26	; 0x09
    21f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <LCD_enuInit+0x396>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <LCD_enuInit+0x414>
	else if (__tmp > 65535)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <LCD_enuInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <LCD_enuInit+0x3f6>
    2258:	89 e1       	ldi	r24, 0x19	; 25
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_enuInit+0x3e4>
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <LCD_enuInit+0x3d8>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <LCD_enuInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_enuInit+0x420>
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_inVoidSendCommand(0x06);
    22a8:	86 e0       	ldi	r24, 0x06	; 6
    22aa:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_inVoidSendCommand>

	Local_enuErrorState = ES_OK;
    22ae:	19 ae       	std	Y+57, r1	; 0x39
	return Local_enuErrorState;
    22b0:	89 ad       	ldd	r24, Y+57	; 0x39
}
    22b2:	e9 96       	adiw	r28, 0x39	; 57
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <LCD_enuDisplayChar>:

ES LCD_enuDisplayChar(u8 Copy_u8Data){
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <LCD_enuDisplayChar+0x6>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    22d4:	83 e0       	ldi	r24, 0x03	; 3
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	LCD_VoidLatch(Copy_u8Data);
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_VoidLatch>

	Local_enuErrorState = ES_OK;
    22e4:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <LCD_enuSendCommand>:

ES LCD_enuSendCommand(u8 Copy_u8Command){
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <LCD_enuSendCommand+0x6>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	LCD_VoidLatch(Copy_u8Command);
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_VoidLatch>

	Local_enuErrorState = ES_OK;
    2312:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <LCD_enuClearDisplay>:

ES LCD_enuClearDisplay(){
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	0f 92       	push	r0
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	89 83       	std	Y+1, r24	; 0x01

	LCD_inVoidSendCommand(0x01);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_inVoidSendCommand>

	Local_enuErrorState = ES_OK;
    2334:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
}
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_VoidLatch>:

static void LCD_VoidLatch(u8 Copy_u8Data)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	6d 97       	sbiw	r28, 0x1d	; 29
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    236a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    236c:	98 2f       	mov	r25, r24
    236e:	99 1f       	adc	r25, r25
    2370:	99 27       	eor	r25, r25
    2372:	99 1f       	adc	r25, r25
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	67 e0       	ldi	r22, 0x07	; 7
    2378:	49 2f       	mov	r20, r25
    237a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    237e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2380:	82 95       	swap	r24
    2382:	86 95       	lsr	r24
    2384:	86 95       	lsr	r24
    2386:	83 70       	andi	r24, 0x03	; 3
    2388:	98 2f       	mov	r25, r24
    238a:	91 70       	andi	r25, 0x01	; 1
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	66 e0       	ldi	r22, 0x06	; 6
    2390:	49 2f       	mov	r20, r25
    2392:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2398:	82 95       	swap	r24
    239a:	86 95       	lsr	r24
    239c:	87 70       	andi	r24, 0x07	; 7
    239e:	98 2f       	mov	r25, r24
    23a0:	91 70       	andi	r25, 0x01	; 1
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	65 e0       	ldi	r22, 0x05	; 5
    23a6:	49 2f       	mov	r20, r25
    23a8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    23ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ae:	82 95       	swap	r24
    23b0:	8f 70       	andi	r24, 0x0F	; 15
    23b2:	98 2f       	mov	r25, r24
    23b4:	91 70       	andi	r25, 0x01	; 1
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	49 2f       	mov	r20, r25
    23bc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    23c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c2:	86 95       	lsr	r24
    23c4:	86 95       	lsr	r24
    23c6:	86 95       	lsr	r24
    23c8:	98 2f       	mov	r25, r24
    23ca:	91 70       	andi	r25, 0x01	; 1
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	63 e0       	ldi	r22, 0x03	; 3
    23d0:	49 2f       	mov	r20, r25
    23d2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    23d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d8:	86 95       	lsr	r24
    23da:	86 95       	lsr	r24
    23dc:	98 2f       	mov	r25, r24
    23de:	91 70       	andi	r25, 0x01	; 1
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	49 2f       	mov	r20, r25
    23e6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    23ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ec:	86 95       	lsr	r24
    23ee:	98 2f       	mov	r25, r24
    23f0:	91 70       	andi	r25, 0x01	; 1
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	49 2f       	mov	r20, r25
    23f8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    23fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fe:	98 2f       	mov	r25, r24
    2400:	91 70       	andi	r25, 0x01	; 1
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	49 2f       	mov	r20, r25
    2408:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
#endif

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	62 e0       	ldi	r22, 0x02	; 2
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e2       	ldi	r26, 0x20	; 32
    241c:	b1 e4       	ldi	r27, 0x41	; 65
    241e:	89 8f       	std	Y+25, r24	; 0x19
    2420:	9a 8f       	std	Y+26, r25	; 0x1a
    2422:	ab 8f       	std	Y+27, r26	; 0x1b
    2424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	69 8d       	ldd	r22, Y+25	; 0x19
    2428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a e7       	ldi	r20, 0x7A	; 122
    2434:	53 e4       	ldi	r21, 0x43	; 67
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8d 8b       	std	Y+21, r24	; 0x15
    2440:	9e 8b       	std	Y+22, r25	; 0x16
    2442:	af 8b       	std	Y+23, r26	; 0x17
    2444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2446:	6d 89       	ldd	r22, Y+21	; 0x15
    2448:	7e 89       	ldd	r23, Y+22	; 0x16
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_VoidLatch+0x128>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 8b       	std	Y+20, r25	; 0x14
    2464:	8b 8b       	std	Y+19, r24	; 0x13
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <LCD_VoidLatch+0x1a6>
	else if (__tmp > 65535)
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <LCD_VoidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	69 8d       	ldd	r22, Y+25	; 0x19
    2482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9c 8b       	std	Y+20, r25	; 0x14
    24a6:	8b 8b       	std	Y+19, r24	; 0x13
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <LCD_VoidLatch+0x188>
    24aa:	89 e1       	ldi	r24, 0x19	; 25
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9a 8b       	std	Y+18, r25	; 0x12
    24b0:	89 8b       	std	Y+17, r24	; 0x11
    24b2:	89 89       	ldd	r24, Y+17	; 0x11
    24b4:	9a 89       	ldd	r25, Y+18	; 0x12
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_VoidLatch+0x176>
    24ba:	9a 8b       	std	Y+18, r25	; 0x12
    24bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <LCD_VoidLatch+0x16a>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <LCD_VoidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9c 8b       	std	Y+20, r25	; 0x14
    24e4:	8b 8b       	std	Y+19, r24	; 0x13
    24e6:	8b 89       	ldd	r24, Y+19	; 0x13
    24e8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ea:	98 8b       	std	Y+16, r25	; 0x10
    24ec:	8f 87       	std	Y+15, r24	; 0x0f
    24ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f0:	98 89       	ldd	r25, Y+16	; 0x10
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_VoidLatch+0x1b2>
    24f6:	98 8b       	std	Y+16, r25	; 0x10
    24f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    24fa:	83 e0       	ldi	r24, 0x03	; 3
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b1 e4       	ldi	r27, 0x41	; 65
    250c:	8b 87       	std	Y+11, r24	; 0x0b
    250e:	9c 87       	std	Y+12, r25	; 0x0c
    2510:	ad 87       	std	Y+13, r26	; 0x0d
    2512:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	53 e4       	ldi	r21, 0x43	; 67
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8f 83       	std	Y+7, r24	; 0x07
    252e:	98 87       	std	Y+8, r25	; 0x08
    2530:	a9 87       	std	Y+9, r26	; 0x09
    2532:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2548:	88 23       	and	r24, r24
    254a:	2c f4       	brge	.+10     	; 0x2556 <LCD_VoidLatch+0x216>
		__ticks = 1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <LCD_VoidLatch+0x294>
	else if (__tmp > 65535)
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	4c f5       	brge	.+82     	; 0x25c0 <LCD_VoidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <LCD_VoidLatch+0x276>
    2598:	89 e1       	ldi	r24, 0x19	; 25
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_VoidLatch+0x264>
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	69 f7       	brne	.-38     	; 0x2598 <LCD_VoidLatch+0x258>
    25be:	14 c0       	rjmp	.+40     	; 0x25e8 <LCD_VoidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_VoidLatch+0x2a0>
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    25e8:	6d 96       	adiw	r28, 0x1d	; 29
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <LCD_inVoidSendCommand>:


static inline void LCD_inVoidSendCommand(u8 Copy_u8Command){
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	2f 97       	sbiw	r28, 0x0f	; 15
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	62 e0       	ldi	r22, 0x02	; 2
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Command >> 7)&1);
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	98 2f       	mov	r25, r24
    2632:	99 1f       	adc	r25, r25
    2634:	99 27       	eor	r25, r25
    2636:	99 1f       	adc	r25, r25
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	67 e0       	ldi	r22, 0x07	; 7
    263c:	49 2f       	mov	r20, r25
    263e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Command >> 6)&1);
    2642:	8f 85       	ldd	r24, Y+15	; 0x0f
    2644:	82 95       	swap	r24
    2646:	86 95       	lsr	r24
    2648:	86 95       	lsr	r24
    264a:	83 70       	andi	r24, 0x03	; 3
    264c:	98 2f       	mov	r25, r24
    264e:	91 70       	andi	r25, 0x01	; 1
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	66 e0       	ldi	r22, 0x06	; 6
    2654:	49 2f       	mov	r20, r25
    2656:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Command >> 5)&1);
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	82 95       	swap	r24
    265e:	86 95       	lsr	r24
    2660:	87 70       	andi	r24, 0x07	; 7
    2662:	98 2f       	mov	r25, r24
    2664:	91 70       	andi	r25, 0x01	; 1
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	65 e0       	ldi	r22, 0x05	; 5
    266a:	49 2f       	mov	r20, r25
    266c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Command >> 4)&1);
    2670:	8f 85       	ldd	r24, Y+15	; 0x0f
    2672:	82 95       	swap	r24
    2674:	8f 70       	andi	r24, 0x0F	; 15
    2676:	98 2f       	mov	r25, r24
    2678:	91 70       	andi	r25, 0x01	; 1
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	64 e0       	ldi	r22, 0x04	; 4
    267e:	49 2f       	mov	r20, r25
    2680:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT, D3_PIN, (Copy_u8Command >> 3)&1);
    2684:	8f 85       	ldd	r24, Y+15	; 0x0f
    2686:	86 95       	lsr	r24
    2688:	86 95       	lsr	r24
    268a:	86 95       	lsr	r24
    268c:	98 2f       	mov	r25, r24
    268e:	91 70       	andi	r25, 0x01	; 1
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	63 e0       	ldi	r22, 0x03	; 3
    2694:	49 2f       	mov	r20, r25
    2696:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT, D2_PIN, (Copy_u8Command >> 2)&1);
    269a:	8f 85       	ldd	r24, Y+15	; 0x0f
    269c:	86 95       	lsr	r24
    269e:	86 95       	lsr	r24
    26a0:	98 2f       	mov	r25, r24
    26a2:	91 70       	andi	r25, 0x01	; 1
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	62 e0       	ldi	r22, 0x02	; 2
    26a8:	49 2f       	mov	r20, r25
    26aa:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT, D1_PIN, (Copy_u8Command >> 1)&1);
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	86 95       	lsr	r24
    26b2:	98 2f       	mov	r25, r24
    26b4:	91 70       	andi	r25, 0x01	; 1
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	49 2f       	mov	r20, r25
    26bc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT, D0_PIN, (Copy_u8Command >> 0)&1);
    26c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c2:	98 2f       	mov	r25, r24
    26c4:	91 70       	andi	r25, 0x01	; 1
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	49 2f       	mov	r20, r25
    26cc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	62 e0       	ldi	r22, 0x02	; 2
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e2       	ldi	r26, 0x20	; 32
    26e0:	b1 e4       	ldi	r27, 0x41	; 65
    26e2:	8b 87       	std	Y+11, r24	; 0x0b
    26e4:	9c 87       	std	Y+12, r25	; 0x0c
    26e6:	ad 87       	std	Y+13, r26	; 0x0d
    26e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a e7       	ldi	r20, 0x7A	; 122
    26f8:	53 e4       	ldi	r21, 0x43	; 67
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8f 83       	std	Y+7, r24	; 0x07
    2704:	98 87       	std	Y+8, r25	; 0x08
    2706:	a9 87       	std	Y+9, r26	; 0x09
    2708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <LCD_inVoidSendCommand+0x132>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <LCD_inVoidSendCommand+0x1b0>
	else if (__tmp > 65535)
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <LCD_inVoidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	0f c0       	rjmp	.+30     	; 0x278c <LCD_inVoidSendCommand+0x192>
    276e:	89 e1       	ldi	r24, 0x19	; 25
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_inVoidSendCommand+0x180>
    277e:	9c 83       	std	Y+4, r25	; 0x04
    2780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <LCD_inVoidSendCommand+0x174>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <LCD_inVoidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_inVoidSendCommand+0x1bc>
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	62 e0       	ldi	r22, 0x02	; 2
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>


}
    27c8:	2f 96       	adiw	r28, 0x0f	; 15
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <LCD_enuGoto>:



ES LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <LCD_enuGoto+0x6>
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <LCD_enuGoto+0x8>
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	8a 83       	std	Y+2, r24	; 0x02
    27e8:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_ErrorState = ES_NOK;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Line == 1)
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	31 f4       	brne	.+12     	; 0x2800 <LCD_enuGoto+0x26>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80 + Copy_u8Block);
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	80 58       	subi	r24, 0x80	; 128
    27f8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_enuSendCommand>
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	0c c0       	rjmp	.+24     	; 0x2818 <LCD_enuGoto+0x3e>
	}
	else if(Copy_u8Line == 2)
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	82 30       	cpi	r24, 0x02	; 2
    2804:	31 f4       	brne	.+12     	; 0x2812 <LCD_enuGoto+0x38>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80+0x40+Copy_u8Block);
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	80 54       	subi	r24, 0x40	; 64
    280a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_enuSendCommand>
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <LCD_enuGoto+0x3e>
	}
	else
	{
		return ES_OUT_OF_RANGE;
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	8c 83       	std	Y+4, r24	; 0x04
    2816:	02 c0       	rjmp	.+4      	; 0x281c <LCD_enuGoto+0x42>
	}
	return Local_ErrorState;
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	8c 83       	std	Y+4, r24	; 0x04
    281c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <Keypad_enuInit>:

extern Line Keypad_AstrRows[ROWS_NUM];
extern Line Keypad_AstrCols[COLS_NUM];
extern u8 Keypad_Au8Chars[];

ES Keypad_enuInit(void){
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	00 d0       	rcall	.+0      	; 0x2832 <Keypad_enuInit+0x6>
    2832:	0f 92       	push	r0
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
	ES Local_u8ErrorState = ES_NOK;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	8b 83       	std	Y+3, r24	; 0x03

	//Set Rows As Input Pulled Up
	for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    283c:	1a 82       	std	Y+2, r1	; 0x02
    283e:	31 c0       	rjmp	.+98     	; 0x28a2 <Keypad_enuInit+0x76>
		DIO_enuSetPinDirection(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8INPUT);
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	fc 01       	movw	r30, r24
    284c:	ea 57       	subi	r30, 0x7A	; 122
    284e:	fe 4f       	sbci	r31, 0xFE	; 254
    2850:	20 81       	ld	r18, Z
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	88 2f       	mov	r24, r24
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	fc 01       	movw	r30, r24
    285e:	e9 57       	subi	r30, 0x79	; 121
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	90 81       	ld	r25, Z
    2864:	82 2f       	mov	r24, r18
    2866:	69 2f       	mov	r22, r25
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8HIGH);
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	fc 01       	movw	r30, r24
    287a:	ea 57       	subi	r30, 0x7A	; 122
    287c:	fe 4f       	sbci	r31, 0xFE	; 254
    287e:	20 81       	ld	r18, Z
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	fc 01       	movw	r30, r24
    288c:	e9 57       	subi	r30, 0x79	; 121
    288e:	fe 4f       	sbci	r31, 0xFE	; 254
    2890:	90 81       	ld	r25, Z
    2892:	82 2f       	mov	r24, r18
    2894:	69 2f       	mov	r22, r25
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

ES Keypad_enuInit(void){
	ES Local_u8ErrorState = ES_NOK;

	//Set Rows As Input Pulled Up
	for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	8f 5f       	subi	r24, 0xFF	; 255
    28a0:	8a 83       	std	Y+2, r24	; 0x02
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	84 30       	cpi	r24, 0x04	; 4
    28a6:	60 f2       	brcs	.-104    	; 0x2840 <Keypad_enuInit+0x14>
		DIO_enuSetPinDirection(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8INPUT);
		DIO_enuSetPinValue(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8HIGH);
	}

	//Set Cols As Output and High
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    28a8:	19 82       	std	Y+1, r1	; 0x01
    28aa:	31 c0       	rjmp	.+98     	; 0x290e <Keypad_enuInit+0xe2>
		DIO_enuSetPinDirection(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8OUTPUT);
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	88 2f       	mov	r24, r24
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	fc 01       	movw	r30, r24
    28b8:	e2 57       	subi	r30, 0x72	; 114
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	20 81       	ld	r18, Z
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	fc 01       	movw	r30, r24
    28ca:	e1 57       	subi	r30, 0x71	; 113
    28cc:	fe 4f       	sbci	r31, 0xFE	; 254
    28ce:	90 81       	ld	r25, Z
    28d0:	82 2f       	mov	r24, r18
    28d2:	69 2f       	mov	r22, r25
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	88 0f       	add	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 57       	subi	r30, 0x72	; 114
    28e8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ea:	20 81       	ld	r18, Z
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	fc 01       	movw	r30, r24
    28f8:	e1 57       	subi	r30, 0x71	; 113
    28fa:	fe 4f       	sbci	r31, 0xFE	; 254
    28fc:	90 81       	ld	r25, Z
    28fe:	82 2f       	mov	r24, r18
    2900:	69 2f       	mov	r22, r25
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>
		DIO_enuSetPinDirection(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8INPUT);
		DIO_enuSetPinValue(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8HIGH);
	}

	//Set Cols As Output and High
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	86 30       	cpi	r24, 0x06	; 6
    2912:	60 f2       	brcs	.-104    	; 0x28ac <Keypad_enuInit+0x80>
		DIO_enuSetPinDirection(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8OUTPUT);
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
	}

	Local_u8ErrorState = ES_OK;
    2914:	1b 82       	std	Y+3, r1	; 0x03
	return Local_u8ErrorState;
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <Keypad_enuGetPressedButton>:

ES Keypad_enuGetPressedButton(u8* copy_pu8KeypadState){
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	27 97       	sbiw	r28, 0x07	; 7
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
	ES Local_u8ErrorState = ES_NOK;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	8b 83       	std	Y+3, r24	; 0x03

	//Loop Over all cols
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    2940:	1a 82       	std	Y+2, r1	; 0x02
    2942:	90 c0       	rjmp	.+288    	; 0x2a64 <Keypad_enuGetPressedButton+0x140>
		//Set Col Low
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8LOW);
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	fc 01       	movw	r30, r24
    2950:	e2 57       	subi	r30, 0x72	; 114
    2952:	fe 4f       	sbci	r31, 0xFE	; 254
    2954:	20 81       	ld	r18, Z
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	fc 01       	movw	r30, r24
    2962:	e1 57       	subi	r30, 0x71	; 113
    2964:	fe 4f       	sbci	r31, 0xFE	; 254
    2966:	90 81       	ld	r25, Z
    2968:	82 2f       	mov	r24, r18
    296a:	69 2f       	mov	r22, r25
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

		//Loop Over all Rows
		for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    2972:	19 82       	std	Y+1, r1	; 0x01
    2974:	59 c0       	rjmp	.+178    	; 0x2a28 <Keypad_enuGetPressedButton+0x104>

			//Check for low Row
			u8 Local_u8RowState;
			DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	fc 01       	movw	r30, r24
    2982:	ea 57       	subi	r30, 0x7A	; 122
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	40 81       	ld	r20, Z
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	fc 01       	movw	r30, r24
    2994:	e9 57       	subi	r30, 0x79	; 121
    2996:	fe 4f       	sbci	r31, 0xFE	; 254
    2998:	90 81       	ld	r25, Z
    299a:	9e 01       	movw	r18, r28
    299c:	2c 5f       	subi	r18, 0xFC	; 252
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	84 2f       	mov	r24, r20
    29a2:	69 2f       	mov	r22, r25
    29a4:	a9 01       	movw	r20, r18
    29a6:	0e 94 4f 0a 	call	0x149e	; 0x149e <DIO_enuGetpin>
			if(!Local_u8RowState){
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	88 23       	and	r24, r24
    29ae:	c9 f5       	brne	.+114    	; 0x2a22 <Keypad_enuGetPressedButton+0xfe>
    29b0:	1a c0       	rjmp	.+52     	; 0x29e6 <Keypad_enuGetPressedButton+0xc2>

				//prevent bouncing
				while(!Local_u8RowState)
					DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	88 2f       	mov	r24, r24
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	fc 01       	movw	r30, r24
    29be:	ea 57       	subi	r30, 0x7A	; 122
    29c0:	fe 4f       	sbci	r31, 0xFE	; 254
    29c2:	40 81       	ld	r20, Z
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	fc 01       	movw	r30, r24
    29d0:	e9 57       	subi	r30, 0x79	; 121
    29d2:	fe 4f       	sbci	r31, 0xFE	; 254
    29d4:	90 81       	ld	r25, Z
    29d6:	9e 01       	movw	r18, r28
    29d8:	2c 5f       	subi	r18, 0xFC	; 252
    29da:	3f 4f       	sbci	r19, 0xFF	; 255
    29dc:	84 2f       	mov	r24, r20
    29de:	69 2f       	mov	r22, r25
    29e0:	a9 01       	movw	r20, r18
    29e2:	0e 94 4f 0a 	call	0x149e	; 0x149e <DIO_enuGetpin>
			u8 Local_u8RowState;
			DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);
			if(!Local_u8RowState){

				//prevent bouncing
				while(!Local_u8RowState)
    29e6:	8c 81       	ldd	r24, Y+4	; 0x04
    29e8:	88 23       	and	r24, r24
    29ea:	19 f3       	breq	.-58     	; 0x29b2 <Keypad_enuGetPressedButton+0x8e>
					DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);

				//assign value
				*copy_pu8KeypadState = Keypad_Au8Chars[Local_u8RowsIt * COLS_NUM + Local_u8ColsIt];
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	c9 01       	movw	r24, r18
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	82 0f       	add	r24, r18
    29fa:	93 1f       	adc	r25, r19
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	9c 01       	movw	r18, r24
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	88 2f       	mov	r24, r24
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	82 0f       	add	r24, r18
    2a0a:	93 1f       	adc	r25, r19
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	e2 59       	subi	r30, 0x92	; 146
    2a10:	fe 4f       	sbci	r31, 0xFE	; 254
    2a12:	80 81       	ld	r24, Z
    2a14:	ed 81       	ldd	r30, Y+5	; 0x05
    2a16:	fe 81       	ldd	r31, Y+6	; 0x06
    2a18:	80 83       	st	Z, r24

				Local_u8ErrorState = ES_OK;
    2a1a:	1b 82       	std	Y+3, r1	; 0x03
				return Local_u8ErrorState;
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	8f 83       	std	Y+7, r24	; 0x07
    2a20:	2c c0       	rjmp	.+88     	; 0x2a7a <Keypad_enuGetPressedButton+0x156>
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
		//Set Col Low
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8LOW);

		//Loop Over all Rows
		for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	8f 5f       	subi	r24, 0xFF	; 255
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	08 f4       	brcc	.+2      	; 0x2a30 <Keypad_enuGetPressedButton+0x10c>
    2a2e:	a3 cf       	rjmp	.-186    	; 0x2976 <Keypad_enuGetPressedButton+0x52>
				Local_u8ErrorState = ES_OK;
				return Local_u8ErrorState;
			}

		}
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	e2 57       	subi	r30, 0x72	; 114
    2a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a40:	20 81       	ld	r18, Z
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	e1 57       	subi	r30, 0x71	; 113
    2a50:	fe 4f       	sbci	r31, 0xFE	; 254
    2a52:	90 81       	ld	r25, Z
    2a54:	82 2f       	mov	r24, r18
    2a56:	69 2f       	mov	r22, r25
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <DIO_enuSetPinValue>

ES Keypad_enuGetPressedButton(u8* copy_pu8KeypadState){
	ES Local_u8ErrorState = ES_NOK;

	//Loop Over all cols
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	8f 5f       	subi	r24, 0xFF	; 255
    2a62:	8a 83       	std	Y+2, r24	; 0x02
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	86 30       	cpi	r24, 0x06	; 6
    2a68:	08 f4       	brcc	.+2      	; 0x2a6c <Keypad_enuGetPressedButton+0x148>
    2a6a:	6c cf       	rjmp	.-296    	; 0x2944 <Keypad_enuGetPressedButton+0x20>
			}

		}
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
	}
	*copy_pu8KeypadState = KEYPAD_NO_PRESSED;
    2a6c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a6e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a70:	8f ef       	ldi	r24, 0xFF	; 255
    2a72:	80 83       	st	Z, r24
	Local_u8ErrorState = ES_OK;
    2a74:	1b 82       	std	Y+3, r1	; 0x03
	return Local_u8ErrorState;
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	8f 83       	std	Y+7, r24	; 0x07
    2a7a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a7c:	27 96       	adiw	r28, 0x07	; 7
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <Clear_Arrays>:
char GlobalInputExpression[MAX_SIZE];
char GlobalPostfixExpression[MAX_SIZE];
char GlobalResultExpression[MAX_SIZE];


void Clear_Arrays(){
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <Clear_Arrays+0x6>
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < MAX_SIZE; i++){
    2a98:	1a 82       	std	Y+2, r1	; 0x02
    2a9a:	19 82       	std	Y+1, r1	; 0x01
    2a9c:	1d c0       	rjmp	.+58     	; 0x2ad8 <Clear_Arrays+0x4a>
		GlobalShaddedExpression[i] = 0;
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	ee 55       	subi	r30, 0x5E	; 94
    2aa6:	fc 4f       	sbci	r31, 0xFC	; 252
    2aa8:	10 82       	st	Z, r1
		GlobalInputExpression[i] = 0;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	fc 01       	movw	r30, r24
    2ab0:	ea 54       	subi	r30, 0x4A	; 74
    2ab2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ab4:	10 82       	st	Z, r1
		GlobalPostfixExpression[i] = 0;
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aba:	fc 01       	movw	r30, r24
    2abc:	e6 5d       	subi	r30, 0xD6	; 214
    2abe:	fc 4f       	sbci	r31, 0xFC	; 252
    2ac0:	10 82       	st	Z, r1
		GlobalResultExpression[i] = 0;
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e2 5c       	subi	r30, 0xC2	; 194
    2aca:	fc 4f       	sbci	r31, 0xFC	; 252
    2acc:	10 82       	st	Z, r1
char GlobalPostfixExpression[MAX_SIZE];
char GlobalResultExpression[MAX_SIZE];


void Clear_Arrays(){
	for(int i = 0; i < MAX_SIZE; i++){
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	84 31       	cpi	r24, 0x14	; 20
    2ade:	91 05       	cpc	r25, r1
    2ae0:	f4 f2       	brlt	.-68     	; 0x2a9e <Clear_Arrays+0x10>
		GlobalShaddedExpression[i] = 0;
		GlobalInputExpression[i] = 0;
		GlobalPostfixExpression[i] = 0;
		GlobalResultExpression[i] = 0;
	}
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <Run_Calculator>:



void Run_Calculator(){
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	29 97       	sbiw	r28, 0x09	; 9
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8CursorIdx = 0;
    2b00:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8ExpressionSize = 0;
    2b02:	1f 82       	std	Y+7, r1	; 0x07
	u8 LCD_DoneCalculating = 0;
    2b04:	1e 82       	std	Y+6, r1	; 0x06
	while(1){
		u8 Local_u8ButtonIsPressed;
		Keypad_enuGetPressedButton(&Local_u8ButtonIsPressed);
    2b06:	ce 01       	movw	r24, r28
    2b08:	09 96       	adiw	r24, 0x09	; 9
    2b0a:	0e 94 92 14 	call	0x2924	; 0x2924 <Keypad_enuGetPressedButton>
		if(Local_u8ButtonIsPressed == KEYPAD_STATE_NO_PRESSED) continue;
    2b0e:	89 85       	ldd	r24, Y+9	; 0x09
    2b10:	8f 3f       	cpi	r24, 0xFF	; 255
    2b12:	c9 f3       	breq	.-14     	; 0x2b06 <Run_Calculator+0x1a>

		if(LCD_DoneCalculating){
    2b14:	8e 81       	ldd	r24, Y+6	; 0x06
    2b16:	88 23       	and	r24, r24
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <Run_Calculator+0x30>
    2b1a:	8b c0       	rjmp	.+278    	; 0x2c32 <Run_Calculator+0x146>
			if(Local_u8ButtonIsPressed == '=') continue;
    2b1c:	89 85       	ldd	r24, Y+9	; 0x09
    2b1e:	8d 33       	cpi	r24, 0x3D	; 61
    2b20:	91 f3       	breq	.-28     	; 0x2b06 <Run_Calculator+0x1a>
			else if(Local_u8ButtonIsPressed == 'A' || Local_u8ButtonIsPressed == 'C'){
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	81 34       	cpi	r24, 0x41	; 65
    2b26:	19 f0       	breq	.+6      	; 0x2b2e <Run_Calculator+0x42>
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	83 34       	cpi	r24, 0x43	; 67
    2b2c:	31 f4       	brne	.+12     	; 0x2b3a <Run_Calculator+0x4e>
				Clear_Arrays();
    2b2e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <Clear_Arrays>
				Local_u8CursorIdx = 0;
    2b32:	18 86       	std	Y+8, r1	; 0x08
				LCD_enuClearDisplay();
    2b34:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
    2b38:	7a c0       	rjmp	.+244    	; 0x2c2e <Run_Calculator+0x142>
			}
			else if(Is_Operator(Local_u8ButtonIsPressed)){
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    2b40:	88 23       	and	r24, r24
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <Run_Calculator+0x5a>
    2b44:	5b c0       	rjmp	.+182    	; 0x2bfc <Run_Calculator+0x110>
				LCD_enuClearDisplay();
    2b46:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
				for(int i = 0; i < MAX_SIZE; i++){
    2b4a:	1d 82       	std	Y+5, r1	; 0x05
    2b4c:	1c 82       	std	Y+4, r1	; 0x04
    2b4e:	17 c0       	rjmp	.+46     	; 0x2b7e <Run_Calculator+0x92>
					GlobalShaddedExpression[i] = 0;
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	9d 81       	ldd	r25, Y+5	; 0x05
    2b54:	fc 01       	movw	r30, r24
    2b56:	ee 55       	subi	r30, 0x5E	; 94
    2b58:	fc 4f       	sbci	r31, 0xFC	; 252
    2b5a:	10 82       	st	Z, r1
					GlobalInputExpression[i] = 0;
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b60:	fc 01       	movw	r30, r24
    2b62:	ea 54       	subi	r30, 0x4A	; 74
    2b64:	fc 4f       	sbci	r31, 0xFC	; 252
    2b66:	10 82       	st	Z, r1
					GlobalPostfixExpression[i] = 0;
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	e6 5d       	subi	r30, 0xD6	; 214
    2b70:	fc 4f       	sbci	r31, 0xFC	; 252
    2b72:	10 82       	st	Z, r1
				Local_u8CursorIdx = 0;
				LCD_enuClearDisplay();
			}
			else if(Is_Operator(Local_u8ButtonIsPressed)){
				LCD_enuClearDisplay();
				for(int i = 0; i < MAX_SIZE; i++){
    2b74:	8c 81       	ldd	r24, Y+4	; 0x04
    2b76:	9d 81       	ldd	r25, Y+5	; 0x05
    2b78:	01 96       	adiw	r24, 0x01	; 1
    2b7a:	9d 83       	std	Y+5, r25	; 0x05
    2b7c:	8c 83       	std	Y+4, r24	; 0x04
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	84 31       	cpi	r24, 0x14	; 20
    2b84:	91 05       	cpc	r25, r1
    2b86:	24 f3       	brlt	.-56     	; 0x2b50 <Run_Calculator+0x64>
					GlobalShaddedExpression[i] = 0;
					GlobalInputExpression[i] = 0;
					GlobalPostfixExpression[i] = 0;
				}
				for(Local_u8CursorIdx = 0; GlobalResultExpression[Local_u8CursorIdx]; Local_u8CursorIdx++){
    2b88:	18 86       	std	Y+8, r1	; 0x08
    2b8a:	1d c0       	rjmp	.+58     	; 0x2bc6 <Run_Calculator+0xda>
					GlobalInputExpression[Local_u8CursorIdx] = GlobalResultExpression[Local_u8CursorIdx];
    2b8c:	88 85       	ldd	r24, Y+8	; 0x08
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	88 85       	ldd	r24, Y+8	; 0x08
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e2 5c       	subi	r30, 0xC2	; 194
    2b9c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b9e:	80 81       	ld	r24, Z
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	ea 54       	subi	r30, 0x4A	; 74
    2ba4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba6:	80 83       	st	Z, r24
					LCD_enuDisplayChar(GlobalInputExpression[Local_u8CursorIdx]);
    2ba8:	88 85       	ldd	r24, Y+8	; 0x08
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	fc 01       	movw	r30, r24
    2bb0:	ea 54       	subi	r30, 0x4A	; 74
    2bb2:	fc 4f       	sbci	r31, 0xFC	; 252
    2bb4:	80 81       	ld	r24, Z
    2bb6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					Local_u8ExpressionSize++;
    2bba:	8f 81       	ldd	r24, Y+7	; 0x07
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	8f 83       	std	Y+7, r24	; 0x07
				for(int i = 0; i < MAX_SIZE; i++){
					GlobalShaddedExpression[i] = 0;
					GlobalInputExpression[i] = 0;
					GlobalPostfixExpression[i] = 0;
				}
				for(Local_u8CursorIdx = 0; GlobalResultExpression[Local_u8CursorIdx]; Local_u8CursorIdx++){
    2bc0:	88 85       	ldd	r24, Y+8	; 0x08
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	88 87       	std	Y+8, r24	; 0x08
    2bc6:	88 85       	ldd	r24, Y+8	; 0x08
    2bc8:	88 2f       	mov	r24, r24
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	fc 01       	movw	r30, r24
    2bce:	e2 5c       	subi	r30, 0xC2	; 194
    2bd0:	fc 4f       	sbci	r31, 0xFC	; 252
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 23       	and	r24, r24
    2bd6:	d1 f6       	brne	.-76     	; 0x2b8c <Run_Calculator+0xa0>
					GlobalInputExpression[Local_u8CursorIdx] = GlobalResultExpression[Local_u8CursorIdx];
					LCD_enuDisplayChar(GlobalInputExpression[Local_u8CursorIdx]);
					Local_u8ExpressionSize++;
				}
				GlobalInputExpression[Local_u8CursorIdx++] = Local_u8ButtonIsPressed;
    2bd8:	88 85       	ldd	r24, Y+8	; 0x08
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	29 85       	ldd	r18, Y+9	; 0x09
    2be0:	fc 01       	movw	r30, r24
    2be2:	ea 54       	subi	r30, 0x4A	; 74
    2be4:	fc 4f       	sbci	r31, 0xFC	; 252
    2be6:	20 83       	st	Z, r18
    2be8:	88 85       	ldd	r24, Y+8	; 0x08
    2bea:	8f 5f       	subi	r24, 0xFF	; 255
    2bec:	88 87       	std	Y+8, r24	; 0x08
				LCD_enuDisplayChar(Local_u8ButtonIsPressed);
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
				Local_u8ExpressionSize++;
    2bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf6:	8f 5f       	subi	r24, 0xFF	; 255
    2bf8:	8f 83       	std	Y+7, r24	; 0x07
    2bfa:	19 c0       	rjmp	.+50     	; 0x2c2e <Run_Calculator+0x142>
			}
			else if(Local_u8ButtonIsPressed != '<' && Local_u8ButtonIsPressed != '>'){
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	8c 33       	cpi	r24, 0x3C	; 60
    2c00:	b1 f0       	breq	.+44     	; 0x2c2e <Run_Calculator+0x142>
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	8e 33       	cpi	r24, 0x3E	; 62
    2c06:	99 f0       	breq	.+38     	; 0x2c2e <Run_Calculator+0x142>
				Local_u8CursorIdx = 0;
    2c08:	18 86       	std	Y+8, r1	; 0x08
				LCD_enuClearDisplay();
    2c0a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
				Clear_Arrays();
    2c0e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <Clear_Arrays>
				GlobalInputExpression[Local_u8CursorIdx++] = Local_u8ButtonIsPressed;
    2c12:	88 85       	ldd	r24, Y+8	; 0x08
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	29 85       	ldd	r18, Y+9	; 0x09
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	ea 54       	subi	r30, 0x4A	; 74
    2c1e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c20:	20 83       	st	Z, r18
    2c22:	88 85       	ldd	r24, Y+8	; 0x08
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	88 87       	std	Y+8, r24	; 0x08
				LCD_enuDisplayChar(Local_u8ButtonIsPressed);
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
			}
			LCD_DoneCalculating = 0;
    2c2e:	1e 82       	std	Y+6, r1	; 0x06
    2c30:	6a cf       	rjmp	.-300    	; 0x2b06 <Run_Calculator+0x1a>
		}
		else{
			if(Local_u8ButtonIsPressed == 'A'){
    2c32:	89 85       	ldd	r24, Y+9	; 0x09
    2c34:	81 34       	cpi	r24, 0x41	; 65
    2c36:	39 f4       	brne	.+14     	; 0x2c46 <Run_Calculator+0x15a>
				LCD_enuClearDisplay();
    2c38:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
				Clear_Arrays();
    2c3c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <Clear_Arrays>
				Local_u8CursorIdx = 0;
    2c40:	18 86       	std	Y+8, r1	; 0x08
				Local_u8ExpressionSize = 0;
    2c42:	1f 82       	std	Y+7, r1	; 0x07
    2c44:	60 cf       	rjmp	.-320    	; 0x2b06 <Run_Calculator+0x1a>
			}
			else if(Local_u8ButtonIsPressed == 'C'){
    2c46:	89 85       	ldd	r24, Y+9	; 0x09
    2c48:	83 34       	cpi	r24, 0x43	; 67
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <Run_Calculator+0x162>
    2c4c:	59 c0       	rjmp	.+178    	; 0x2d00 <Run_Calculator+0x214>
				if(Local_u8CursorIdx){
    2c4e:	88 85       	ldd	r24, Y+8	; 0x08
    2c50:	88 23       	and	r24, r24
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <Run_Calculator+0x16a>
    2c54:	58 cf       	rjmp	.-336    	; 0x2b06 <Run_Calculator+0x1a>
					GlobalInputExpression[--Local_u8CursorIdx] = '\0';
    2c56:	88 85       	ldd	r24, Y+8	; 0x08
    2c58:	81 50       	subi	r24, 0x01	; 1
    2c5a:	88 87       	std	Y+8, r24	; 0x08
    2c5c:	88 85       	ldd	r24, Y+8	; 0x08
    2c5e:	88 2f       	mov	r24, r24
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	fc 01       	movw	r30, r24
    2c64:	ea 54       	subi	r30, 0x4A	; 74
    2c66:	fc 4f       	sbci	r31, 0xFC	; 252
    2c68:	10 82       	st	Z, r1
					LCD_enuClearDisplay();
    2c6a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
					for(u8 i = 0; i < Local_u8ExpressionSize - 1; i++){
    2c6e:	1b 82       	std	Y+3, r1	; 0x03
    2c70:	2c c0       	rjmp	.+88     	; 0x2cca <Run_Calculator+0x1de>
						if(!GlobalInputExpression[i]) {
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	fc 01       	movw	r30, r24
    2c7a:	ea 54       	subi	r30, 0x4A	; 74
    2c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7e:	80 81       	ld	r24, Z
    2c80:	88 23       	and	r24, r24
    2c82:	b9 f4       	brne	.+46     	; 0x2cb2 <Run_Calculator+0x1c6>
							GlobalInputExpression[i] = GlobalInputExpression[i + 1];
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	88 2f       	mov	r24, r24
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	fc 01       	movw	r30, r24
    2c94:	ea 54       	subi	r30, 0x4A	; 74
    2c96:	fc 4f       	sbci	r31, 0xFC	; 252
    2c98:	80 81       	ld	r24, Z
    2c9a:	f9 01       	movw	r30, r18
    2c9c:	ea 54       	subi	r30, 0x4A	; 74
    2c9e:	fc 4f       	sbci	r31, 0xFC	; 252
    2ca0:	80 83       	st	Z, r24
							GlobalInputExpression[i + 1] = 0;
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	01 96       	adiw	r24, 0x01	; 1
    2caa:	fc 01       	movw	r30, r24
    2cac:	ea 54       	subi	r30, 0x4A	; 74
    2cae:	fc 4f       	sbci	r31, 0xFC	; 252
    2cb0:	10 82       	st	Z, r1
						}
						LCD_enuDisplayChar(GlobalInputExpression[i]);
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	fc 01       	movw	r30, r24
    2cba:	ea 54       	subi	r30, 0x4A	; 74
    2cbc:	fc 4f       	sbci	r31, 0xFC	; 252
    2cbe:	80 81       	ld	r24, Z
    2cc0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
			}
			else if(Local_u8ButtonIsPressed == 'C'){
				if(Local_u8CursorIdx){
					GlobalInputExpression[--Local_u8CursorIdx] = '\0';
					LCD_enuClearDisplay();
					for(u8 i = 0; i < Local_u8ExpressionSize - 1; i++){
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	28 17       	cp	r18, r24
    2cda:	39 07       	cpc	r19, r25
    2cdc:	54 f2       	brlt	.-108    	; 0x2c72 <Run_Calculator+0x186>
							GlobalInputExpression[i] = GlobalInputExpression[i + 1];
							GlobalInputExpression[i + 1] = 0;
						}
						LCD_enuDisplayChar(GlobalInputExpression[i]);
					}
					Local_u8CursorIdx = max(0,Local_u8CursorIdx);
    2cde:	88 85       	ldd	r24, Y+8	; 0x08
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	b9 01       	movw	r22, r18
    2cea:	0e 94 6d 0c 	call	0x18da	; 0x18da <max>
    2cee:	88 87       	std	Y+8, r24	; 0x08
					LCD_enuGoto(1,Local_u8CursorIdx);
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	68 85       	ldd	r22, Y+8	; 0x08
    2cf4:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
					Local_u8ExpressionSize--;
    2cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfa:	81 50       	subi	r24, 0x01	; 1
    2cfc:	8f 83       	std	Y+7, r24	; 0x07
    2cfe:	03 cf       	rjmp	.-506    	; 0x2b06 <Run_Calculator+0x1a>
				}
			}
			else if(Local_u8ButtonIsPressed == '='){
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	8d 33       	cpi	r24, 0x3D	; 61
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <Run_Calculator+0x21c>
    2d06:	9b c0       	rjmp	.+310    	; 0x2e3e <Run_Calculator+0x352>
				LCD_DoneCalculating = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	8e 83       	std	Y+6, r24	; 0x06
				Local_u8ExpressionSize = 0;
    2d0c:	1f 82       	std	Y+7, r1	; 0x07
				ES Local_enuErrorState = Validate_Expression();
    2d0e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <Validate_Expression>
    2d12:	8a 83       	std	Y+2, r24	; 0x02
				if(Local_enuErrorState == ES_SYNTAX_ERROR){
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	84 30       	cpi	r24, 0x04	; 4
    2d18:	59 f5       	brne	.+86     	; 0x2d70 <Run_Calculator+0x284>
					LCD_enuClearDisplay();
    2d1a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
					LCD_enuGoto(1,2);
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	62 e0       	ldi	r22, 0x02	; 2
    2d22:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
					LCD_enuDisplayChar('S');
    2d26:	83 e5       	ldi	r24, 0x53	; 83
    2d28:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('Y');
    2d2c:	89 e5       	ldi	r24, 0x59	; 89
    2d2e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('N');
    2d32:	8e e4       	ldi	r24, 0x4E	; 78
    2d34:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('T');
    2d38:	84 e5       	ldi	r24, 0x54	; 84
    2d3a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('A');
    2d3e:	81 e4       	ldi	r24, 0x41	; 65
    2d40:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('X');
    2d44:	88 e5       	ldi	r24, 0x58	; 88
    2d46:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar(' ');
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('E');
    2d50:	85 e4       	ldi	r24, 0x45	; 69
    2d52:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2d56:	82 e5       	ldi	r24, 0x52	; 82
    2d58:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2d5c:	82 e5       	ldi	r24, 0x52	; 82
    2d5e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('O');
    2d62:	8f e4       	ldi	r24, 0x4F	; 79
    2d64:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2d68:	82 e5       	ldi	r24, 0x52	; 82
    2d6a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
    2d6e:	cb ce       	rjmp	.-618    	; 0x2b06 <Run_Calculator+0x1a>
				}
				else if(Local_enuErrorState == ES_OK){
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	88 23       	and	r24, r24
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <Run_Calculator+0x28c>
    2d76:	c7 ce       	rjmp	.-626    	; 0x2b06 <Run_Calculator+0x1a>
					LCD_enuGoto(2,0);
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
					Local_enuErrorState = Calc_Expression();
    2d80:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <Calc_Expression>
    2d84:	8a 83       	std	Y+2, r24	; 0x02
					if(Local_enuErrorState == ES_MATH_ERROR){
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	85 30       	cpi	r24, 0x05	; 5
    2d8a:	29 f5       	brne	.+74     	; 0x2dd6 <Run_Calculator+0x2ea>
						LCD_enuClearDisplay();
    2d8c:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
						LCD_enuGoto(1,3);
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	63 e0       	ldi	r22, 0x03	; 3
    2d94:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
						LCD_enuDisplayChar('M');
    2d98:	8d e4       	ldi	r24, 0x4D	; 77
    2d9a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('A');
    2d9e:	81 e4       	ldi	r24, 0x41	; 65
    2da0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('T');
    2da4:	84 e5       	ldi	r24, 0x54	; 84
    2da6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('H');
    2daa:	88 e4       	ldi	r24, 0x48	; 72
    2dac:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar(' ');
    2db0:	80 e2       	ldi	r24, 0x20	; 32
    2db2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('E');
    2db6:	85 e4       	ldi	r24, 0x45	; 69
    2db8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('R');
    2dbc:	82 e5       	ldi	r24, 0x52	; 82
    2dbe:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('R');
    2dc2:	82 e5       	ldi	r24, 0x52	; 82
    2dc4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('O');
    2dc8:	8f e4       	ldi	r24, 0x4F	; 79
    2dca:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('R');
    2dce:	82 e5       	ldi	r24, 0x52	; 82
    2dd0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
    2dd4:	98 ce       	rjmp	.-720    	; 0x2b06 <Run_Calculator+0x1a>
					}
					else if(Local_enuErrorState == ES_OVERFLOW){
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	86 30       	cpi	r24, 0x06	; 6
    2dda:	f9 f4       	brne	.+62     	; 0x2e1a <Run_Calculator+0x32e>
						LCD_enuClearDisplay();
    2ddc:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_enuClearDisplay>
						LCD_enuGoto(1,4);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	64 e0       	ldi	r22, 0x04	; 4
    2de4:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
						LCD_enuDisplayChar('O');
    2de8:	8f e4       	ldi	r24, 0x4F	; 79
    2dea:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('V');
    2dee:	86 e5       	ldi	r24, 0x56	; 86
    2df0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('E');
    2df4:	85 e4       	ldi	r24, 0x45	; 69
    2df6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('R');
    2dfa:	82 e5       	ldi	r24, 0x52	; 82
    2dfc:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('F');
    2e00:	86 e4       	ldi	r24, 0x46	; 70
    2e02:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('L');
    2e06:	8c e4       	ldi	r24, 0x4C	; 76
    2e08:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('O');
    2e0c:	8f e4       	ldi	r24, 0x4F	; 79
    2e0e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('W');
    2e12:	87 e5       	ldi	r24, 0x57	; 87
    2e14:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
    2e18:	76 ce       	rjmp	.-788    	; 0x2b06 <Run_Calculator+0x1a>
					}
					else{
						for(u8 i = 0; i < MAX_SIZE; i++){
    2e1a:	19 82       	std	Y+1, r1	; 0x01
    2e1c:	0c c0       	rjmp	.+24     	; 0x2e36 <Run_Calculator+0x34a>
							LCD_enuDisplayChar(GlobalResultExpression[i]);
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	fc 01       	movw	r30, r24
    2e26:	e2 5c       	subi	r30, 0xC2	; 194
    2e28:	fc 4f       	sbci	r31, 0xFC	; 252
    2e2a:	80 81       	ld	r24, Z
    2e2c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
						LCD_enuDisplayChar('L');
						LCD_enuDisplayChar('O');
						LCD_enuDisplayChar('W');
					}
					else{
						for(u8 i = 0; i < MAX_SIZE; i++){
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	8f 5f       	subi	r24, 0xFF	; 255
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	84 31       	cpi	r24, 0x14	; 20
    2e3a:	88 f3       	brcs	.-30     	; 0x2e1e <Run_Calculator+0x332>
    2e3c:	64 ce       	rjmp	.-824    	; 0x2b06 <Run_Calculator+0x1a>
							LCD_enuDisplayChar(GlobalResultExpression[i]);
						}
					}
				}
			}
			else if(Local_u8ButtonIsPressed == '>') {
    2e3e:	89 85       	ldd	r24, Y+9	; 0x09
    2e40:	8e 33       	cpi	r24, 0x3E	; 62
    2e42:	c1 f4       	brne	.+48     	; 0x2e74 <Run_Calculator+0x388>
				if(Local_u8CursorIdx + 1 < MAX_SIZE && GlobalInputExpression[Local_u8CursorIdx])Local_u8CursorIdx++;
    2e44:	88 85       	ldd	r24, Y+8	; 0x08
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	84 31       	cpi	r24, 0x14	; 20
    2e4e:	91 05       	cpc	r25, r1
    2e50:	64 f4       	brge	.+24     	; 0x2e6a <Run_Calculator+0x37e>
    2e52:	88 85       	ldd	r24, Y+8	; 0x08
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	fc 01       	movw	r30, r24
    2e5a:	ea 54       	subi	r30, 0x4A	; 74
    2e5c:	fc 4f       	sbci	r31, 0xFC	; 252
    2e5e:	80 81       	ld	r24, Z
    2e60:	88 23       	and	r24, r24
    2e62:	19 f0       	breq	.+6      	; 0x2e6a <Run_Calculator+0x37e>
    2e64:	88 85       	ldd	r24, Y+8	; 0x08
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	88 87       	std	Y+8, r24	; 0x08
				LCD_enuGoto(1,Local_u8CursorIdx);
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	68 85       	ldd	r22, Y+8	; 0x08
    2e6e:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
    2e72:	49 ce       	rjmp	.-878    	; 0x2b06 <Run_Calculator+0x1a>
			}
			else if(Local_u8ButtonIsPressed == '<'){
    2e74:	89 85       	ldd	r24, Y+9	; 0x09
    2e76:	8c 33       	cpi	r24, 0x3C	; 60
    2e78:	89 f4       	brne	.+34     	; 0x2e9c <Run_Calculator+0x3b0>
				Local_u8CursorIdx--;
    2e7a:	88 85       	ldd	r24, Y+8	; 0x08
    2e7c:	81 50       	subi	r24, 0x01	; 1
    2e7e:	88 87       	std	Y+8, r24	; 0x08
				Local_u8CursorIdx = max(0,Local_u8CursorIdx);
    2e80:	88 85       	ldd	r24, Y+8	; 0x08
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	b9 01       	movw	r22, r18
    2e8c:	0e 94 6d 0c 	call	0x18da	; 0x18da <max>
    2e90:	88 87       	std	Y+8, r24	; 0x08
				LCD_enuGoto(1,Local_u8CursorIdx);
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	68 85       	ldd	r22, Y+8	; 0x08
    2e96:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_enuGoto>
    2e9a:	35 ce       	rjmp	.-918    	; 0x2b06 <Run_Calculator+0x1a>
			}
			else{
				Local_u8ExpressionSize++;
    2e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ea0:	8f 83       	std	Y+7, r24	; 0x07
				LCD_enuDisplayChar(Local_u8ButtonIsPressed);
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <LCD_enuDisplayChar>
				GlobalInputExpression[Local_u8CursorIdx++] = Local_u8ButtonIsPressed;
    2ea8:	88 85       	ldd	r24, Y+8	; 0x08
    2eaa:	88 2f       	mov	r24, r24
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	29 85       	ldd	r18, Y+9	; 0x09
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	ea 54       	subi	r30, 0x4A	; 74
    2eb4:	fc 4f       	sbci	r31, 0xFC	; 252
    2eb6:	20 83       	st	Z, r18
    2eb8:	88 85       	ldd	r24, Y+8	; 0x08
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	88 87       	std	Y+8, r24	; 0x08
    2ebe:	23 ce       	rjmp	.-954    	; 0x2b06 <Run_Calculator+0x1a>

00002ec0 <Calc_Expression>:
		}
	}
}


ES Calc_Expression(){
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	64 97       	sbiw	r28, 0x14	; 20
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    ES Local_enuErrorState;
    Infix_To_Postfix();
    2edc:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <Infix_To_Postfix>
    double Local_DoubleResult;
    Local_enuErrorState = Calc_Postfix(&Local_DoubleResult);
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	40 96       	adiw	r24, 0x10	; 16
    2ee4:	0e 94 1f 1a 	call	0x343e	; 0x343e <Calc_Postfix>
    2ee8:	8f 87       	std	Y+15, r24	; 0x0f

    if(Local_enuErrorState == ES_MATH_ERROR) return ES_MATH_ERROR;
    2eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eec:	85 30       	cpi	r24, 0x05	; 5
    2eee:	19 f4       	brne	.+6      	; 0x2ef6 <Calc_Expression+0x36>
    2ef0:	85 e0       	ldi	r24, 0x05	; 5
    2ef2:	8c 8b       	std	Y+20, r24	; 0x14
    2ef4:	4a c1       	rjmp	.+660    	; 0x318a <Calc_Expression+0x2ca>
    if(Local_DoubleResult > MAXNUMBER) return ES_OVERFLOW;
    2ef6:	88 89       	ldd	r24, Y+16	; 0x10
    2ef8:	99 89       	ldd	r25, Y+17	; 0x11
    2efa:	aa 89       	ldd	r26, Y+18	; 0x12
    2efc:	bb 89       	ldd	r27, Y+19	; 0x13
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	28 e2       	ldi	r18, 0x28	; 40
    2f04:	3b e6       	ldi	r19, 0x6B	; 107
    2f06:	4e ee       	ldi	r20, 0xEE	; 238
    2f08:	5e e4       	ldi	r21, 0x4E	; 78
    2f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f0e:	18 16       	cp	r1, r24
    2f10:	1c f4       	brge	.+6      	; 0x2f18 <Calc_Expression+0x58>
    2f12:	86 e0       	ldi	r24, 0x06	; 6
    2f14:	8c 8b       	std	Y+20, r24	; 0x14
    2f16:	39 c1       	rjmp	.+626    	; 0x318a <Calc_Expression+0x2ca>

    u8 Local_Idx = 0;
    2f18:	1e 86       	std	Y+14, r1	; 0x0e

    //printing Sign
    if(Local_DoubleResult < 0) {
    2f1a:	88 89       	ldd	r24, Y+16	; 0x10
    2f1c:	99 89       	ldd	r25, Y+17	; 0x11
    2f1e:	aa 89       	ldd	r26, Y+18	; 0x12
    2f20:	bb 89       	ldd	r27, Y+19	; 0x13
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f32:	88 23       	and	r24, r24
    2f34:	a4 f4       	brge	.+40     	; 0x2f5e <Calc_Expression+0x9e>
    	GlobalResultExpression[Local_Idx++] = '-';
    2f36:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	e2 5c       	subi	r30, 0xC2	; 194
    2f40:	fc 4f       	sbci	r31, 0xFC	; 252
    2f42:	8d e2       	ldi	r24, 0x2D	; 45
    2f44:	80 83       	st	Z, r24
    2f46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f48:	8f 5f       	subi	r24, 0xFF	; 255
    2f4a:	8e 87       	std	Y+14, r24	; 0x0e
        Local_DoubleResult *= -1;
    2f4c:	88 89       	ldd	r24, Y+16	; 0x10
    2f4e:	99 89       	ldd	r25, Y+17	; 0x11
    2f50:	aa 89       	ldd	r26, Y+18	; 0x12
    2f52:	bb 89       	ldd	r27, Y+19	; 0x13
    2f54:	b0 58       	subi	r27, 0x80	; 128
    2f56:	88 8b       	std	Y+16, r24	; 0x10
    2f58:	99 8b       	std	Y+17, r25	; 0x11
    2f5a:	aa 8b       	std	Y+18, r26	; 0x12
    2f5c:	bb 8b       	std	Y+19, r27	; 0x13
    }


    long Local_longValue = Local_DoubleResult;
    2f5e:	88 89       	ldd	r24, Y+16	; 0x10
    2f60:	99 89       	ldd	r25, Y+17	; 0x11
    2f62:	aa 89       	ldd	r26, Y+18	; 0x12
    2f64:	bb 89       	ldd	r27, Y+19	; 0x13
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	8a 87       	std	Y+10, r24	; 0x0a
    2f74:	9b 87       	std	Y+11, r25	; 0x0b
    2f76:	ac 87       	std	Y+12, r26	; 0x0c
    2f78:	bd 87       	std	Y+13, r27	; 0x0d
    long Local_tmp = Local_longValue;
    2f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f7e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2f80:	bd 85       	ldd	r27, Y+13	; 0x0d
    2f82:	8e 83       	std	Y+6, r24	; 0x06
    2f84:	9f 83       	std	Y+7, r25	; 0x07
    2f86:	a8 87       	std	Y+8, r26	; 0x08
    2f88:	b9 87       	std	Y+9, r27	; 0x09

    if(!Local_longValue){
    2f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f8e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2f90:	bd 85       	ldd	r27, Y+13	; 0x0d
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	a1 05       	cpc	r26, r1
    2f96:	b1 05       	cpc	r27, r1
    2f98:	59 f4       	brne	.+22     	; 0x2fb0 <Calc_Expression+0xf0>
        GlobalResultExpression[Local_Idx++] = '0';
    2f9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e2 5c       	subi	r30, 0xC2	; 194
    2fa4:	fc 4f       	sbci	r31, 0xFC	; 252
    2fa6:	80 e3       	ldi	r24, 0x30	; 48
    2fa8:	80 83       	st	Z, r24
    2faa:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fac:	8f 5f       	subi	r24, 0xFF	; 255
    2fae:	8e 87       	std	Y+14, r24	; 0x0e
    }

    Local_DoubleResult -= Local_longValue;
    2fb0:	e8 88       	ldd	r14, Y+16	; 0x10
    2fb2:	f9 88       	ldd	r15, Y+17	; 0x11
    2fb4:	0a 89       	ldd	r16, Y+18	; 0x12
    2fb6:	1b 89       	ldd	r17, Y+19	; 0x13
    2fb8:	6a 85       	ldd	r22, Y+10	; 0x0a
    2fba:	7b 85       	ldd	r23, Y+11	; 0x0b
    2fbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fc0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2fc4:	9b 01       	movw	r18, r22
    2fc6:	ac 01       	movw	r20, r24
    2fc8:	c8 01       	movw	r24, r16
    2fca:	b7 01       	movw	r22, r14
    2fcc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	88 8b       	std	Y+16, r24	; 0x10
    2fd6:	99 8b       	std	Y+17, r25	; 0x11
    2fd8:	aa 8b       	std	Y+18, r26	; 0x12
    2fda:	bb 8b       	std	Y+19, r27	; 0x13
    int Local_Size = 0;
    2fdc:	1d 82       	std	Y+5, r1	; 0x05
    2fde:	1c 82       	std	Y+4, r1	; 0x04
    2fe0:	17 c0       	rjmp	.+46     	; 0x3010 <Calc_Expression+0x150>
    while(Local_tmp){
        Local_Size++;
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	9d 83       	std	Y+5, r25	; 0x05
    2fea:	8c 83       	std	Y+4, r24	; 0x04
        Local_tmp/=10;
    2fec:	8e 81       	ldd	r24, Y+6	; 0x06
    2fee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff0:	a8 85       	ldd	r26, Y+8	; 0x08
    2ff2:	b9 85       	ldd	r27, Y+9	; 0x09
    2ff4:	2a e0       	ldi	r18, 0x0A	; 10
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	0e 94 1b 22 	call	0x4436	; 0x4436 <__divmodsi4>
    3004:	da 01       	movw	r26, r20
    3006:	c9 01       	movw	r24, r18
    3008:	8e 83       	std	Y+6, r24	; 0x06
    300a:	9f 83       	std	Y+7, r25	; 0x07
    300c:	a8 87       	std	Y+8, r26	; 0x08
    300e:	b9 87       	std	Y+9, r27	; 0x09
        GlobalResultExpression[Local_Idx++] = '0';
    }

    Local_DoubleResult -= Local_longValue;
    int Local_Size = 0;
    while(Local_tmp){
    3010:	8e 81       	ldd	r24, Y+6	; 0x06
    3012:	9f 81       	ldd	r25, Y+7	; 0x07
    3014:	a8 85       	ldd	r26, Y+8	; 0x08
    3016:	b9 85       	ldd	r27, Y+9	; 0x09
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	a1 05       	cpc	r26, r1
    301c:	b1 05       	cpc	r27, r1
    301e:	09 f7       	brne	.-62     	; 0x2fe2 <Calc_Expression+0x122>
        Local_Size++;
        Local_tmp/=10;
    }
    for (int i = Local_Size + Local_Idx - 1; i >= Local_Idx; --i) {
    3020:	8e 85       	ldd	r24, Y+14	; 0x0e
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	9d 81       	ldd	r25, Y+5	; 0x05
    302a:	82 0f       	add	r24, r18
    302c:	93 1f       	adc	r25, r19
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	9b 83       	std	Y+3, r25	; 0x03
    3032:	8a 83       	std	Y+2, r24	; 0x02
    3034:	2c c0       	rjmp	.+88     	; 0x308e <Calc_Expression+0x1ce>
        GlobalResultExpression[i] = (Local_longValue %10) + '0';
    3036:	0a 81       	ldd	r16, Y+2	; 0x02
    3038:	1b 81       	ldd	r17, Y+3	; 0x03
    303a:	8a 85       	ldd	r24, Y+10	; 0x0a
    303c:	9b 85       	ldd	r25, Y+11	; 0x0b
    303e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3040:	bd 85       	ldd	r27, Y+13	; 0x0d
    3042:	2a e0       	ldi	r18, 0x0A	; 10
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	bc 01       	movw	r22, r24
    304c:	cd 01       	movw	r24, r26
    304e:	0e 94 1b 22 	call	0x4436	; 0x4436 <__divmodsi4>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	80 5d       	subi	r24, 0xD0	; 208
    3058:	f8 01       	movw	r30, r16
    305a:	e2 5c       	subi	r30, 0xC2	; 194
    305c:	fc 4f       	sbci	r31, 0xFC	; 252
    305e:	80 83       	st	Z, r24
        Local_longValue/=10;
    3060:	8a 85       	ldd	r24, Y+10	; 0x0a
    3062:	9b 85       	ldd	r25, Y+11	; 0x0b
    3064:	ac 85       	ldd	r26, Y+12	; 0x0c
    3066:	bd 85       	ldd	r27, Y+13	; 0x0d
    3068:	2a e0       	ldi	r18, 0x0A	; 10
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 1b 22 	call	0x4436	; 0x4436 <__divmodsi4>
    3078:	da 01       	movw	r26, r20
    307a:	c9 01       	movw	r24, r18
    307c:	8a 87       	std	Y+10, r24	; 0x0a
    307e:	9b 87       	std	Y+11, r25	; 0x0b
    3080:	ac 87       	std	Y+12, r26	; 0x0c
    3082:	bd 87       	std	Y+13, r27	; 0x0d
    int Local_Size = 0;
    while(Local_tmp){
        Local_Size++;
        Local_tmp/=10;
    }
    for (int i = Local_Size + Local_Idx - 1; i >= Local_Idx; --i) {
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	9b 81       	ldd	r25, Y+3	; 0x03
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	9b 83       	std	Y+3, r25	; 0x03
    308c:	8a 83       	std	Y+2, r24	; 0x02
    308e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	82 17       	cp	r24, r18
    309a:	93 07       	cpc	r25, r19
    309c:	64 f6       	brge	.-104    	; 0x3036 <Calc_Expression+0x176>
        GlobalResultExpression[i] = (Local_longValue %10) + '0';
        Local_longValue/=10;
    }
    Local_Idx += Local_Size ;
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
    30a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    30a2:	89 0f       	add	r24, r25
    30a4:	8e 87       	std	Y+14, r24	; 0x0e

    //printing Fraction
    if(Float_Abs(Local_DoubleResult - (long)Local_DoubleResult) > EPS){
    30a6:	e8 88       	ldd	r14, Y+16	; 0x10
    30a8:	f9 88       	ldd	r15, Y+17	; 0x11
    30aa:	0a 89       	ldd	r16, Y+18	; 0x12
    30ac:	1b 89       	ldd	r17, Y+19	; 0x13
    30ae:	88 89       	ldd	r24, Y+16	; 0x10
    30b0:	99 89       	ldd	r25, Y+17	; 0x11
    30b2:	aa 89       	ldd	r26, Y+18	; 0x12
    30b4:	bb 89       	ldd	r27, Y+19	; 0x13
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    30ca:	9b 01       	movw	r18, r22
    30cc:	ac 01       	movw	r20, r24
    30ce:	c8 01       	movw	r24, r16
    30d0:	b7 01       	movw	r22, r14
    30d2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	0e 94 93 0c 	call	0x1926	; 0x1926 <Float_Abs>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	2c ea       	ldi	r18, 0xAC	; 172
    30ec:	35 ec       	ldi	r19, 0xC5	; 197
    30ee:	47 e2       	ldi	r20, 0x27	; 39
    30f0:	57 e3       	ldi	r21, 0x37	; 55
    30f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	0c f0       	brlt	.+2      	; 0x30fc <Calc_Expression+0x23c>
    30fa:	44 c0       	rjmp	.+136    	; 0x3184 <Calc_Expression+0x2c4>
    	GlobalResultExpression[Local_Idx++] = '.';
    30fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    30fe:	88 2f       	mov	r24, r24
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	fc 01       	movw	r30, r24
    3104:	e2 5c       	subi	r30, 0xC2	; 194
    3106:	fc 4f       	sbci	r31, 0xFC	; 252
    3108:	8e e2       	ldi	r24, 0x2E	; 46
    310a:	80 83       	st	Z, r24
    310c:	8e 85       	ldd	r24, Y+14	; 0x0e
    310e:	8f 5f       	subi	r24, 0xFF	; 255
    3110:	8e 87       	std	Y+14, r24	; 0x0e
    	for(u8 i = 0; i < PRECISION_DIGITS; i++){
    3112:	19 82       	std	Y+1, r1	; 0x01
    3114:	34 c0       	rjmp	.+104    	; 0x317e <Calc_Expression+0x2be>
    		Local_DoubleResult *= 10;
    3116:	88 89       	ldd	r24, Y+16	; 0x10
    3118:	99 89       	ldd	r25, Y+17	; 0x11
    311a:	aa 89       	ldd	r26, Y+18	; 0x12
    311c:	bb 89       	ldd	r27, Y+19	; 0x13
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	51 e4       	ldi	r21, 0x41	; 65
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	88 8b       	std	Y+16, r24	; 0x10
    3134:	99 8b       	std	Y+17, r25	; 0x11
    3136:	aa 8b       	std	Y+18, r26	; 0x12
    3138:	bb 8b       	std	Y+19, r27	; 0x13
    		GlobalResultExpression[Local_Idx++] = ((long)Local_DoubleResult %10 + '0');
    313a:	8e 85       	ldd	r24, Y+14	; 0x0e
    313c:	08 2f       	mov	r16, r24
    313e:	10 e0       	ldi	r17, 0x00	; 0
    3140:	88 89       	ldd	r24, Y+16	; 0x10
    3142:	99 89       	ldd	r25, Y+17	; 0x11
    3144:	aa 89       	ldd	r26, Y+18	; 0x12
    3146:	bb 89       	ldd	r27, Y+19	; 0x13
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	2a e0       	ldi	r18, 0x0A	; 10
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 1b 22 	call	0x4436	; 0x4436 <__divmodsi4>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	80 5d       	subi	r24, 0xD0	; 208
    316a:	f8 01       	movw	r30, r16
    316c:	e2 5c       	subi	r30, 0xC2	; 194
    316e:	fc 4f       	sbci	r31, 0xFC	; 252
    3170:	80 83       	st	Z, r24
    3172:	8e 85       	ldd	r24, Y+14	; 0x0e
    3174:	8f 5f       	subi	r24, 0xFF	; 255
    3176:	8e 87       	std	Y+14, r24	; 0x0e
    Local_Idx += Local_Size ;

    //printing Fraction
    if(Float_Abs(Local_DoubleResult - (long)Local_DoubleResult) > EPS){
    	GlobalResultExpression[Local_Idx++] = '.';
    	for(u8 i = 0; i < PRECISION_DIGITS; i++){
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	8f 5f       	subi	r24, 0xFF	; 255
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	84 30       	cpi	r24, 0x04	; 4
    3182:	48 f2       	brcs	.-110    	; 0x3116 <Calc_Expression+0x256>
    		Local_DoubleResult *= 10;
    		GlobalResultExpression[Local_Idx++] = ((long)Local_DoubleResult %10 + '0');
    	}
    }

    Local_enuErrorState = ES_OK;
    3184:	1f 86       	std	Y+15, r1	; 0x0f
    return Local_enuErrorState;
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	8c 8b       	std	Y+20, r24	; 0x14
    318a:	8c 89       	ldd	r24, Y+20	; 0x14
}
    318c:	64 96       	adiw	r28, 0x14	; 20
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	08 95       	ret

000031a6 <priority>:


u8 priority(char key){
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <priority+0x6>
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	89 83       	std	Y+1, r24	; 0x01
	if(key == '+' || key == '-') return 0;
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	8b 32       	cpi	r24, 0x2B	; 43
    31b6:	19 f0       	breq	.+6      	; 0x31be <priority+0x18>
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	8d 32       	cpi	r24, 0x2D	; 45
    31bc:	11 f4       	brne	.+4      	; 0x31c2 <priority+0x1c>
    31be:	1a 82       	std	Y+2, r1	; 0x02
    31c0:	11 c0       	rjmp	.+34     	; 0x31e4 <priority+0x3e>
	if(key == '*' || key == '/') return 1;
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	8a 32       	cpi	r24, 0x2A	; 42
    31c6:	19 f0       	breq	.+6      	; 0x31ce <priority+0x28>
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	8f 32       	cpi	r24, 0x2F	; 47
    31cc:	19 f4       	brne	.+6      	; 0x31d4 <priority+0x2e>
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	8a 83       	std	Y+2, r24	; 0x02
    31d2:	08 c0       	rjmp	.+16     	; 0x31e4 <priority+0x3e>
	if(key == '^') return 2;
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	8e 35       	cpi	r24, 0x5E	; 94
    31d8:	19 f4       	brne	.+6      	; 0x31e0 <priority+0x3a>
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	8a 83       	std	Y+2, r24	; 0x02
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <priority+0x3e>
	return -1;
    31e0:	8f ef       	ldi	r24, 0xFF	; 255
    31e2:	8a 83       	std	Y+2, r24	; 0x02
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <Infix_To_Postfix>:

ES Infix_To_Postfix(){
    31f0:	1f 93       	push	r17
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	2d 97       	sbiw	r28, 0x0d	; 13
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    ES Local_enuErrorState = ES_NOK;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	8e 83       	std	Y+6, r24	; 0x06
    char* LocalInfixExpression = GlobalShaddedExpression;
    320a:	82 ea       	ldi	r24, 0xA2	; 162
    320c:	93 e0       	ldi	r25, 0x03	; 3
    320e:	9d 83       	std	Y+5, r25	; 0x05
    3210:	8c 83       	std	Y+4, r24	; 0x04
    Stack st;
    Initialize_Stack(&st);
    3212:	ce 01       	movw	r24, r28
    3214:	07 96       	adiw	r24, 0x07	; 7
    3216:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Initialize_Stack>
    u8 postfix_ind = 0;
    321a:	1b 82       	std	Y+3, r1	; 0x03
    for(int i = 0; LocalInfixExpression[i]; ++i){
    321c:	1a 82       	std	Y+2, r1	; 0x02
    321e:	19 82       	std	Y+1, r1	; 0x01
    3220:	d6 c0       	rjmp	.+428    	; 0x33ce <Infix_To_Postfix+0x1de>
        if(LocalInfixExpression[i] == ')'){
    3222:	29 81       	ldd	r18, Y+1	; 0x01
    3224:	3a 81       	ldd	r19, Y+2	; 0x02
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	9d 81       	ldd	r25, Y+5	; 0x05
    322a:	fc 01       	movw	r30, r24
    322c:	e2 0f       	add	r30, r18
    322e:	f3 1f       	adc	r31, r19
    3230:	80 81       	ld	r24, Z
    3232:	89 32       	cpi	r24, 0x29	; 41
    3234:	49 f5       	brne	.+82     	; 0x3288 <Infix_To_Postfix+0x98>
    3236:	13 c0       	rjmp	.+38     	; 0x325e <Infix_To_Postfix+0x6e>
            char c;
            while(!Stack_Empty(&st) && Top(&st) != '('){
                Pop(&c,&st);
    3238:	ce 01       	movw	r24, r28
    323a:	0b 96       	adiw	r24, 0x0b	; 11
    323c:	9e 01       	movw	r18, r28
    323e:	29 5f       	subi	r18, 0xF9	; 249
    3240:	3f 4f       	sbci	r19, 0xFF	; 255
    3242:	b9 01       	movw	r22, r18
    3244:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
                GlobalPostfixExpression[postfix_ind] = c;
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3250:	fc 01       	movw	r30, r24
    3252:	e6 5d       	subi	r30, 0xD6	; 214
    3254:	fc 4f       	sbci	r31, 0xFC	; 252
    3256:	20 83       	st	Z, r18
                postfix_ind++;
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	8f 5f       	subi	r24, 0xFF	; 255
    325c:	8b 83       	std	Y+3, r24	; 0x03
    Initialize_Stack(&st);
    u8 postfix_ind = 0;
    for(int i = 0; LocalInfixExpression[i]; ++i){
        if(LocalInfixExpression[i] == ')'){
            char c;
            while(!Stack_Empty(&st) && Top(&st) != '('){
    325e:	ce 01       	movw	r24, r28
    3260:	07 96       	adiw	r24, 0x07	; 7
    3262:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <Stack_Empty>
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	31 f4       	brne	.+12     	; 0x3276 <Infix_To_Postfix+0x86>
    326a:	ce 01       	movw	r24, r28
    326c:	07 96       	adiw	r24, 0x07	; 7
    326e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Top>
    3272:	88 32       	cpi	r24, 0x28	; 40
    3274:	09 f7       	brne	.-62     	; 0x3238 <Infix_To_Postfix+0x48>
                Pop(&c,&st);
                GlobalPostfixExpression[postfix_ind] = c;
                postfix_ind++;
            }
            Pop(&c,&st);
    3276:	ce 01       	movw	r24, r28
    3278:	0b 96       	adiw	r24, 0x0b	; 11
    327a:	9e 01       	movw	r18, r28
    327c:	29 5f       	subi	r18, 0xF9	; 249
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	b9 01       	movw	r22, r18
    3282:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
    3286:	9e c0       	rjmp	.+316    	; 0x33c4 <Infix_To_Postfix+0x1d4>
        }
        else{
            if(LocalInfixExpression[i] == '('){
    3288:	29 81       	ldd	r18, Y+1	; 0x01
    328a:	3a 81       	ldd	r19, Y+2	; 0x02
    328c:	8c 81       	ldd	r24, Y+4	; 0x04
    328e:	9d 81       	ldd	r25, Y+5	; 0x05
    3290:	fc 01       	movw	r30, r24
    3292:	e2 0f       	add	r30, r18
    3294:	f3 1f       	adc	r31, r19
    3296:	80 81       	ld	r24, Z
    3298:	88 32       	cpi	r24, 0x28	; 40
    329a:	71 f4       	brne	.+28     	; 0x32b8 <Infix_To_Postfix+0xc8>
                Push(&st, LocalInfixExpression[i]);
    329c:	29 81       	ldd	r18, Y+1	; 0x01
    329e:	3a 81       	ldd	r19, Y+2	; 0x02
    32a0:	8c 81       	ldd	r24, Y+4	; 0x04
    32a2:	9d 81       	ldd	r25, Y+5	; 0x05
    32a4:	fc 01       	movw	r30, r24
    32a6:	e2 0f       	add	r30, r18
    32a8:	f3 1f       	adc	r31, r19
    32aa:	20 81       	ld	r18, Z
    32ac:	ce 01       	movw	r24, r28
    32ae:	07 96       	adiw	r24, 0x07	; 7
    32b0:	62 2f       	mov	r22, r18
    32b2:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    32b6:	86 c0       	rjmp	.+268    	; 0x33c4 <Infix_To_Postfix+0x1d4>
            }
            else if(LocalInfixExpression[i] == '+' || LocalInfixExpression[i] == '-' || LocalInfixExpression[i] == '*' || LocalInfixExpression[i] == '/' || LocalInfixExpression[i] == '^'){
    32b8:	29 81       	ldd	r18, Y+1	; 0x01
    32ba:	3a 81       	ldd	r19, Y+2	; 0x02
    32bc:	8c 81       	ldd	r24, Y+4	; 0x04
    32be:	9d 81       	ldd	r25, Y+5	; 0x05
    32c0:	fc 01       	movw	r30, r24
    32c2:	e2 0f       	add	r30, r18
    32c4:	f3 1f       	adc	r31, r19
    32c6:	80 81       	ld	r24, Z
    32c8:	8b 32       	cpi	r24, 0x2B	; 43
    32ca:	e9 f1       	breq	.+122    	; 0x3346 <Infix_To_Postfix+0x156>
    32cc:	29 81       	ldd	r18, Y+1	; 0x01
    32ce:	3a 81       	ldd	r19, Y+2	; 0x02
    32d0:	8c 81       	ldd	r24, Y+4	; 0x04
    32d2:	9d 81       	ldd	r25, Y+5	; 0x05
    32d4:	fc 01       	movw	r30, r24
    32d6:	e2 0f       	add	r30, r18
    32d8:	f3 1f       	adc	r31, r19
    32da:	80 81       	ld	r24, Z
    32dc:	8d 32       	cpi	r24, 0x2D	; 45
    32de:	99 f1       	breq	.+102    	; 0x3346 <Infix_To_Postfix+0x156>
    32e0:	29 81       	ldd	r18, Y+1	; 0x01
    32e2:	3a 81       	ldd	r19, Y+2	; 0x02
    32e4:	8c 81       	ldd	r24, Y+4	; 0x04
    32e6:	9d 81       	ldd	r25, Y+5	; 0x05
    32e8:	fc 01       	movw	r30, r24
    32ea:	e2 0f       	add	r30, r18
    32ec:	f3 1f       	adc	r31, r19
    32ee:	80 81       	ld	r24, Z
    32f0:	8a 32       	cpi	r24, 0x2A	; 42
    32f2:	49 f1       	breq	.+82     	; 0x3346 <Infix_To_Postfix+0x156>
    32f4:	29 81       	ldd	r18, Y+1	; 0x01
    32f6:	3a 81       	ldd	r19, Y+2	; 0x02
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	9d 81       	ldd	r25, Y+5	; 0x05
    32fc:	fc 01       	movw	r30, r24
    32fe:	e2 0f       	add	r30, r18
    3300:	f3 1f       	adc	r31, r19
    3302:	80 81       	ld	r24, Z
    3304:	8f 32       	cpi	r24, 0x2F	; 47
    3306:	f9 f0       	breq	.+62     	; 0x3346 <Infix_To_Postfix+0x156>
    3308:	29 81       	ldd	r18, Y+1	; 0x01
    330a:	3a 81       	ldd	r19, Y+2	; 0x02
    330c:	8c 81       	ldd	r24, Y+4	; 0x04
    330e:	9d 81       	ldd	r25, Y+5	; 0x05
    3310:	fc 01       	movw	r30, r24
    3312:	e2 0f       	add	r30, r18
    3314:	f3 1f       	adc	r31, r19
    3316:	80 81       	ld	r24, Z
    3318:	8e 35       	cpi	r24, 0x5E	; 94
    331a:	09 f0       	breq	.+2      	; 0x331e <Infix_To_Postfix+0x12e>
    331c:	41 c0       	rjmp	.+130    	; 0x33a0 <Infix_To_Postfix+0x1b0>
    331e:	13 c0       	rjmp	.+38     	; 0x3346 <Infix_To_Postfix+0x156>
                while(!Stack_Empty(&st) && Top(&st) != '(' && priority(LocalInfixExpression[i]) <= priority(Top(&st))){
                    char c;
                    Pop(&c,&st);
    3320:	ce 01       	movw	r24, r28
    3322:	0c 96       	adiw	r24, 0x0c	; 12
    3324:	9e 01       	movw	r18, r28
    3326:	29 5f       	subi	r18, 0xF9	; 249
    3328:	3f 4f       	sbci	r19, 0xFF	; 255
    332a:	b9 01       	movw	r22, r18
    332c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
                    GlobalPostfixExpression[postfix_ind] = (char)c;
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	88 2f       	mov	r24, r24
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	2c 85       	ldd	r18, Y+12	; 0x0c
    3338:	fc 01       	movw	r30, r24
    333a:	e6 5d       	subi	r30, 0xD6	; 214
    333c:	fc 4f       	sbci	r31, 0xFC	; 252
    333e:	20 83       	st	Z, r18
                    postfix_ind++;
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	8f 5f       	subi	r24, 0xFF	; 255
    3344:	8b 83       	std	Y+3, r24	; 0x03
        else{
            if(LocalInfixExpression[i] == '('){
                Push(&st, LocalInfixExpression[i]);
            }
            else if(LocalInfixExpression[i] == '+' || LocalInfixExpression[i] == '-' || LocalInfixExpression[i] == '*' || LocalInfixExpression[i] == '/' || LocalInfixExpression[i] == '^'){
                while(!Stack_Empty(&st) && Top(&st) != '(' && priority(LocalInfixExpression[i]) <= priority(Top(&st))){
    3346:	ce 01       	movw	r24, r28
    3348:	07 96       	adiw	r24, 0x07	; 7
    334a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <Stack_Empty>
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	c9 f4       	brne	.+50     	; 0x3384 <Infix_To_Postfix+0x194>
    3352:	ce 01       	movw	r24, r28
    3354:	07 96       	adiw	r24, 0x07	; 7
    3356:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Top>
    335a:	88 32       	cpi	r24, 0x28	; 40
    335c:	99 f0       	breq	.+38     	; 0x3384 <Infix_To_Postfix+0x194>
    335e:	29 81       	ldd	r18, Y+1	; 0x01
    3360:	3a 81       	ldd	r19, Y+2	; 0x02
    3362:	8c 81       	ldd	r24, Y+4	; 0x04
    3364:	9d 81       	ldd	r25, Y+5	; 0x05
    3366:	fc 01       	movw	r30, r24
    3368:	e2 0f       	add	r30, r18
    336a:	f3 1f       	adc	r31, r19
    336c:	80 81       	ld	r24, Z
    336e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <priority>
    3372:	18 2f       	mov	r17, r24
    3374:	ce 01       	movw	r24, r28
    3376:	07 96       	adiw	r24, 0x07	; 7
    3378:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Top>
    337c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <priority>
    3380:	81 17       	cp	r24, r17
    3382:	70 f6       	brcc	.-100    	; 0x3320 <Infix_To_Postfix+0x130>
                    char c;
                    Pop(&c,&st);
                    GlobalPostfixExpression[postfix_ind] = (char)c;
                    postfix_ind++;
                }
                Push(&st, LocalInfixExpression[i]);
    3384:	29 81       	ldd	r18, Y+1	; 0x01
    3386:	3a 81       	ldd	r19, Y+2	; 0x02
    3388:	8c 81       	ldd	r24, Y+4	; 0x04
    338a:	9d 81       	ldd	r25, Y+5	; 0x05
    338c:	fc 01       	movw	r30, r24
    338e:	e2 0f       	add	r30, r18
    3390:	f3 1f       	adc	r31, r19
    3392:	20 81       	ld	r18, Z
    3394:	ce 01       	movw	r24, r28
    3396:	07 96       	adiw	r24, 0x07	; 7
    3398:	62 2f       	mov	r22, r18
    339a:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    339e:	12 c0       	rjmp	.+36     	; 0x33c4 <Infix_To_Postfix+0x1d4>
            }
            else {
            	GlobalPostfixExpression[postfix_ind] = LocalInfixExpression[i];
    33a0:	8b 81       	ldd	r24, Y+3	; 0x03
    33a2:	48 2f       	mov	r20, r24
    33a4:	50 e0       	ldi	r21, 0x00	; 0
    33a6:	29 81       	ldd	r18, Y+1	; 0x01
    33a8:	3a 81       	ldd	r19, Y+2	; 0x02
    33aa:	8c 81       	ldd	r24, Y+4	; 0x04
    33ac:	9d 81       	ldd	r25, Y+5	; 0x05
    33ae:	fc 01       	movw	r30, r24
    33b0:	e2 0f       	add	r30, r18
    33b2:	f3 1f       	adc	r31, r19
    33b4:	80 81       	ld	r24, Z
    33b6:	fa 01       	movw	r30, r20
    33b8:	e6 5d       	subi	r30, 0xD6	; 214
    33ba:	fc 4f       	sbci	r31, 0xFC	; 252
    33bc:	80 83       	st	Z, r24
                postfix_ind++;
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	8b 83       	std	Y+3, r24	; 0x03
    ES Local_enuErrorState = ES_NOK;
    char* LocalInfixExpression = GlobalShaddedExpression;
    Stack st;
    Initialize_Stack(&st);
    u8 postfix_ind = 0;
    for(int i = 0; LocalInfixExpression[i]; ++i){
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	9a 81       	ldd	r25, Y+2	; 0x02
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	9a 83       	std	Y+2, r25	; 0x02
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	29 81       	ldd	r18, Y+1	; 0x01
    33d0:	3a 81       	ldd	r19, Y+2	; 0x02
    33d2:	8c 81       	ldd	r24, Y+4	; 0x04
    33d4:	9d 81       	ldd	r25, Y+5	; 0x05
    33d6:	fc 01       	movw	r30, r24
    33d8:	e2 0f       	add	r30, r18
    33da:	f3 1f       	adc	r31, r19
    33dc:	80 81       	ld	r24, Z
    33de:	88 23       	and	r24, r24
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <Infix_To_Postfix+0x1f4>
    33e2:	1f cf       	rjmp	.-450    	; 0x3222 <Infix_To_Postfix+0x32>
    33e4:	13 c0       	rjmp	.+38     	; 0x340c <Infix_To_Postfix+0x21c>
            }
        }
    }
    while(!Stack_Empty(&st)){
        char c;
        Pop(&c,&st);
    33e6:	ce 01       	movw	r24, r28
    33e8:	0d 96       	adiw	r24, 0x0d	; 13
    33ea:	9e 01       	movw	r18, r28
    33ec:	29 5f       	subi	r18, 0xF9	; 249
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
    33f0:	b9 01       	movw	r22, r18
    33f2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
        GlobalPostfixExpression[postfix_ind] = (char)c;
    33f6:	8b 81       	ldd	r24, Y+3	; 0x03
    33f8:	88 2f       	mov	r24, r24
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    33fe:	fc 01       	movw	r30, r24
    3400:	e6 5d       	subi	r30, 0xD6	; 214
    3402:	fc 4f       	sbci	r31, 0xFC	; 252
    3404:	20 83       	st	Z, r18
        postfix_ind++;
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	8f 5f       	subi	r24, 0xFF	; 255
    340a:	8b 83       	std	Y+3, r24	; 0x03
            	GlobalPostfixExpression[postfix_ind] = LocalInfixExpression[i];
                postfix_ind++;
            }
        }
    }
    while(!Stack_Empty(&st)){
    340c:	ce 01       	movw	r24, r28
    340e:	07 96       	adiw	r24, 0x07	; 7
    3410:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <Stack_Empty>
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	39 f3       	breq	.-50     	; 0x33e6 <Infix_To_Postfix+0x1f6>
        char c;
        Pop(&c,&st);
        GlobalPostfixExpression[postfix_ind] = (char)c;
        postfix_ind++;
    }
    GlobalPostfixExpression[postfix_ind] = '\0';
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	88 2f       	mov	r24, r24
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	fc 01       	movw	r30, r24
    3420:	e6 5d       	subi	r30, 0xD6	; 214
    3422:	fc 4f       	sbci	r31, 0xFC	; 252
    3424:	10 82       	st	Z, r1
    Local_enuErrorState = ES_OK;
    3426:	1e 82       	std	Y+6, r1	; 0x06
    return Local_enuErrorState;
    3428:	8e 81       	ldd	r24, Y+6	; 0x06
}
    342a:	2d 96       	adiw	r28, 0x0d	; 13
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	1f 91       	pop	r17
    343c:	08 95       	ret

0000343e <Calc_Postfix>:

ES Calc_Postfix(double * Copy_pDoubleResult){
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	2e 97       	sbiw	r28, 0x0e	; 14
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	9b 87       	std	Y+11, r25	; 0x0b
    3460:	8a 87       	std	Y+10, r24	; 0x0a
    ES Local_enuErrorState = ES_NOK;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	8b 83       	std	Y+3, r24	; 0x03
    Stack st;
    Initialize_Stack(&st);
    3466:	ce 01       	movw	r24, r28
    3468:	04 96       	adiw	r24, 0x04	; 4
    346a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Initialize_Stack>
    for (int i = 0; GlobalPostfixExpression[i]; ++i) {
    346e:	1a 82       	std	Y+2, r1	; 0x02
    3470:	19 82       	std	Y+1, r1	; 0x01
    3472:	06 c2       	rjmp	.+1036   	; 0x3880 <Calc_Postfix+0x442>
        if(GlobalPostfixExpression[i] >= 'A' && GlobalPostfixExpression[i] <= 'Z'){
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	9a 81       	ldd	r25, Y+2	; 0x02
    3478:	fc 01       	movw	r30, r24
    347a:	e6 5d       	subi	r30, 0xD6	; 214
    347c:	fc 4f       	sbci	r31, 0xFC	; 252
    347e:	80 81       	ld	r24, Z
    3480:	81 34       	cpi	r24, 0x41	; 65
    3482:	a0 f0       	brcs	.+40     	; 0x34ac <Calc_Postfix+0x6e>
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	9a 81       	ldd	r25, Y+2	; 0x02
    3488:	fc 01       	movw	r30, r24
    348a:	e6 5d       	subi	r30, 0xD6	; 214
    348c:	fc 4f       	sbci	r31, 0xFC	; 252
    348e:	80 81       	ld	r24, Z
    3490:	8b 35       	cpi	r24, 0x5B	; 91
    3492:	60 f4       	brcc	.+24     	; 0x34ac <Calc_Postfix+0x6e>
            Push(&st,GlobalPostfixExpression[i]);
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	fc 01       	movw	r30, r24
    349a:	e6 5d       	subi	r30, 0xD6	; 214
    349c:	fc 4f       	sbci	r31, 0xFC	; 252
    349e:	20 81       	ld	r18, Z
    34a0:	ce 01       	movw	r24, r28
    34a2:	04 96       	adiw	r24, 0x04	; 4
    34a4:	62 2f       	mov	r22, r18
    34a6:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    34aa:	e5 c1       	rjmp	.+970    	; 0x3876 <Calc_Postfix+0x438>
        }
        else{
            if(Stack_Size(&st) >= 2){
    34ac:	ce 01       	movw	r24, r28
    34ae:	04 96       	adiw	r24, 0x04	; 4
    34b0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Stack_Size>
    34b4:	82 30       	cpi	r24, 0x02	; 2
    34b6:	91 05       	cpc	r25, r1
    34b8:	0c f4       	brge	.+2      	; 0x34bc <Calc_Postfix+0x7e>
    34ba:	da c1       	rjmp	.+948    	; 0x3870 <Calc_Postfix+0x432>
                char op1,op2;
                Pop(&op2,&st);
    34bc:	ce 01       	movw	r24, r28
    34be:	09 96       	adiw	r24, 0x09	; 9
    34c0:	9e 01       	movw	r18, r28
    34c2:	2c 5f       	subi	r18, 0xFC	; 252
    34c4:	3f 4f       	sbci	r19, 0xFF	; 255
    34c6:	b9 01       	movw	r22, r18
    34c8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
                Pop(&op1,&st);
    34cc:	ce 01       	movw	r24, r28
    34ce:	08 96       	adiw	r24, 0x08	; 8
    34d0:	9e 01       	movw	r18, r28
    34d2:	2c 5f       	subi	r18, 0xFC	; 252
    34d4:	3f 4f       	sbci	r19, 0xFF	; 255
    34d6:	b9 01       	movw	r22, r18
    34d8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
                switch (GlobalPostfixExpression[i]) {
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	fc 01       	movw	r30, r24
    34e2:	e6 5d       	subi	r30, 0xD6	; 214
    34e4:	fc 4f       	sbci	r31, 0xFC	; 252
    34e6:	80 81       	ld	r24, Z
    34e8:	28 2f       	mov	r18, r24
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	3e 87       	std	Y+14, r19	; 0x0e
    34ee:	2d 87       	std	Y+13, r18	; 0x0d
    34f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f4:	8d 32       	cpi	r24, 0x2D	; 45
    34f6:	91 05       	cpc	r25, r1
    34f8:	09 f4       	brne	.+2      	; 0x34fc <Calc_Postfix+0xbe>
    34fa:	64 c0       	rjmp	.+200    	; 0x35c4 <Calc_Postfix+0x186>
    34fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    34fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3500:	2e 32       	cpi	r18, 0x2E	; 46
    3502:	31 05       	cpc	r19, r1
    3504:	64 f4       	brge	.+24     	; 0x351e <Calc_Postfix+0xe0>
    3506:	8d 85       	ldd	r24, Y+13	; 0x0d
    3508:	9e 85       	ldd	r25, Y+14	; 0x0e
    350a:	8a 32       	cpi	r24, 0x2A	; 42
    350c:	91 05       	cpc	r25, r1
    350e:	09 f4       	brne	.+2      	; 0x3512 <Calc_Postfix+0xd4>
    3510:	9f c0       	rjmp	.+318    	; 0x3650 <Calc_Postfix+0x212>
    3512:	2d 85       	ldd	r18, Y+13	; 0x0d
    3514:	3e 85       	ldd	r19, Y+14	; 0x0e
    3516:	2b 32       	cpi	r18, 0x2B	; 43
    3518:	31 05       	cpc	r19, r1
    351a:	71 f0       	breq	.+28     	; 0x3538 <Calc_Postfix+0xfa>
    351c:	ac c1       	rjmp	.+856    	; 0x3876 <Calc_Postfix+0x438>
    351e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3520:	9e 85       	ldd	r25, Y+14	; 0x0e
    3522:	8f 32       	cpi	r24, 0x2F	; 47
    3524:	91 05       	cpc	r25, r1
    3526:	09 f4       	brne	.+2      	; 0x352a <Calc_Postfix+0xec>
    3528:	d9 c0       	rjmp	.+434    	; 0x36dc <Calc_Postfix+0x29e>
    352a:	2d 85       	ldd	r18, Y+13	; 0x0d
    352c:	3e 85       	ldd	r19, Y+14	; 0x0e
    352e:	2e 35       	cpi	r18, 0x5E	; 94
    3530:	31 05       	cpc	r19, r1
    3532:	09 f4       	brne	.+2      	; 0x3536 <Calc_Postfix+0xf8>
    3534:	3c c1       	rjmp	.+632    	; 0x37ae <Calc_Postfix+0x370>
    3536:	9f c1       	rjmp	.+830    	; 0x3876 <Calc_Postfix+0x438>
                    case '+':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] + GlobalOperands[op2 - 'A'];
    3538:	88 85       	ldd	r24, Y+8	; 0x08
    353a:	88 2f       	mov	r24, r24
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0f 2e       	mov	r0, r31
    3540:	ff eb       	ldi	r31, 0xBF	; 191
    3542:	cf 2e       	mov	r12, r31
    3544:	ff ef       	ldi	r31, 0xFF	; 255
    3546:	df 2e       	mov	r13, r31
    3548:	f0 2d       	mov	r31, r0
    354a:	c8 0e       	add	r12, r24
    354c:	d9 1e       	adc	r13, r25
    354e:	88 85       	ldd	r24, Y+8	; 0x08
    3550:	88 2f       	mov	r24, r24
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	81 54       	subi	r24, 0x41	; 65
    3556:	90 40       	sbci	r25, 0x00	; 0
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	88 0f       	add	r24, r24
    355e:	99 1f       	adc	r25, r25
    3560:	fc 01       	movw	r30, r24
    3562:	ee 5a       	subi	r30, 0xAE	; 174
    3564:	fc 4f       	sbci	r31, 0xFC	; 252
    3566:	e0 80       	ld	r14, Z
    3568:	f1 80       	ldd	r15, Z+1	; 0x01
    356a:	02 81       	ldd	r16, Z+2	; 0x02
    356c:	13 81       	ldd	r17, Z+3	; 0x03
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	88 2f       	mov	r24, r24
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	81 54       	subi	r24, 0x41	; 65
    3576:	90 40       	sbci	r25, 0x00	; 0
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	fc 01       	movw	r30, r24
    3582:	ee 5a       	subi	r30, 0xAE	; 174
    3584:	fc 4f       	sbci	r31, 0xFC	; 252
    3586:	20 81       	ld	r18, Z
    3588:	31 81       	ldd	r19, Z+1	; 0x01
    358a:	42 81       	ldd	r20, Z+2	; 0x02
    358c:	53 81       	ldd	r21, Z+3	; 0x03
    358e:	c8 01       	movw	r24, r16
    3590:	b7 01       	movw	r22, r14
    3592:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	9c 01       	movw	r18, r24
    359c:	ad 01       	movw	r20, r26
    359e:	c6 01       	movw	r24, r12
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	fc 01       	movw	r30, r24
    35aa:	ee 5a       	subi	r30, 0xAE	; 174
    35ac:	fc 4f       	sbci	r31, 0xFC	; 252
    35ae:	20 83       	st	Z, r18
    35b0:	31 83       	std	Z+1, r19	; 0x01
    35b2:	42 83       	std	Z+2, r20	; 0x02
    35b4:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    35b6:	28 85       	ldd	r18, Y+8	; 0x08
    35b8:	ce 01       	movw	r24, r28
    35ba:	04 96       	adiw	r24, 0x04	; 4
    35bc:	62 2f       	mov	r22, r18
    35be:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    35c2:	59 c1       	rjmp	.+690    	; 0x3876 <Calc_Postfix+0x438>
                        break;
                    case '-':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] - GlobalOperands[op2 - 'A'];
    35c4:	88 85       	ldd	r24, Y+8	; 0x08
    35c6:	88 2f       	mov	r24, r24
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	0f 2e       	mov	r0, r31
    35cc:	ff eb       	ldi	r31, 0xBF	; 191
    35ce:	cf 2e       	mov	r12, r31
    35d0:	ff ef       	ldi	r31, 0xFF	; 255
    35d2:	df 2e       	mov	r13, r31
    35d4:	f0 2d       	mov	r31, r0
    35d6:	c8 0e       	add	r12, r24
    35d8:	d9 1e       	adc	r13, r25
    35da:	88 85       	ldd	r24, Y+8	; 0x08
    35dc:	88 2f       	mov	r24, r24
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	81 54       	subi	r24, 0x41	; 65
    35e2:	90 40       	sbci	r25, 0x00	; 0
    35e4:	88 0f       	add	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	fc 01       	movw	r30, r24
    35ee:	ee 5a       	subi	r30, 0xAE	; 174
    35f0:	fc 4f       	sbci	r31, 0xFC	; 252
    35f2:	e0 80       	ld	r14, Z
    35f4:	f1 80       	ldd	r15, Z+1	; 0x01
    35f6:	02 81       	ldd	r16, Z+2	; 0x02
    35f8:	13 81       	ldd	r17, Z+3	; 0x03
    35fa:	89 85       	ldd	r24, Y+9	; 0x09
    35fc:	88 2f       	mov	r24, r24
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	81 54       	subi	r24, 0x41	; 65
    3602:	90 40       	sbci	r25, 0x00	; 0
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	fc 01       	movw	r30, r24
    360e:	ee 5a       	subi	r30, 0xAE	; 174
    3610:	fc 4f       	sbci	r31, 0xFC	; 252
    3612:	20 81       	ld	r18, Z
    3614:	31 81       	ldd	r19, Z+1	; 0x01
    3616:	42 81       	ldd	r20, Z+2	; 0x02
    3618:	53 81       	ldd	r21, Z+3	; 0x03
    361a:	c8 01       	movw	r24, r16
    361c:	b7 01       	movw	r22, r14
    361e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	9c 01       	movw	r18, r24
    3628:	ad 01       	movw	r20, r26
    362a:	c6 01       	movw	r24, r12
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	fc 01       	movw	r30, r24
    3636:	ee 5a       	subi	r30, 0xAE	; 174
    3638:	fc 4f       	sbci	r31, 0xFC	; 252
    363a:	20 83       	st	Z, r18
    363c:	31 83       	std	Z+1, r19	; 0x01
    363e:	42 83       	std	Z+2, r20	; 0x02
    3640:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    3642:	28 85       	ldd	r18, Y+8	; 0x08
    3644:	ce 01       	movw	r24, r28
    3646:	04 96       	adiw	r24, 0x04	; 4
    3648:	62 2f       	mov	r22, r18
    364a:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    364e:	13 c1       	rjmp	.+550    	; 0x3876 <Calc_Postfix+0x438>
                        break;
                    case '*':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] * GlobalOperands[op2 - 'A'];
    3650:	88 85       	ldd	r24, Y+8	; 0x08
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0f 2e       	mov	r0, r31
    3658:	ff eb       	ldi	r31, 0xBF	; 191
    365a:	cf 2e       	mov	r12, r31
    365c:	ff ef       	ldi	r31, 0xFF	; 255
    365e:	df 2e       	mov	r13, r31
    3660:	f0 2d       	mov	r31, r0
    3662:	c8 0e       	add	r12, r24
    3664:	d9 1e       	adc	r13, r25
    3666:	88 85       	ldd	r24, Y+8	; 0x08
    3668:	88 2f       	mov	r24, r24
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	81 54       	subi	r24, 0x41	; 65
    366e:	90 40       	sbci	r25, 0x00	; 0
    3670:	88 0f       	add	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	88 0f       	add	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	fc 01       	movw	r30, r24
    367a:	ee 5a       	subi	r30, 0xAE	; 174
    367c:	fc 4f       	sbci	r31, 0xFC	; 252
    367e:	e0 80       	ld	r14, Z
    3680:	f1 80       	ldd	r15, Z+1	; 0x01
    3682:	02 81       	ldd	r16, Z+2	; 0x02
    3684:	13 81       	ldd	r17, Z+3	; 0x03
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	88 2f       	mov	r24, r24
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	81 54       	subi	r24, 0x41	; 65
    368e:	90 40       	sbci	r25, 0x00	; 0
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	fc 01       	movw	r30, r24
    369a:	ee 5a       	subi	r30, 0xAE	; 174
    369c:	fc 4f       	sbci	r31, 0xFC	; 252
    369e:	20 81       	ld	r18, Z
    36a0:	31 81       	ldd	r19, Z+1	; 0x01
    36a2:	42 81       	ldd	r20, Z+2	; 0x02
    36a4:	53 81       	ldd	r21, Z+3	; 0x03
    36a6:	c8 01       	movw	r24, r16
    36a8:	b7 01       	movw	r22, r14
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9c 01       	movw	r18, r24
    36b4:	ad 01       	movw	r20, r26
    36b6:	c6 01       	movw	r24, r12
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	fc 01       	movw	r30, r24
    36c2:	ee 5a       	subi	r30, 0xAE	; 174
    36c4:	fc 4f       	sbci	r31, 0xFC	; 252
    36c6:	20 83       	st	Z, r18
    36c8:	31 83       	std	Z+1, r19	; 0x01
    36ca:	42 83       	std	Z+2, r20	; 0x02
    36cc:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    36ce:	28 85       	ldd	r18, Y+8	; 0x08
    36d0:	ce 01       	movw	r24, r28
    36d2:	04 96       	adiw	r24, 0x04	; 4
    36d4:	62 2f       	mov	r22, r18
    36d6:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    36da:	cd c0       	rjmp	.+410    	; 0x3876 <Calc_Postfix+0x438>
                        break;
                    case '/':
                    	if(Float_Abs(GlobalOperands[op2 - 'A']) < EPS) return ES_MATH_ERROR;
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	81 54       	subi	r24, 0x41	; 65
    36e4:	90 40       	sbci	r25, 0x00	; 0
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	fc 01       	movw	r30, r24
    36f0:	ee 5a       	subi	r30, 0xAE	; 174
    36f2:	fc 4f       	sbci	r31, 0xFC	; 252
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	a2 81       	ldd	r26, Z+2	; 0x02
    36fa:	b3 81       	ldd	r27, Z+3	; 0x03
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 93 0c 	call	0x1926	; 0x1926 <Float_Abs>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	2c ea       	ldi	r18, 0xAC	; 172
    370e:	35 ec       	ldi	r19, 0xC5	; 197
    3710:	47 e2       	ldi	r20, 0x27	; 39
    3712:	57 e3       	ldi	r21, 0x37	; 55
    3714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3718:	88 23       	and	r24, r24
    371a:	1c f4       	brge	.+6      	; 0x3722 <Calc_Postfix+0x2e4>
    371c:	35 e0       	ldi	r19, 0x05	; 5
    371e:	3c 87       	std	Y+12, r19	; 0x0c
    3720:	d4 c0       	rjmp	.+424    	; 0x38ca <Calc_Postfix+0x48c>
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] / GlobalOperands[op2 - 'A'];
    3722:	88 85       	ldd	r24, Y+8	; 0x08
    3724:	88 2f       	mov	r24, r24
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	0f 2e       	mov	r0, r31
    372a:	ff eb       	ldi	r31, 0xBF	; 191
    372c:	cf 2e       	mov	r12, r31
    372e:	ff ef       	ldi	r31, 0xFF	; 255
    3730:	df 2e       	mov	r13, r31
    3732:	f0 2d       	mov	r31, r0
    3734:	c8 0e       	add	r12, r24
    3736:	d9 1e       	adc	r13, r25
    3738:	88 85       	ldd	r24, Y+8	; 0x08
    373a:	88 2f       	mov	r24, r24
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	81 54       	subi	r24, 0x41	; 65
    3740:	90 40       	sbci	r25, 0x00	; 0
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	fc 01       	movw	r30, r24
    374c:	ee 5a       	subi	r30, 0xAE	; 174
    374e:	fc 4f       	sbci	r31, 0xFC	; 252
    3750:	e0 80       	ld	r14, Z
    3752:	f1 80       	ldd	r15, Z+1	; 0x01
    3754:	02 81       	ldd	r16, Z+2	; 0x02
    3756:	13 81       	ldd	r17, Z+3	; 0x03
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	81 54       	subi	r24, 0x41	; 65
    3760:	90 40       	sbci	r25, 0x00	; 0
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	fc 01       	movw	r30, r24
    376c:	ee 5a       	subi	r30, 0xAE	; 174
    376e:	fc 4f       	sbci	r31, 0xFC	; 252
    3770:	20 81       	ld	r18, Z
    3772:	31 81       	ldd	r19, Z+1	; 0x01
    3774:	42 81       	ldd	r20, Z+2	; 0x02
    3776:	53 81       	ldd	r21, Z+3	; 0x03
    3778:	c8 01       	movw	r24, r16
    377a:	b7 01       	movw	r22, r14
    377c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	9c 01       	movw	r18, r24
    3786:	ad 01       	movw	r20, r26
    3788:	c6 01       	movw	r24, r12
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	fc 01       	movw	r30, r24
    3794:	ee 5a       	subi	r30, 0xAE	; 174
    3796:	fc 4f       	sbci	r31, 0xFC	; 252
    3798:	20 83       	st	Z, r18
    379a:	31 83       	std	Z+1, r19	; 0x01
    379c:	42 83       	std	Z+2, r20	; 0x02
    379e:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    37a0:	28 85       	ldd	r18, Y+8	; 0x08
    37a2:	ce 01       	movw	r24, r28
    37a4:	04 96       	adiw	r24, 0x04	; 4
    37a6:	62 2f       	mov	r22, r18
    37a8:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    37ac:	64 c0       	rjmp	.+200    	; 0x3876 <Calc_Postfix+0x438>
                        break;
                    case '^':
                    	if(GlobalOperands[op2 - 'A'] > 40) return ES_OVERFLOW;
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	81 54       	subi	r24, 0x41	; 65
    37b6:	90 40       	sbci	r25, 0x00	; 0
    37b8:	88 0f       	add	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	fc 01       	movw	r30, r24
    37c2:	ee 5a       	subi	r30, 0xAE	; 174
    37c4:	fc 4f       	sbci	r31, 0xFC	; 252
    37c6:	80 81       	ld	r24, Z
    37c8:	91 81       	ldd	r25, Z+1	; 0x01
    37ca:	a2 81       	ldd	r26, Z+2	; 0x02
    37cc:	b3 81       	ldd	r27, Z+3	; 0x03
    37ce:	bc 01       	movw	r22, r24
    37d0:	cd 01       	movw	r24, r26
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e2       	ldi	r20, 0x20	; 32
    37d8:	52 e4       	ldi	r21, 0x42	; 66
    37da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37de:	18 16       	cp	r1, r24
    37e0:	1c f4       	brge	.+6      	; 0x37e8 <Calc_Postfix+0x3aa>
    37e2:	86 e0       	ldi	r24, 0x06	; 6
    37e4:	8c 87       	std	Y+12, r24	; 0x0c
    37e6:	71 c0       	rjmp	.+226    	; 0x38ca <Calc_Postfix+0x48c>
                        GlobalOperands[op1 - 'A'] =  power(GlobalOperands[op1 - 'A'],GlobalOperands[op2 - 'A']) ;
    37e8:	88 85       	ldd	r24, Y+8	; 0x08
    37ea:	88 2f       	mov	r24, r24
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0f 2e       	mov	r0, r31
    37f0:	ff eb       	ldi	r31, 0xBF	; 191
    37f2:	cf 2e       	mov	r12, r31
    37f4:	ff ef       	ldi	r31, 0xFF	; 255
    37f6:	df 2e       	mov	r13, r31
    37f8:	f0 2d       	mov	r31, r0
    37fa:	c8 0e       	add	r12, r24
    37fc:	d9 1e       	adc	r13, r25
    37fe:	88 85       	ldd	r24, Y+8	; 0x08
    3800:	88 2f       	mov	r24, r24
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	81 54       	subi	r24, 0x41	; 65
    3806:	90 40       	sbci	r25, 0x00	; 0
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	fc 01       	movw	r30, r24
    3812:	ee 5a       	subi	r30, 0xAE	; 174
    3814:	fc 4f       	sbci	r31, 0xFC	; 252
    3816:	e0 80       	ld	r14, Z
    3818:	f1 80       	ldd	r15, Z+1	; 0x01
    381a:	02 81       	ldd	r16, Z+2	; 0x02
    381c:	13 81       	ldd	r17, Z+3	; 0x03
    381e:	89 85       	ldd	r24, Y+9	; 0x09
    3820:	88 2f       	mov	r24, r24
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	81 54       	subi	r24, 0x41	; 65
    3826:	90 40       	sbci	r25, 0x00	; 0
    3828:	88 0f       	add	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	fc 01       	movw	r30, r24
    3832:	ee 5a       	subi	r30, 0xAE	; 174
    3834:	fc 4f       	sbci	r31, 0xFC	; 252
    3836:	20 81       	ld	r18, Z
    3838:	31 81       	ldd	r19, Z+1	; 0x01
    383a:	42 81       	ldd	r20, Z+2	; 0x02
    383c:	53 81       	ldd	r21, Z+3	; 0x03
    383e:	c8 01       	movw	r24, r16
    3840:	b7 01       	movw	r22, r14
    3842:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <power>
    3846:	9b 01       	movw	r18, r22
    3848:	ac 01       	movw	r20, r24
    384a:	c6 01       	movw	r24, r12
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	88 0f       	add	r24, r24
    3852:	99 1f       	adc	r25, r25
    3854:	fc 01       	movw	r30, r24
    3856:	ee 5a       	subi	r30, 0xAE	; 174
    3858:	fc 4f       	sbci	r31, 0xFC	; 252
    385a:	20 83       	st	Z, r18
    385c:	31 83       	std	Z+1, r19	; 0x01
    385e:	42 83       	std	Z+2, r20	; 0x02
    3860:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    3862:	28 85       	ldd	r18, Y+8	; 0x08
    3864:	ce 01       	movw	r24, r28
    3866:	04 96       	adiw	r24, 0x04	; 4
    3868:	62 2f       	mov	r22, r18
    386a:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    386e:	03 c0       	rjmp	.+6      	; 0x3876 <Calc_Postfix+0x438>
                    default:
                        break;
                }
            }
            else{
                return ES_NOK;
    3870:	91 e0       	ldi	r25, 0x01	; 1
    3872:	9c 87       	std	Y+12, r25	; 0x0c
    3874:	2a c0       	rjmp	.+84     	; 0x38ca <Calc_Postfix+0x48c>

ES Calc_Postfix(double * Copy_pDoubleResult){
    ES Local_enuErrorState = ES_NOK;
    Stack st;
    Initialize_Stack(&st);
    for (int i = 0; GlobalPostfixExpression[i]; ++i) {
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	01 96       	adiw	r24, 0x01	; 1
    387c:	9a 83       	std	Y+2, r25	; 0x02
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	fc 01       	movw	r30, r24
    3886:	e6 5d       	subi	r30, 0xD6	; 214
    3888:	fc 4f       	sbci	r31, 0xFC	; 252
    388a:	80 81       	ld	r24, Z
    388c:	88 23       	and	r24, r24
    388e:	09 f0       	breq	.+2      	; 0x3892 <Calc_Postfix+0x454>
    3890:	f1 cd       	rjmp	.-1054   	; 0x3474 <Calc_Postfix+0x36>
            else{
                return ES_NOK;
            }
        }
    }
    *Copy_pDoubleResult = GlobalOperands[Top(&st) - 'A'];
    3892:	ce 01       	movw	r24, r28
    3894:	04 96       	adiw	r24, 0x04	; 4
    3896:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <Top>
    389a:	88 2f       	mov	r24, r24
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	81 54       	subi	r24, 0x41	; 65
    38a0:	90 40       	sbci	r25, 0x00	; 0
    38a2:	88 0f       	add	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	fc 01       	movw	r30, r24
    38ac:	ee 5a       	subi	r30, 0xAE	; 174
    38ae:	fc 4f       	sbci	r31, 0xFC	; 252
    38b0:	80 81       	ld	r24, Z
    38b2:	91 81       	ldd	r25, Z+1	; 0x01
    38b4:	a2 81       	ldd	r26, Z+2	; 0x02
    38b6:	b3 81       	ldd	r27, Z+3	; 0x03
    38b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    38ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    38bc:	80 83       	st	Z, r24
    38be:	91 83       	std	Z+1, r25	; 0x01
    38c0:	a2 83       	std	Z+2, r26	; 0x02
    38c2:	b3 83       	std	Z+3, r27	; 0x03

    Local_enuErrorState = ES_OK;
    38c4:	1b 82       	std	Y+3, r1	; 0x03
    return Local_enuErrorState;
    38c6:	2b 81       	ldd	r18, Y+3	; 0x03
    38c8:	2c 87       	std	Y+12, r18	; 0x0c
    38ca:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    38cc:	2e 96       	adiw	r28, 0x0e	; 14
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	1f 91       	pop	r17
    38de:	0f 91       	pop	r16
    38e0:	ff 90       	pop	r15
    38e2:	ef 90       	pop	r14
    38e4:	df 90       	pop	r13
    38e6:	cf 90       	pop	r12
    38e8:	08 95       	ret

000038ea <Is_Operator>:
u8 Is_Operator(char character){
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <Is_Operator+0x6>
    38f0:	0f 92       	push	r0
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	89 83       	std	Y+1, r24	; 0x01
	return (character == '+' || character == '-' || character == '*' || character == '/' || character == '^');
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	8b 32       	cpi	r24, 0x2B	; 43
    38fc:	61 f0       	breq	.+24     	; 0x3916 <Is_Operator+0x2c>
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
    3900:	8d 32       	cpi	r24, 0x2D	; 45
    3902:	49 f0       	breq	.+18     	; 0x3916 <Is_Operator+0x2c>
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	8a 32       	cpi	r24, 0x2A	; 42
    3908:	31 f0       	breq	.+12     	; 0x3916 <Is_Operator+0x2c>
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	8f 32       	cpi	r24, 0x2F	; 47
    390e:	19 f0       	breq	.+6      	; 0x3916 <Is_Operator+0x2c>
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	8e 35       	cpi	r24, 0x5E	; 94
    3914:	29 f4       	brne	.+10     	; 0x3920 <Is_Operator+0x36>
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9b 83       	std	Y+3, r25	; 0x03
    391c:	8a 83       	std	Y+2, r24	; 0x02
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <Is_Operator+0x3a>
    3920:	1b 82       	std	Y+3, r1	; 0x03
    3922:	1a 82       	std	Y+2, r1	; 0x02
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	08 95       	ret

00003932 <Is_Open_Brackets>:

u8 Is_Open_Brackets(char character){
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	00 d0       	rcall	.+0      	; 0x3938 <Is_Open_Brackets+0x6>
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	89 83       	std	Y+1, r24	; 0x01
	return character == '(';
    393e:	1a 82       	std	Y+2, r1	; 0x02
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	88 32       	cpi	r24, 0x28	; 40
    3944:	11 f4       	brne	.+4      	; 0x394a <Is_Open_Brackets+0x18>
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	8a 83       	std	Y+2, r24	; 0x02
    394a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	08 95       	ret

00003956 <Is_Close_Brackets>:

u8 Is_Close_Brackets(char character){
    3956:	df 93       	push	r29
    3958:	cf 93       	push	r28
    395a:	00 d0       	rcall	.+0      	; 0x395c <Is_Close_Brackets+0x6>
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
    3960:	89 83       	std	Y+1, r24	; 0x01
	return character == ')';
    3962:	1a 82       	std	Y+2, r1	; 0x02
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	89 32       	cpi	r24, 0x29	; 41
    3968:	11 f4       	brne	.+4      	; 0x396e <Is_Close_Brackets+0x18>
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	8a 83       	std	Y+2, r24	; 0x02
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	08 95       	ret

0000397a <Is_Number>:

u8 Is_Number(char character){
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	00 d0       	rcall	.+0      	; 0x3980 <Is_Number+0x6>
    3980:	0f 92       	push	r0
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	89 83       	std	Y+1, r24	; 0x01
	return character >= '0' && character <= '9';
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	80 33       	cpi	r24, 0x30	; 48
    398c:	40 f0       	brcs	.+16     	; 0x399e <Is_Number+0x24>
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	8a 33       	cpi	r24, 0x3A	; 58
    3992:	28 f4       	brcc	.+10     	; 0x399e <Is_Number+0x24>
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9b 83       	std	Y+3, r25	; 0x03
    399a:	8a 83       	std	Y+2, r24	; 0x02
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <Is_Number+0x28>
    399e:	1b 82       	std	Y+3, r1	; 0x03
    39a0:	1a 82       	std	Y+2, r1	; 0x02
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <Validate_Expression>:

ES Validate_Expression(){
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	63 97       	sbiw	r28, 0x13	; 19
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
	double Local_s64Operand = 0, floatweight = 0.1;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 e0       	ldi	r26, 0x00	; 0
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	8a 87       	std	Y+10, r24	; 0x0a
    39ce:	9b 87       	std	Y+11, r25	; 0x0b
    39d0:	ac 87       	std	Y+12, r26	; 0x0c
    39d2:	bd 87       	std	Y+13, r27	; 0x0d
    39d4:	8d ec       	ldi	r24, 0xCD	; 205
    39d6:	9c ec       	ldi	r25, 0xCC	; 204
    39d8:	ac ec       	ldi	r26, 0xCC	; 204
    39da:	bd e3       	ldi	r27, 0x3D	; 61
    39dc:	8e 83       	std	Y+6, r24	; 0x06
    39de:	9f 83       	std	Y+7, r25	; 0x07
    39e0:	a8 87       	std	Y+8, r26	; 0x08
    39e2:	b9 87       	std	Y+9, r27	; 0x09
	u8 IsFloat = 0, IsNegative = 0, ShadedExpressionIdx = 0, OperandsArrIdx = 0;
    39e4:	1d 82       	std	Y+5, r1	; 0x05
    39e6:	1c 82       	std	Y+4, r1	; 0x04
    39e8:	1b 82       	std	Y+3, r1	; 0x03
    39ea:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_ExpIt;
	for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++){
    39ec:	19 82       	std	Y+1, r1	; 0x01
    39ee:	52 c4       	rjmp	.+2212   	; 0x4294 <Validate_Expression+0x8e4>
		if(GlobalInputExpression[Local_ExpIt] == '-' || GlobalInputExpression[Local_ExpIt] == '+' ){
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	88 2f       	mov	r24, r24
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	fc 01       	movw	r30, r24
    39f8:	ea 54       	subi	r30, 0x4A	; 74
    39fa:	fc 4f       	sbci	r31, 0xFC	; 252
    39fc:	80 81       	ld	r24, Z
    39fe:	8d 32       	cpi	r24, 0x2D	; 45
    3a00:	51 f0       	breq	.+20     	; 0x3a16 <Validate_Expression+0x66>
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	88 2f       	mov	r24, r24
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	fc 01       	movw	r30, r24
    3a0a:	ea 54       	subi	r30, 0x4A	; 74
    3a0c:	fc 4f       	sbci	r31, 0xFC	; 252
    3a0e:	80 81       	ld	r24, Z
    3a10:	8b 32       	cpi	r24, 0x2B	; 43
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <Validate_Expression+0x66>
    3a14:	99 c0       	rjmp	.+306    	; 0x3b48 <Validate_Expression+0x198>
			if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1]) || Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	88 23       	and	r24, r24
    3a1a:	c1 f0       	breq	.+48     	; 0x3a4c <Validate_Expression+0x9c>
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	88 2f       	mov	r24, r24
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	fc 01       	movw	r30, r24
    3a26:	ea 54       	subi	r30, 0x4A	; 74
    3a28:	fc 4f       	sbci	r31, 0xFC	; 252
    3a2a:	80 81       	ld	r24, Z
    3a2c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    3a30:	88 23       	and	r24, r24
    3a32:	61 f4       	brne	.+24     	; 0x3a4c <Validate_Expression+0x9c>
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	88 2f       	mov	r24, r24
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	ea 54       	subi	r30, 0x4A	; 74
    3a40:	fc 4f       	sbci	r31, 0xFC	; 252
    3a42:	80 81       	ld	r24, Z
    3a44:	0e 94 99 1c 	call	0x3932	; 0x3932 <Is_Open_Brackets>
    3a48:	88 23       	and	r24, r24
    3a4a:	79 f0       	breq	.+30     	; 0x3a6a <Validate_Expression+0xba>
				if(GlobalInputExpression[Local_ExpIt] == '-') IsNegative ^= 1;
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	88 2f       	mov	r24, r24
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	fc 01       	movw	r30, r24
    3a54:	ea 54       	subi	r30, 0x4A	; 74
    3a56:	fc 4f       	sbci	r31, 0xFC	; 252
    3a58:	80 81       	ld	r24, Z
    3a5a:	8d 32       	cpi	r24, 0x2D	; 45
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <Validate_Expression+0xb0>
    3a5e:	17 c4       	rjmp	.+2094   	; 0x428e <Validate_Expression+0x8de>
    3a60:	8c 81       	ldd	r24, Y+4	; 0x04
    3a62:	91 e0       	ldi	r25, 0x01	; 1
    3a64:	89 27       	eor	r24, r25
    3a66:	8c 83       	std	Y+4, r24	; 0x04
    3a68:	12 c4       	rjmp	.+2084   	; 0x428e <Validate_Expression+0x8de>
			}
			else {
                if(!Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	88 2f       	mov	r24, r24
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	fc 01       	movw	r30, r24
    3a74:	ea 54       	subi	r30, 0x4A	; 74
    3a76:	fc 4f       	sbci	r31, 0xFC	; 252
    3a78:	80 81       	ld	r24, Z
    3a7a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    3a7e:	88 23       	and	r24, r24
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <Validate_Expression+0xd4>
    3a82:	50 c0       	rjmp	.+160    	; 0x3b24 <Validate_Expression+0x174>
                    GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3a84:	8b 81       	ldd	r24, Y+3	; 0x03
    3a86:	28 2f       	mov	r18, r24
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8c:	8f 5b       	subi	r24, 0xBF	; 191
    3a8e:	f9 01       	movw	r30, r18
    3a90:	ee 55       	subi	r30, 0x5E	; 94
    3a92:	fc 4f       	sbci	r31, 0xFC	; 252
    3a94:	80 83       	st	Z, r24
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	8f 5f       	subi	r24, 0xFF	; 255
    3a9a:	8b 83       	std	Y+3, r24	; 0x03
                    if(IsNegative){
    3a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9e:	88 23       	and	r24, r24
    3aa0:	d1 f0       	breq	.+52     	; 0x3ad6 <Validate_Expression+0x126>
                        GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa4:	68 2f       	mov	r22, r24
    3aa6:	70 e0       	ldi	r23, 0x00	; 0
    3aa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aaa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aac:	ac 85       	ldd	r26, Y+12	; 0x0c
    3aae:	bd 85       	ldd	r27, Y+13	; 0x0d
    3ab0:	9c 01       	movw	r18, r24
    3ab2:	ad 01       	movw	r20, r26
    3ab4:	50 58       	subi	r21, 0x80	; 128
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	88 0f       	add	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	ee 5a       	subi	r30, 0xAE	; 174
    3ac4:	fc 4f       	sbci	r31, 0xFC	; 252
    3ac6:	20 83       	st	Z, r18
    3ac8:	31 83       	std	Z+1, r19	; 0x01
    3aca:	42 83       	std	Z+2, r20	; 0x02
    3acc:	53 83       	std	Z+3, r21	; 0x03
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	8f 5f       	subi	r24, 0xFF	; 255
    3ad2:	8a 83       	std	Y+2, r24	; 0x02
    3ad4:	15 c0       	rjmp	.+42     	; 0x3b00 <Validate_Expression+0x150>
                    }
                    else {
                        GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	ee 5a       	subi	r30, 0xAE	; 174
    3ae8:	fc 4f       	sbci	r31, 0xFC	; 252
    3aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aee:	ac 85       	ldd	r26, Y+12	; 0x0c
    3af0:	bd 85       	ldd	r27, Y+13	; 0x0d
    3af2:	80 83       	st	Z, r24
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	a2 83       	std	Z+2, r26	; 0x02
    3af8:	b3 83       	std	Z+3, r27	; 0x03
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	8f 5f       	subi	r24, 0xFF	; 255
    3afe:	8a 83       	std	Y+2, r24	; 0x02
                    }

                    //For New Number
                    IsFloat = 0, IsNegative = 0;
    3b00:	1d 82       	std	Y+5, r1	; 0x05
    3b02:	1c 82       	std	Y+4, r1	; 0x04
                    Local_s64Operand = 0,floatweight = 0.1;
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a0 e0       	ldi	r26, 0x00	; 0
    3b0a:	b0 e0       	ldi	r27, 0x00	; 0
    3b0c:	8a 87       	std	Y+10, r24	; 0x0a
    3b0e:	9b 87       	std	Y+11, r25	; 0x0b
    3b10:	ac 87       	std	Y+12, r26	; 0x0c
    3b12:	bd 87       	std	Y+13, r27	; 0x0d
    3b14:	8d ec       	ldi	r24, 0xCD	; 205
    3b16:	9c ec       	ldi	r25, 0xCC	; 204
    3b18:	ac ec       	ldi	r26, 0xCC	; 204
    3b1a:	bd e3       	ldi	r27, 0x3D	; 61
    3b1c:	8e 83       	std	Y+6, r24	; 0x06
    3b1e:	9f 83       	std	Y+7, r25	; 0x07
    3b20:	a8 87       	std	Y+8, r26	; 0x08
    3b22:	b9 87       	std	Y+9, r27	; 0x09
                }
                GlobalShaddedExpression[ShadedExpressionIdx++] = GlobalInputExpression[Local_ExpIt];
    3b24:	8b 81       	ldd	r24, Y+3	; 0x03
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	88 2f       	mov	r24, r24
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	fc 01       	movw	r30, r24
    3b32:	ea 54       	subi	r30, 0x4A	; 74
    3b34:	fc 4f       	sbci	r31, 0xFC	; 252
    3b36:	80 81       	ld	r24, Z
    3b38:	f9 01       	movw	r30, r18
    3b3a:	ee 55       	subi	r30, 0x5E	; 94
    3b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    3b3e:	80 83       	st	Z, r24
    3b40:	8b 81       	ldd	r24, Y+3	; 0x03
    3b42:	8f 5f       	subi	r24, 0xFF	; 255
    3b44:	8b 83       	std	Y+3, r24	; 0x03
    3b46:	a3 c3       	rjmp	.+1862   	; 0x428e <Validate_Expression+0x8de>
            }
		}
		else if(GlobalInputExpression[Local_ExpIt] == '*' || GlobalInputExpression[Local_ExpIt] == '/'){
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	88 2f       	mov	r24, r24
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	fc 01       	movw	r30, r24
    3b50:	ea 54       	subi	r30, 0x4A	; 74
    3b52:	fc 4f       	sbci	r31, 0xFC	; 252
    3b54:	80 81       	ld	r24, Z
    3b56:	8a 32       	cpi	r24, 0x2A	; 42
    3b58:	51 f0       	breq	.+20     	; 0x3b6e <Validate_Expression+0x1be>
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	88 2f       	mov	r24, r24
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	fc 01       	movw	r30, r24
    3b62:	ea 54       	subi	r30, 0x4A	; 74
    3b64:	fc 4f       	sbci	r31, 0xFC	; 252
    3b66:	80 81       	ld	r24, Z
    3b68:	8f 32       	cpi	r24, 0x2F	; 47
    3b6a:	09 f0       	breq	.+2      	; 0x3b6e <Validate_Expression+0x1be>
    3b6c:	8d c0       	rjmp	.+282    	; 0x3c88 <Validate_Expression+0x2d8>
			if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1]) ||  Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	88 23       	and	r24, r24
    3b72:	c1 f0       	breq	.+48     	; 0x3ba4 <Validate_Expression+0x1f4>
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	88 2f       	mov	r24, r24
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	ea 54       	subi	r30, 0x4A	; 74
    3b80:	fc 4f       	sbci	r31, 0xFC	; 252
    3b82:	80 81       	ld	r24, Z
    3b84:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    3b88:	88 23       	and	r24, r24
    3b8a:	61 f4       	brne	.+24     	; 0x3ba4 <Validate_Expression+0x1f4>
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	88 2f       	mov	r24, r24
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	fc 01       	movw	r30, r24
    3b96:	ea 54       	subi	r30, 0x4A	; 74
    3b98:	fc 4f       	sbci	r31, 0xFC	; 252
    3b9a:	80 81       	ld	r24, Z
    3b9c:	0e 94 99 1c 	call	0x3932	; 0x3932 <Is_Open_Brackets>
    3ba0:	88 23       	and	r24, r24
    3ba2:	19 f0       	breq	.+6      	; 0x3baa <Validate_Expression+0x1fa>
				return ES_SYNTAX_ERROR;
    3ba4:	84 e0       	ldi	r24, 0x04	; 4
    3ba6:	8b 8b       	std	Y+19, r24	; 0x13
    3ba8:	29 c4       	rjmp	.+2130   	; 0x43fc <Validate_Expression+0xa4c>
			}
            else{
                if(!Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3baa:	89 81       	ldd	r24, Y+1	; 0x01
    3bac:	88 2f       	mov	r24, r24
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	ea 54       	subi	r30, 0x4A	; 74
    3bb6:	fc 4f       	sbci	r31, 0xFC	; 252
    3bb8:	80 81       	ld	r24, Z
    3bba:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    3bbe:	88 23       	and	r24, r24
    3bc0:	09 f0       	breq	.+2      	; 0x3bc4 <Validate_Expression+0x214>
    3bc2:	50 c0       	rjmp	.+160    	; 0x3c64 <Validate_Expression+0x2b4>
                    GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	8a 81       	ldd	r24, Y+2	; 0x02
    3bcc:	8f 5b       	subi	r24, 0xBF	; 191
    3bce:	f9 01       	movw	r30, r18
    3bd0:	ee 55       	subi	r30, 0x5E	; 94
    3bd2:	fc 4f       	sbci	r31, 0xFC	; 252
    3bd4:	80 83       	st	Z, r24
    3bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd8:	8f 5f       	subi	r24, 0xFF	; 255
    3bda:	8b 83       	std	Y+3, r24	; 0x03
                    if(IsNegative){
    3bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bde:	88 23       	and	r24, r24
    3be0:	d1 f0       	breq	.+52     	; 0x3c16 <Validate_Expression+0x266>
                        GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	68 2f       	mov	r22, r24
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bea:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bec:	ac 85       	ldd	r26, Y+12	; 0x0c
    3bee:	bd 85       	ldd	r27, Y+13	; 0x0d
    3bf0:	9c 01       	movw	r18, r24
    3bf2:	ad 01       	movw	r20, r26
    3bf4:	50 58       	subi	r21, 0x80	; 128
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	fc 01       	movw	r30, r24
    3c02:	ee 5a       	subi	r30, 0xAE	; 174
    3c04:	fc 4f       	sbci	r31, 0xFC	; 252
    3c06:	20 83       	st	Z, r18
    3c08:	31 83       	std	Z+1, r19	; 0x01
    3c0a:	42 83       	std	Z+2, r20	; 0x02
    3c0c:	53 83       	std	Z+3, r21	; 0x03
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c10:	8f 5f       	subi	r24, 0xFF	; 255
    3c12:	8a 83       	std	Y+2, r24	; 0x02
    3c14:	15 c0       	rjmp	.+42     	; 0x3c40 <Validate_Expression+0x290>
                    }
                    else {
                        GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3c16:	8a 81       	ldd	r24, Y+2	; 0x02
    3c18:	88 2f       	mov	r24, r24
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	88 0f       	add	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	88 0f       	add	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	fc 01       	movw	r30, r24
    3c26:	ee 5a       	subi	r30, 0xAE	; 174
    3c28:	fc 4f       	sbci	r31, 0xFC	; 252
    3c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c2e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3c30:	bd 85       	ldd	r27, Y+13	; 0x0d
    3c32:	80 83       	st	Z, r24
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	a2 83       	std	Z+2, r26	; 0x02
    3c38:	b3 83       	std	Z+3, r27	; 0x03
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	8f 5f       	subi	r24, 0xFF	; 255
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
                    }

                    //For New Number
                    IsFloat = 0, IsNegative = 0;
    3c40:	1d 82       	std	Y+5, r1	; 0x05
    3c42:	1c 82       	std	Y+4, r1	; 0x04
                    Local_s64Operand = 0,floatweight = 0.1;
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	a0 e0       	ldi	r26, 0x00	; 0
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	8a 87       	std	Y+10, r24	; 0x0a
    3c4e:	9b 87       	std	Y+11, r25	; 0x0b
    3c50:	ac 87       	std	Y+12, r26	; 0x0c
    3c52:	bd 87       	std	Y+13, r27	; 0x0d
    3c54:	8d ec       	ldi	r24, 0xCD	; 205
    3c56:	9c ec       	ldi	r25, 0xCC	; 204
    3c58:	ac ec       	ldi	r26, 0xCC	; 204
    3c5a:	bd e3       	ldi	r27, 0x3D	; 61
    3c5c:	8e 83       	std	Y+6, r24	; 0x06
    3c5e:	9f 83       	std	Y+7, r25	; 0x07
    3c60:	a8 87       	std	Y+8, r26	; 0x08
    3c62:	b9 87       	std	Y+9, r27	; 0x09
                }
                GlobalShaddedExpression[ShadedExpressionIdx++] = GlobalInputExpression[Local_ExpIt];
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	fc 01       	movw	r30, r24
    3c72:	ea 54       	subi	r30, 0x4A	; 74
    3c74:	fc 4f       	sbci	r31, 0xFC	; 252
    3c76:	80 81       	ld	r24, Z
    3c78:	f9 01       	movw	r30, r18
    3c7a:	ee 55       	subi	r30, 0x5E	; 94
    3c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    3c7e:	80 83       	st	Z, r24
    3c80:	8b 81       	ldd	r24, Y+3	; 0x03
    3c82:	8f 5f       	subi	r24, 0xFF	; 255
    3c84:	8b 83       	std	Y+3, r24	; 0x03
    3c86:	03 c3       	rjmp	.+1542   	; 0x428e <Validate_Expression+0x8de>

            }

		}
		else if(Is_Operator(GlobalInputExpression[Local_ExpIt])){
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	88 2f       	mov	r24, r24
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	fc 01       	movw	r30, r24
    3c90:	ea 54       	subi	r30, 0x4A	; 74
    3c92:	fc 4f       	sbci	r31, 0xFC	; 252
    3c94:	80 81       	ld	r24, Z
    3c96:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    3c9a:	88 23       	and	r24, r24
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <Validate_Expression+0x2f0>
    3c9e:	81 c0       	rjmp	.+258    	; 0x3da2 <Validate_Expression+0x3f2>
			if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1])){
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	88 23       	and	r24, r24
    3ca4:	61 f0       	breq	.+24     	; 0x3cbe <Validate_Expression+0x30e>
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	88 2f       	mov	r24, r24
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	fc 01       	movw	r30, r24
    3cb0:	ea 54       	subi	r30, 0x4A	; 74
    3cb2:	fc 4f       	sbci	r31, 0xFC	; 252
    3cb4:	80 81       	ld	r24, Z
    3cb6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    3cba:	88 23       	and	r24, r24
    3cbc:	19 f0       	breq	.+6      	; 0x3cc4 <Validate_Expression+0x314>
				return ES_SYNTAX_ERROR;
    3cbe:	84 e0       	ldi	r24, 0x04	; 4
    3cc0:	8b 8b       	std	Y+19, r24	; 0x13
    3cc2:	9c c3       	rjmp	.+1848   	; 0x43fc <Validate_Expression+0xa4c>
			}
			else{
                if(!Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	88 2f       	mov	r24, r24
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	fc 01       	movw	r30, r24
    3cce:	ea 54       	subi	r30, 0x4A	; 74
    3cd0:	fc 4f       	sbci	r31, 0xFC	; 252
    3cd2:	80 81       	ld	r24, Z
    3cd4:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    3cd8:	88 23       	and	r24, r24
    3cda:	09 f0       	breq	.+2      	; 0x3cde <Validate_Expression+0x32e>
    3cdc:	50 c0       	rjmp	.+160    	; 0x3d7e <Validate_Expression+0x3ce>
                    GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce6:	8f 5b       	subi	r24, 0xBF	; 191
    3ce8:	f9 01       	movw	r30, r18
    3cea:	ee 55       	subi	r30, 0x5E	; 94
    3cec:	fc 4f       	sbci	r31, 0xFC	; 252
    3cee:	80 83       	st	Z, r24
    3cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf2:	8f 5f       	subi	r24, 0xFF	; 255
    3cf4:	8b 83       	std	Y+3, r24	; 0x03
                    if(IsNegative){
    3cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf8:	88 23       	and	r24, r24
    3cfa:	d1 f0       	breq	.+52     	; 0x3d30 <Validate_Expression+0x380>
                        GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	68 2f       	mov	r22, r24
    3d00:	70 e0       	ldi	r23, 0x00	; 0
    3d02:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d04:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d06:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d08:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d0a:	9c 01       	movw	r18, r24
    3d0c:	ad 01       	movw	r20, r26
    3d0e:	50 58       	subi	r21, 0x80	; 128
    3d10:	cb 01       	movw	r24, r22
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	88 0f       	add	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	ee 5a       	subi	r30, 0xAE	; 174
    3d1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3d20:	20 83       	st	Z, r18
    3d22:	31 83       	std	Z+1, r19	; 0x01
    3d24:	42 83       	std	Z+2, r20	; 0x02
    3d26:	53 83       	std	Z+3, r21	; 0x03
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	8f 5f       	subi	r24, 0xFF	; 255
    3d2c:	8a 83       	std	Y+2, r24	; 0x02
    3d2e:	15 c0       	rjmp	.+42     	; 0x3d5a <Validate_Expression+0x3aa>
                    }
                    else {
                        GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	88 2f       	mov	r24, r24
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	fc 01       	movw	r30, r24
    3d40:	ee 5a       	subi	r30, 0xAE	; 174
    3d42:	fc 4f       	sbci	r31, 0xFC	; 252
    3d44:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d46:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d48:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d4a:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d4c:	80 83       	st	Z, r24
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	a2 83       	std	Z+2, r26	; 0x02
    3d52:	b3 83       	std	Z+3, r27	; 0x03
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	8f 5f       	subi	r24, 0xFF	; 255
    3d58:	8a 83       	std	Y+2, r24	; 0x02
                    }

                    //For New Number
                    IsFloat = 0, IsNegative = 0;
    3d5a:	1d 82       	std	Y+5, r1	; 0x05
    3d5c:	1c 82       	std	Y+4, r1	; 0x04
                    Local_s64Operand = 0,floatweight = 0.1;
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	a0 e0       	ldi	r26, 0x00	; 0
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	8a 87       	std	Y+10, r24	; 0x0a
    3d68:	9b 87       	std	Y+11, r25	; 0x0b
    3d6a:	ac 87       	std	Y+12, r26	; 0x0c
    3d6c:	bd 87       	std	Y+13, r27	; 0x0d
    3d6e:	8d ec       	ldi	r24, 0xCD	; 205
    3d70:	9c ec       	ldi	r25, 0xCC	; 204
    3d72:	ac ec       	ldi	r26, 0xCC	; 204
    3d74:	bd e3       	ldi	r27, 0x3D	; 61
    3d76:	8e 83       	std	Y+6, r24	; 0x06
    3d78:	9f 83       	std	Y+7, r25	; 0x07
    3d7a:	a8 87       	std	Y+8, r26	; 0x08
    3d7c:	b9 87       	std	Y+9, r27	; 0x09
                }
                GlobalShaddedExpression[ShadedExpressionIdx++] = GlobalInputExpression[Local_ExpIt];
    3d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d80:	28 2f       	mov	r18, r24
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	88 2f       	mov	r24, r24
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	ea 54       	subi	r30, 0x4A	; 74
    3d8e:	fc 4f       	sbci	r31, 0xFC	; 252
    3d90:	80 81       	ld	r24, Z
    3d92:	f9 01       	movw	r30, r18
    3d94:	ee 55       	subi	r30, 0x5E	; 94
    3d96:	fc 4f       	sbci	r31, 0xFC	; 252
    3d98:	80 83       	st	Z, r24
    3d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9c:	8f 5f       	subi	r24, 0xFF	; 255
    3d9e:	8b 83       	std	Y+3, r24	; 0x03
    3da0:	76 c2       	rjmp	.+1260   	; 0x428e <Validate_Expression+0x8de>
			}
		}
		else if(GlobalInputExpression[Local_ExpIt] == '.'){
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	88 2f       	mov	r24, r24
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	fc 01       	movw	r30, r24
    3daa:	ea 54       	subi	r30, 0x4A	; 74
    3dac:	fc 4f       	sbci	r31, 0xFC	; 252
    3dae:	80 81       	ld	r24, Z
    3db0:	8e 32       	cpi	r24, 0x2E	; 46
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <Validate_Expression+0x406>
    3db4:	40 c0       	rjmp	.+128    	; 0x3e36 <Validate_Expression+0x486>
			if(IsFloat || (Local_ExpIt > 0 && Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1]))){
    3db6:	8d 81       	ldd	r24, Y+5	; 0x05
    3db8:	88 23       	and	r24, r24
    3dba:	79 f4       	brne	.+30     	; 0x3dda <Validate_Expression+0x42a>
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	88 23       	and	r24, r24
    3dc0:	79 f0       	breq	.+30     	; 0x3de0 <Validate_Expression+0x430>
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	88 2f       	mov	r24, r24
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	fc 01       	movw	r30, r24
    3dcc:	ea 54       	subi	r30, 0x4A	; 74
    3dce:	fc 4f       	sbci	r31, 0xFC	; 252
    3dd0:	80 81       	ld	r24, Z
    3dd2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    3dd6:	88 23       	and	r24, r24
    3dd8:	19 f0       	breq	.+6      	; 0x3de0 <Validate_Expression+0x430>
				return ES_SYNTAX_ERROR;
    3dda:	84 e0       	ldi	r24, 0x04	; 4
    3ddc:	8b 8b       	std	Y+19, r24	; 0x13
    3dde:	0e c3       	rjmp	.+1564   	; 0x43fc <Validate_Expression+0xa4c>
			}
			if(!Local_ExpIt || Is_Number(GlobalInputExpression[Local_ExpIt - 1]) ||Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1]) || Is_Operator(GlobalInputExpression[Local_ExpIt - 1])){
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	88 23       	and	r24, r24
    3de4:	29 f1       	breq	.+74     	; 0x3e30 <Validate_Expression+0x480>
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	88 2f       	mov	r24, r24
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	fc 01       	movw	r30, r24
    3df0:	ea 54       	subi	r30, 0x4A	; 74
    3df2:	fc 4f       	sbci	r31, 0xFC	; 252
    3df4:	80 81       	ld	r24, Z
    3df6:	0e 94 bd 1c 	call	0x397a	; 0x397a <Is_Number>
    3dfa:	88 23       	and	r24, r24
    3dfc:	c9 f4       	brne	.+50     	; 0x3e30 <Validate_Expression+0x480>
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	88 2f       	mov	r24, r24
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	fc 01       	movw	r30, r24
    3e08:	ea 54       	subi	r30, 0x4A	; 74
    3e0a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e0c:	80 81       	ld	r24, Z
    3e0e:	0e 94 99 1c 	call	0x3932	; 0x3932 <Is_Open_Brackets>
    3e12:	88 23       	and	r24, r24
    3e14:	69 f4       	brne	.+26     	; 0x3e30 <Validate_Expression+0x480>
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	88 2f       	mov	r24, r24
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	01 97       	sbiw	r24, 0x01	; 1
    3e1e:	fc 01       	movw	r30, r24
    3e20:	ea 54       	subi	r30, 0x4A	; 74
    3e22:	fc 4f       	sbci	r31, 0xFC	; 252
    3e24:	80 81       	ld	r24, Z
    3e26:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    3e2a:	88 23       	and	r24, r24
    3e2c:	09 f4       	brne	.+2      	; 0x3e30 <Validate_Expression+0x480>
    3e2e:	2f c2       	rjmp	.+1118   	; 0x428e <Validate_Expression+0x8de>
				IsFloat = 1;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	8d 83       	std	Y+5, r24	; 0x05
    3e34:	2c c2       	rjmp	.+1112   	; 0x428e <Validate_Expression+0x8de>
			}
		}
		else if(Is_Number(GlobalInputExpression[Local_ExpIt])){
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
    3e38:	88 2f       	mov	r24, r24
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	ea 54       	subi	r30, 0x4A	; 74
    3e40:	fc 4f       	sbci	r31, 0xFC	; 252
    3e42:	80 81       	ld	r24, Z
    3e44:	0e 94 bd 1c 	call	0x397a	; 0x397a <Is_Number>
    3e48:	88 23       	and	r24, r24
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <Validate_Expression+0x49e>
    3e4c:	80 c0       	rjmp	.+256    	; 0x3f4e <Validate_Expression+0x59e>
			if(Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	88 2f       	mov	r24, r24
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	fc 01       	movw	r30, r24
    3e58:	ea 54       	subi	r30, 0x4A	; 74
    3e5a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e5c:	80 81       	ld	r24, Z
    3e5e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    3e62:	88 23       	and	r24, r24
    3e64:	19 f0       	breq	.+6      	; 0x3e6c <Validate_Expression+0x4bc>
				return ES_SYNTAX_ERROR;
    3e66:	84 e0       	ldi	r24, 0x04	; 4
    3e68:	8b 8b       	std	Y+19, r24	; 0x13
    3e6a:	c8 c2       	rjmp	.+1424   	; 0x43fc <Validate_Expression+0xa4c>
			}
			else if(IsFloat){
    3e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6e:	88 23       	and	r24, r24
    3e70:	e9 f1       	breq	.+122    	; 0x3eec <Validate_Expression+0x53c>
				Local_s64Operand += floatweight * (GlobalInputExpression[Local_ExpIt] - '0');
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	88 2f       	mov	r24, r24
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	fc 01       	movw	r30, r24
    3e7a:	ea 54       	subi	r30, 0x4A	; 74
    3e7c:	fc 4f       	sbci	r31, 0xFC	; 252
    3e7e:	80 81       	ld	r24, Z
    3e80:	88 2f       	mov	r24, r24
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	c0 97       	sbiw	r24, 0x30	; 48
    3e86:	aa 27       	eor	r26, r26
    3e88:	97 fd       	sbrc	r25, 7
    3e8a:	a0 95       	com	r26
    3e8c:	ba 2f       	mov	r27, r26
    3e8e:	bc 01       	movw	r22, r24
    3e90:	cd 01       	movw	r24, r26
    3e92:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3e96:	dc 01       	movw	r26, r24
    3e98:	cb 01       	movw	r24, r22
    3e9a:	bc 01       	movw	r22, r24
    3e9c:	cd 01       	movw	r24, r26
    3e9e:	2e 81       	ldd	r18, Y+6	; 0x06
    3ea0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ea2:	48 85       	ldd	r20, Y+8	; 0x08
    3ea4:	59 85       	ldd	r21, Y+9	; 0x09
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	9c 01       	movw	r18, r24
    3eb0:	ad 01       	movw	r20, r26
    3eb2:	6a 85       	ldd	r22, Y+10	; 0x0a
    3eb4:	7b 85       	ldd	r23, Y+11	; 0x0b
    3eb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3eb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3eba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	8a 87       	std	Y+10, r24	; 0x0a
    3ec4:	9b 87       	std	Y+11, r25	; 0x0b
    3ec6:	ac 87       	std	Y+12, r26	; 0x0c
    3ec8:	bd 87       	std	Y+13, r27	; 0x0d
				floatweight/=10;
    3eca:	6e 81       	ldd	r22, Y+6	; 0x06
    3ecc:	7f 81       	ldd	r23, Y+7	; 0x07
    3ece:	88 85       	ldd	r24, Y+8	; 0x08
    3ed0:	99 85       	ldd	r25, Y+9	; 0x09
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	40 e2       	ldi	r20, 0x20	; 32
    3ed8:	51 e4       	ldi	r21, 0x41	; 65
    3eda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	8e 83       	std	Y+6, r24	; 0x06
    3ee4:	9f 83       	std	Y+7, r25	; 0x07
    3ee6:	a8 87       	std	Y+8, r26	; 0x08
    3ee8:	b9 87       	std	Y+9, r27	; 0x09
    3eea:	d1 c1       	rjmp	.+930    	; 0x428e <Validate_Expression+0x8de>
			}
			else{
				Local_s64Operand *= 10;
    3eec:	6a 85       	ldd	r22, Y+10	; 0x0a
    3eee:	7b 85       	ldd	r23, Y+11	; 0x0b
    3ef0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ef2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	40 e2       	ldi	r20, 0x20	; 32
    3efa:	51 e4       	ldi	r21, 0x41	; 65
    3efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	8a 87       	std	Y+10, r24	; 0x0a
    3f06:	9b 87       	std	Y+11, r25	; 0x0b
    3f08:	ac 87       	std	Y+12, r26	; 0x0c
    3f0a:	bd 87       	std	Y+13, r27	; 0x0d
				Local_s64Operand += (GlobalInputExpression[Local_ExpIt] - '0');
    3f0c:	89 81       	ldd	r24, Y+1	; 0x01
    3f0e:	88 2f       	mov	r24, r24
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	fc 01       	movw	r30, r24
    3f14:	ea 54       	subi	r30, 0x4A	; 74
    3f16:	fc 4f       	sbci	r31, 0xFC	; 252
    3f18:	80 81       	ld	r24, Z
    3f1a:	88 2f       	mov	r24, r24
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	c0 97       	sbiw	r24, 0x30	; 48
    3f20:	aa 27       	eor	r26, r26
    3f22:	97 fd       	sbrc	r25, 7
    3f24:	a0 95       	com	r26
    3f26:	ba 2f       	mov	r27, r26
    3f28:	bc 01       	movw	r22, r24
    3f2a:	cd 01       	movw	r24, r26
    3f2c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3f30:	9b 01       	movw	r18, r22
    3f32:	ac 01       	movw	r20, r24
    3f34:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f36:	7b 85       	ldd	r23, Y+11	; 0x0b
    3f38:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f3c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	8a 87       	std	Y+10, r24	; 0x0a
    3f46:	9b 87       	std	Y+11, r25	; 0x0b
    3f48:	ac 87       	std	Y+12, r26	; 0x0c
    3f4a:	bd 87       	std	Y+13, r27	; 0x0d
    3f4c:	a0 c1       	rjmp	.+832    	; 0x428e <Validate_Expression+0x8de>
			}
		}
        else if(Is_Close_Brackets(GlobalInputExpression[Local_ExpIt])){
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	88 2f       	mov	r24, r24
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	fc 01       	movw	r30, r24
    3f56:	ea 54       	subi	r30, 0x4A	; 74
    3f58:	fc 4f       	sbci	r31, 0xFC	; 252
    3f5a:	80 81       	ld	r24, Z
    3f5c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    3f60:	88 23       	and	r24, r24
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <Validate_Expression+0x5b6>
    3f64:	96 c0       	rjmp	.+300    	; 0x4092 <Validate_Expression+0x6e2>
            if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1]) || Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	88 23       	and	r24, r24
    3f6a:	c1 f0       	breq	.+48     	; 0x3f9c <Validate_Expression+0x5ec>
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	88 2f       	mov	r24, r24
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	fc 01       	movw	r30, r24
    3f76:	ea 54       	subi	r30, 0x4A	; 74
    3f78:	fc 4f       	sbci	r31, 0xFC	; 252
    3f7a:	80 81       	ld	r24, Z
    3f7c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    3f80:	88 23       	and	r24, r24
    3f82:	61 f4       	brne	.+24     	; 0x3f9c <Validate_Expression+0x5ec>
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	88 2f       	mov	r24, r24
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	ea 54       	subi	r30, 0x4A	; 74
    3f90:	fc 4f       	sbci	r31, 0xFC	; 252
    3f92:	80 81       	ld	r24, Z
    3f94:	0e 94 99 1c 	call	0x3932	; 0x3932 <Is_Open_Brackets>
    3f98:	88 23       	and	r24, r24
    3f9a:	19 f0       	breq	.+6      	; 0x3fa2 <Validate_Expression+0x5f2>
                return ES_SYNTAX_ERROR;
    3f9c:	84 e0       	ldi	r24, 0x04	; 4
    3f9e:	8b 8b       	std	Y+19, r24	; 0x13
    3fa0:	2d c2       	rjmp	.+1114   	; 0x43fc <Validate_Expression+0xa4c>
            }
            else if(Is_Number(GlobalInputExpression[Local_ExpIt - 1]) || IsFloat){
    3fa2:	89 81       	ldd	r24, Y+1	; 0x01
    3fa4:	88 2f       	mov	r24, r24
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	fc 01       	movw	r30, r24
    3fac:	ea 54       	subi	r30, 0x4A	; 74
    3fae:	fc 4f       	sbci	r31, 0xFC	; 252
    3fb0:	80 81       	ld	r24, Z
    3fb2:	0e 94 bd 1c 	call	0x397a	; 0x397a <Is_Number>
    3fb6:	88 23       	and	r24, r24
    3fb8:	21 f4       	brne	.+8      	; 0x3fc2 <Validate_Expression+0x612>
    3fba:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbc:	88 23       	and	r24, r24
    3fbe:	09 f4       	brne	.+2      	; 0x3fc2 <Validate_Expression+0x612>
    3fc0:	5c c0       	rjmp	.+184    	; 0x407a <Validate_Expression+0x6ca>
                GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc4:	28 2f       	mov	r18, r24
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	8f 5b       	subi	r24, 0xBF	; 191
    3fcc:	f9 01       	movw	r30, r18
    3fce:	ee 55       	subi	r30, 0x5E	; 94
    3fd0:	fc 4f       	sbci	r31, 0xFC	; 252
    3fd2:	80 83       	st	Z, r24
    3fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd6:	8f 5f       	subi	r24, 0xFF	; 255
    3fd8:	8b 83       	std	Y+3, r24	; 0x03
                GlobalShaddedExpression[ShadedExpressionIdx++] = ')';
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	88 2f       	mov	r24, r24
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	ee 55       	subi	r30, 0x5E	; 94
    3fe4:	fc 4f       	sbci	r31, 0xFC	; 252
    3fe6:	89 e2       	ldi	r24, 0x29	; 41
    3fe8:	80 83       	st	Z, r24
    3fea:	8b 81       	ldd	r24, Y+3	; 0x03
    3fec:	8f 5f       	subi	r24, 0xFF	; 255
    3fee:	8b 83       	std	Y+3, r24	; 0x03
                if(IsNegative){
    3ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ff2:	88 23       	and	r24, r24
    3ff4:	d1 f0       	breq	.+52     	; 0x402a <Validate_Expression+0x67a>
                    GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff8:	68 2f       	mov	r22, r24
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ffe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4000:	ac 85       	ldd	r26, Y+12	; 0x0c
    4002:	bd 85       	ldd	r27, Y+13	; 0x0d
    4004:	9c 01       	movw	r18, r24
    4006:	ad 01       	movw	r20, r26
    4008:	50 58       	subi	r21, 0x80	; 128
    400a:	cb 01       	movw	r24, r22
    400c:	88 0f       	add	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	88 0f       	add	r24, r24
    4012:	99 1f       	adc	r25, r25
    4014:	fc 01       	movw	r30, r24
    4016:	ee 5a       	subi	r30, 0xAE	; 174
    4018:	fc 4f       	sbci	r31, 0xFC	; 252
    401a:	20 83       	st	Z, r18
    401c:	31 83       	std	Z+1, r19	; 0x01
    401e:	42 83       	std	Z+2, r20	; 0x02
    4020:	53 83       	std	Z+3, r21	; 0x03
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	8f 5f       	subi	r24, 0xFF	; 255
    4026:	8a 83       	std	Y+2, r24	; 0x02
    4028:	15 c0       	rjmp	.+42     	; 0x4054 <Validate_Expression+0x6a4>
                }
                else {
                    GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	88 2f       	mov	r24, r24
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	88 0f       	add	r24, r24
    4032:	99 1f       	adc	r25, r25
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	fc 01       	movw	r30, r24
    403a:	ee 5a       	subi	r30, 0xAE	; 174
    403c:	fc 4f       	sbci	r31, 0xFC	; 252
    403e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4040:	9b 85       	ldd	r25, Y+11	; 0x0b
    4042:	ac 85       	ldd	r26, Y+12	; 0x0c
    4044:	bd 85       	ldd	r27, Y+13	; 0x0d
    4046:	80 83       	st	Z, r24
    4048:	91 83       	std	Z+1, r25	; 0x01
    404a:	a2 83       	std	Z+2, r26	; 0x02
    404c:	b3 83       	std	Z+3, r27	; 0x03
    404e:	8a 81       	ldd	r24, Y+2	; 0x02
    4050:	8f 5f       	subi	r24, 0xFF	; 255
    4052:	8a 83       	std	Y+2, r24	; 0x02
                }
                //For New Number
                IsFloat = 0, IsNegative = 0;
    4054:	1d 82       	std	Y+5, r1	; 0x05
    4056:	1c 82       	std	Y+4, r1	; 0x04
                Local_s64Operand = 0,floatweight = 0.1;
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	a0 e0       	ldi	r26, 0x00	; 0
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	8a 87       	std	Y+10, r24	; 0x0a
    4062:	9b 87       	std	Y+11, r25	; 0x0b
    4064:	ac 87       	std	Y+12, r26	; 0x0c
    4066:	bd 87       	std	Y+13, r27	; 0x0d
    4068:	8d ec       	ldi	r24, 0xCD	; 205
    406a:	9c ec       	ldi	r25, 0xCC	; 204
    406c:	ac ec       	ldi	r26, 0xCC	; 204
    406e:	bd e3       	ldi	r27, 0x3D	; 61
    4070:	8e 83       	std	Y+6, r24	; 0x06
    4072:	9f 83       	std	Y+7, r25	; 0x07
    4074:	a8 87       	std	Y+8, r26	; 0x08
    4076:	b9 87       	std	Y+9, r27	; 0x09
    4078:	0a c1       	rjmp	.+532    	; 0x428e <Validate_Expression+0x8de>
            }
            else{
                GlobalShaddedExpression[ShadedExpressionIdx++] = ')';
    407a:	8b 81       	ldd	r24, Y+3	; 0x03
    407c:	88 2f       	mov	r24, r24
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	fc 01       	movw	r30, r24
    4082:	ee 55       	subi	r30, 0x5E	; 94
    4084:	fc 4f       	sbci	r31, 0xFC	; 252
    4086:	89 e2       	ldi	r24, 0x29	; 41
    4088:	80 83       	st	Z, r24
    408a:	8b 81       	ldd	r24, Y+3	; 0x03
    408c:	8f 5f       	subi	r24, 0xFF	; 255
    408e:	8b 83       	std	Y+3, r24	; 0x03
    4090:	fe c0       	rjmp	.+508    	; 0x428e <Validate_Expression+0x8de>
            }
        }
		else if(Is_Open_Brackets(GlobalInputExpression[Local_ExpIt])){
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	88 2f       	mov	r24, r24
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	fc 01       	movw	r30, r24
    409a:	ea 54       	subi	r30, 0x4A	; 74
    409c:	fc 4f       	sbci	r31, 0xFC	; 252
    409e:	80 81       	ld	r24, Z
    40a0:	0e 94 99 1c 	call	0x3932	; 0x3932 <Is_Open_Brackets>
    40a4:	88 23       	and	r24, r24
    40a6:	09 f4       	brne	.+2      	; 0x40aa <Validate_Expression+0x6fa>
    40a8:	f2 c0       	rjmp	.+484    	; 0x428e <Validate_Expression+0x8de>
			if(Local_ExpIt && Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	88 23       	and	r24, r24
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <Validate_Expression+0x702>
    40b0:	68 c0       	rjmp	.+208    	; 0x4182 <Validate_Expression+0x7d2>
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	88 2f       	mov	r24, r24
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	fc 01       	movw	r30, r24
    40bc:	ea 54       	subi	r30, 0x4A	; 74
    40be:	fc 4f       	sbci	r31, 0xFC	; 252
    40c0:	80 81       	ld	r24, Z
    40c2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <Is_Close_Brackets>
    40c6:	88 23       	and	r24, r24
    40c8:	09 f4       	brne	.+2      	; 0x40cc <Validate_Expression+0x71c>
    40ca:	5b c0       	rjmp	.+182    	; 0x4182 <Validate_Expression+0x7d2>
				GlobalShaddedExpression[ShadedExpressionIdx++] = '*';
    40cc:	8b 81       	ldd	r24, Y+3	; 0x03
    40ce:	88 2f       	mov	r24, r24
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	fc 01       	movw	r30, r24
    40d4:	ee 55       	subi	r30, 0x5E	; 94
    40d6:	fc 4f       	sbci	r31, 0xFC	; 252
    40d8:	8a e2       	ldi	r24, 0x2A	; 42
    40da:	80 83       	st	Z, r24
    40dc:	8b 81       	ldd	r24, Y+3	; 0x03
    40de:	8f 5f       	subi	r24, 0xFF	; 255
    40e0:	8b 83       	std	Y+3, r24	; 0x03
                GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
    40e2:	8b 81       	ldd	r24, Y+3	; 0x03
    40e4:	88 2f       	mov	r24, r24
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	fc 01       	movw	r30, r24
    40ea:	ee 55       	subi	r30, 0x5E	; 94
    40ec:	fc 4f       	sbci	r31, 0xFC	; 252
    40ee:	88 e2       	ldi	r24, 0x28	; 40
    40f0:	80 83       	st	Z, r24
    40f2:	8b 81       	ldd	r24, Y+3	; 0x03
    40f4:	8f 5f       	subi	r24, 0xFF	; 255
    40f6:	8b 83       	std	Y+3, r24	; 0x03
                if(IsNegative){
    40f8:	8c 81       	ldd	r24, Y+4	; 0x04
    40fa:	88 23       	and	r24, r24
    40fc:	d1 f0       	breq	.+52     	; 0x4132 <Validate_Expression+0x782>
					GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	68 2f       	mov	r22, r24
    4102:	70 e0       	ldi	r23, 0x00	; 0
    4104:	8a 85       	ldd	r24, Y+10	; 0x0a
    4106:	9b 85       	ldd	r25, Y+11	; 0x0b
    4108:	ac 85       	ldd	r26, Y+12	; 0x0c
    410a:	bd 85       	ldd	r27, Y+13	; 0x0d
    410c:	9c 01       	movw	r18, r24
    410e:	ad 01       	movw	r20, r26
    4110:	50 58       	subi	r21, 0x80	; 128
    4112:	cb 01       	movw	r24, r22
    4114:	88 0f       	add	r24, r24
    4116:	99 1f       	adc	r25, r25
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	fc 01       	movw	r30, r24
    411e:	ee 5a       	subi	r30, 0xAE	; 174
    4120:	fc 4f       	sbci	r31, 0xFC	; 252
    4122:	20 83       	st	Z, r18
    4124:	31 83       	std	Z+1, r19	; 0x01
    4126:	42 83       	std	Z+2, r20	; 0x02
    4128:	53 83       	std	Z+3, r21	; 0x03
    412a:	8a 81       	ldd	r24, Y+2	; 0x02
    412c:	8f 5f       	subi	r24, 0xFF	; 255
    412e:	8a 83       	std	Y+2, r24	; 0x02
    4130:	15 c0       	rjmp	.+42     	; 0x415c <Validate_Expression+0x7ac>
				}
				else {
					GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	88 2f       	mov	r24, r24
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	88 0f       	add	r24, r24
    413a:	99 1f       	adc	r25, r25
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	fc 01       	movw	r30, r24
    4142:	ee 5a       	subi	r30, 0xAE	; 174
    4144:	fc 4f       	sbci	r31, 0xFC	; 252
    4146:	8a 85       	ldd	r24, Y+10	; 0x0a
    4148:	9b 85       	ldd	r25, Y+11	; 0x0b
    414a:	ac 85       	ldd	r26, Y+12	; 0x0c
    414c:	bd 85       	ldd	r27, Y+13	; 0x0d
    414e:	80 83       	st	Z, r24
    4150:	91 83       	std	Z+1, r25	; 0x01
    4152:	a2 83       	std	Z+2, r26	; 0x02
    4154:	b3 83       	std	Z+3, r27	; 0x03
    4156:	8a 81       	ldd	r24, Y+2	; 0x02
    4158:	8f 5f       	subi	r24, 0xFF	; 255
    415a:	8a 83       	std	Y+2, r24	; 0x02
				}
				//For New Number
				IsFloat = 0, IsNegative = 0;
    415c:	1d 82       	std	Y+5, r1	; 0x05
    415e:	1c 82       	std	Y+4, r1	; 0x04
				Local_s64Operand = 0,floatweight = 0.1;
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	a0 e0       	ldi	r26, 0x00	; 0
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	8a 87       	std	Y+10, r24	; 0x0a
    416a:	9b 87       	std	Y+11, r25	; 0x0b
    416c:	ac 87       	std	Y+12, r26	; 0x0c
    416e:	bd 87       	std	Y+13, r27	; 0x0d
    4170:	8d ec       	ldi	r24, 0xCD	; 205
    4172:	9c ec       	ldi	r25, 0xCC	; 204
    4174:	ac ec       	ldi	r26, 0xCC	; 204
    4176:	bd e3       	ldi	r27, 0x3D	; 61
    4178:	8e 83       	std	Y+6, r24	; 0x06
    417a:	9f 83       	std	Y+7, r25	; 0x07
    417c:	a8 87       	std	Y+8, r26	; 0x08
    417e:	b9 87       	std	Y+9, r27	; 0x09
    4180:	86 c0       	rjmp	.+268    	; 0x428e <Validate_Expression+0x8de>
			}
			else if(Local_ExpIt && (Is_Number(GlobalInputExpression[Local_ExpIt - 1])|| IsFloat)){
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	88 23       	and	r24, r24
    4186:	09 f4       	brne	.+2      	; 0x418a <Validate_Expression+0x7da>
    4188:	77 c0       	rjmp	.+238    	; 0x4278 <Validate_Expression+0x8c8>
    418a:	89 81       	ldd	r24, Y+1	; 0x01
    418c:	88 2f       	mov	r24, r24
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	fc 01       	movw	r30, r24
    4194:	ea 54       	subi	r30, 0x4A	; 74
    4196:	fc 4f       	sbci	r31, 0xFC	; 252
    4198:	80 81       	ld	r24, Z
    419a:	0e 94 bd 1c 	call	0x397a	; 0x397a <Is_Number>
    419e:	88 23       	and	r24, r24
    41a0:	21 f4       	brne	.+8      	; 0x41aa <Validate_Expression+0x7fa>
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	88 23       	and	r24, r24
    41a6:	09 f4       	brne	.+2      	; 0x41aa <Validate_Expression+0x7fa>
    41a8:	67 c0       	rjmp	.+206    	; 0x4278 <Validate_Expression+0x8c8>
				GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	28 2f       	mov	r18, r24
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	8a 81       	ldd	r24, Y+2	; 0x02
    41b2:	8f 5b       	subi	r24, 0xBF	; 191
    41b4:	f9 01       	movw	r30, r18
    41b6:	ee 55       	subi	r30, 0x5E	; 94
    41b8:	fc 4f       	sbci	r31, 0xFC	; 252
    41ba:	80 83       	st	Z, r24
    41bc:	8b 81       	ldd	r24, Y+3	; 0x03
    41be:	8f 5f       	subi	r24, 0xFF	; 255
    41c0:	8b 83       	std	Y+3, r24	; 0x03
				GlobalShaddedExpression[ShadedExpressionIdx++] = '*';
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	88 2f       	mov	r24, r24
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	fc 01       	movw	r30, r24
    41ca:	ee 55       	subi	r30, 0x5E	; 94
    41cc:	fc 4f       	sbci	r31, 0xFC	; 252
    41ce:	8a e2       	ldi	r24, 0x2A	; 42
    41d0:	80 83       	st	Z, r24
    41d2:	8b 81       	ldd	r24, Y+3	; 0x03
    41d4:	8f 5f       	subi	r24, 0xFF	; 255
    41d6:	8b 83       	std	Y+3, r24	; 0x03
                GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	88 2f       	mov	r24, r24
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	fc 01       	movw	r30, r24
    41e0:	ee 55       	subi	r30, 0x5E	; 94
    41e2:	fc 4f       	sbci	r31, 0xFC	; 252
    41e4:	88 e2       	ldi	r24, 0x28	; 40
    41e6:	80 83       	st	Z, r24
    41e8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ea:	8f 5f       	subi	r24, 0xFF	; 255
    41ec:	8b 83       	std	Y+3, r24	; 0x03
                if(IsNegative){
    41ee:	8c 81       	ldd	r24, Y+4	; 0x04
    41f0:	88 23       	and	r24, r24
    41f2:	d1 f0       	breq	.+52     	; 0x4228 <Validate_Expression+0x878>
					GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	68 2f       	mov	r22, r24
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    41fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    41fe:	ac 85       	ldd	r26, Y+12	; 0x0c
    4200:	bd 85       	ldd	r27, Y+13	; 0x0d
    4202:	9c 01       	movw	r18, r24
    4204:	ad 01       	movw	r20, r26
    4206:	50 58       	subi	r21, 0x80	; 128
    4208:	cb 01       	movw	r24, r22
    420a:	88 0f       	add	r24, r24
    420c:	99 1f       	adc	r25, r25
    420e:	88 0f       	add	r24, r24
    4210:	99 1f       	adc	r25, r25
    4212:	fc 01       	movw	r30, r24
    4214:	ee 5a       	subi	r30, 0xAE	; 174
    4216:	fc 4f       	sbci	r31, 0xFC	; 252
    4218:	20 83       	st	Z, r18
    421a:	31 83       	std	Z+1, r19	; 0x01
    421c:	42 83       	std	Z+2, r20	; 0x02
    421e:	53 83       	std	Z+3, r21	; 0x03
    4220:	8a 81       	ldd	r24, Y+2	; 0x02
    4222:	8f 5f       	subi	r24, 0xFF	; 255
    4224:	8a 83       	std	Y+2, r24	; 0x02
    4226:	15 c0       	rjmp	.+42     	; 0x4252 <Validate_Expression+0x8a2>
				}
				else {
					GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    4228:	8a 81       	ldd	r24, Y+2	; 0x02
    422a:	88 2f       	mov	r24, r24
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	88 0f       	add	r24, r24
    4230:	99 1f       	adc	r25, r25
    4232:	88 0f       	add	r24, r24
    4234:	99 1f       	adc	r25, r25
    4236:	fc 01       	movw	r30, r24
    4238:	ee 5a       	subi	r30, 0xAE	; 174
    423a:	fc 4f       	sbci	r31, 0xFC	; 252
    423c:	8a 85       	ldd	r24, Y+10	; 0x0a
    423e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4240:	ac 85       	ldd	r26, Y+12	; 0x0c
    4242:	bd 85       	ldd	r27, Y+13	; 0x0d
    4244:	80 83       	st	Z, r24
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	a2 83       	std	Z+2, r26	; 0x02
    424a:	b3 83       	std	Z+3, r27	; 0x03
    424c:	8a 81       	ldd	r24, Y+2	; 0x02
    424e:	8f 5f       	subi	r24, 0xFF	; 255
    4250:	8a 83       	std	Y+2, r24	; 0x02
				}
				//For New Number
				IsFloat = 0, IsNegative = 0;
    4252:	1d 82       	std	Y+5, r1	; 0x05
    4254:	1c 82       	std	Y+4, r1	; 0x04
				Local_s64Operand = 0,floatweight = 0.1;
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	a0 e0       	ldi	r26, 0x00	; 0
    425c:	b0 e0       	ldi	r27, 0x00	; 0
    425e:	8a 87       	std	Y+10, r24	; 0x0a
    4260:	9b 87       	std	Y+11, r25	; 0x0b
    4262:	ac 87       	std	Y+12, r26	; 0x0c
    4264:	bd 87       	std	Y+13, r27	; 0x0d
    4266:	8d ec       	ldi	r24, 0xCD	; 205
    4268:	9c ec       	ldi	r25, 0xCC	; 204
    426a:	ac ec       	ldi	r26, 0xCC	; 204
    426c:	bd e3       	ldi	r27, 0x3D	; 61
    426e:	8e 83       	std	Y+6, r24	; 0x06
    4270:	9f 83       	std	Y+7, r25	; 0x07
    4272:	a8 87       	std	Y+8, r26	; 0x08
    4274:	b9 87       	std	Y+9, r27	; 0x09
    4276:	0b c0       	rjmp	.+22     	; 0x428e <Validate_Expression+0x8de>
			}
			else{
				GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
    4278:	8b 81       	ldd	r24, Y+3	; 0x03
    427a:	88 2f       	mov	r24, r24
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	fc 01       	movw	r30, r24
    4280:	ee 55       	subi	r30, 0x5E	; 94
    4282:	fc 4f       	sbci	r31, 0xFC	; 252
    4284:	88 e2       	ldi	r24, 0x28	; 40
    4286:	80 83       	st	Z, r24
    4288:	8b 81       	ldd	r24, Y+3	; 0x03
    428a:	8f 5f       	subi	r24, 0xFF	; 255
    428c:	8b 83       	std	Y+3, r24	; 0x03

ES Validate_Expression(){
	double Local_s64Operand = 0, floatweight = 0.1;
	u8 IsFloat = 0, IsNegative = 0, ShadedExpressionIdx = 0, OperandsArrIdx = 0;
    u8 Local_ExpIt;
	for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++){
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	8f 5f       	subi	r24, 0xFF	; 255
    4292:	89 83       	std	Y+1, r24	; 0x01
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	88 2f       	mov	r24, r24
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	fc 01       	movw	r30, r24
    429c:	ea 54       	subi	r30, 0x4A	; 74
    429e:	fc 4f       	sbci	r31, 0xFC	; 252
    42a0:	80 81       	ld	r24, Z
    42a2:	88 23       	and	r24, r24
    42a4:	09 f0       	breq	.+2      	; 0x42a8 <Validate_Expression+0x8f8>
    42a6:	a4 cb       	rjmp	.-2232   	; 0x39f0 <Validate_Expression+0x40>
			else{
				GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
			}
		}
	}
    if(GlobalShaddedExpression[ShadedExpressionIdx - 1] != ')'){
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	88 2f       	mov	r24, r24
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	fc 01       	movw	r30, r24
    42b2:	ee 55       	subi	r30, 0x5E	; 94
    42b4:	fc 4f       	sbci	r31, 0xFC	; 252
    42b6:	80 81       	ld	r24, Z
    42b8:	89 32       	cpi	r24, 0x29	; 41
    42ba:	09 f4       	brne	.+2      	; 0x42be <Validate_Expression+0x90e>
    42bc:	3e c0       	rjmp	.+124    	; 0x433a <Validate_Expression+0x98a>
        GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    42be:	8b 81       	ldd	r24, Y+3	; 0x03
    42c0:	28 2f       	mov	r18, r24
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	8a 81       	ldd	r24, Y+2	; 0x02
    42c6:	8f 5b       	subi	r24, 0xBF	; 191
    42c8:	f9 01       	movw	r30, r18
    42ca:	ee 55       	subi	r30, 0x5E	; 94
    42cc:	fc 4f       	sbci	r31, 0xFC	; 252
    42ce:	80 83       	st	Z, r24
    42d0:	8b 81       	ldd	r24, Y+3	; 0x03
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	8b 83       	std	Y+3, r24	; 0x03
        if(IsNegative){
    42d6:	8c 81       	ldd	r24, Y+4	; 0x04
    42d8:	88 23       	and	r24, r24
    42da:	d1 f0       	breq	.+52     	; 0x4310 <Validate_Expression+0x960>
            GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    42dc:	8a 81       	ldd	r24, Y+2	; 0x02
    42de:	68 2f       	mov	r22, r24
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    42e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    42e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    42ea:	9c 01       	movw	r18, r24
    42ec:	ad 01       	movw	r20, r26
    42ee:	50 58       	subi	r21, 0x80	; 128
    42f0:	cb 01       	movw	r24, r22
    42f2:	88 0f       	add	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	88 0f       	add	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	fc 01       	movw	r30, r24
    42fc:	ee 5a       	subi	r30, 0xAE	; 174
    42fe:	fc 4f       	sbci	r31, 0xFC	; 252
    4300:	20 83       	st	Z, r18
    4302:	31 83       	std	Z+1, r19	; 0x01
    4304:	42 83       	std	Z+2, r20	; 0x02
    4306:	53 83       	std	Z+3, r21	; 0x03
    4308:	8a 81       	ldd	r24, Y+2	; 0x02
    430a:	8f 5f       	subi	r24, 0xFF	; 255
    430c:	8a 83       	std	Y+2, r24	; 0x02
    430e:	15 c0       	rjmp	.+42     	; 0x433a <Validate_Expression+0x98a>
        }
        else {
            GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    4310:	8a 81       	ldd	r24, Y+2	; 0x02
    4312:	88 2f       	mov	r24, r24
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	fc 01       	movw	r30, r24
    4320:	ee 5a       	subi	r30, 0xAE	; 174
    4322:	fc 4f       	sbci	r31, 0xFC	; 252
    4324:	8a 85       	ldd	r24, Y+10	; 0x0a
    4326:	9b 85       	ldd	r25, Y+11	; 0x0b
    4328:	ac 85       	ldd	r26, Y+12	; 0x0c
    432a:	bd 85       	ldd	r27, Y+13	; 0x0d
    432c:	80 83       	st	Z, r24
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	a2 83       	std	Z+2, r26	; 0x02
    4332:	b3 83       	std	Z+3, r27	; 0x03
    4334:	8a 81       	ldd	r24, Y+2	; 0x02
    4336:	8f 5f       	subi	r24, 0xFF	; 255
    4338:	8a 83       	std	Y+2, r24	; 0x02
        }
    }
    if(OperandsArrIdx == 0 && Local_ExpIt) return ES_SYNTAX_ERROR;
    433a:	8a 81       	ldd	r24, Y+2	; 0x02
    433c:	88 23       	and	r24, r24
    433e:	31 f4       	brne	.+12     	; 0x434c <Validate_Expression+0x99c>
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	88 23       	and	r24, r24
    4344:	19 f0       	breq	.+6      	; 0x434c <Validate_Expression+0x99c>
    4346:	84 e0       	ldi	r24, 0x04	; 4
    4348:	8b 8b       	std	Y+19, r24	; 0x13
    434a:	58 c0       	rjmp	.+176    	; 0x43fc <Validate_Expression+0xa4c>

    Stack Local_stBrackets;
    char Local_chTmp;
    Initialize_Stack(&Local_stBrackets);
    434c:	ce 01       	movw	r24, r28
    434e:	0e 96       	adiw	r24, 0x0e	; 14
    4350:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Initialize_Stack>
    for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++) {
    4354:	19 82       	std	Y+1, r1	; 0x01
    4356:	2d c0       	rjmp	.+90     	; 0x43b2 <Validate_Expression+0xa02>
        if (GlobalInputExpression[Local_ExpIt] == '(') Push(&Local_stBrackets, ')');
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	88 2f       	mov	r24, r24
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	fc 01       	movw	r30, r24
    4360:	ea 54       	subi	r30, 0x4A	; 74
    4362:	fc 4f       	sbci	r31, 0xFC	; 252
    4364:	80 81       	ld	r24, Z
    4366:	88 32       	cpi	r24, 0x28	; 40
    4368:	31 f4       	brne	.+12     	; 0x4376 <Validate_Expression+0x9c6>
    436a:	ce 01       	movw	r24, r28
    436c:	0e 96       	adiw	r24, 0x0e	; 14
    436e:	69 e2       	ldi	r22, 0x29	; 41
    4370:	0e 94 90 0b 	call	0x1720	; 0x1720 <Push>
    4374:	1b c0       	rjmp	.+54     	; 0x43ac <Validate_Expression+0x9fc>
        else if (GlobalInputExpression[Local_ExpIt] == ')'){
    4376:	89 81       	ldd	r24, Y+1	; 0x01
    4378:	88 2f       	mov	r24, r24
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	fc 01       	movw	r30, r24
    437e:	ea 54       	subi	r30, 0x4A	; 74
    4380:	fc 4f       	sbci	r31, 0xFC	; 252
    4382:	80 81       	ld	r24, Z
    4384:	89 32       	cpi	r24, 0x29	; 41
    4386:	91 f4       	brne	.+36     	; 0x43ac <Validate_Expression+0x9fc>
        	if(!Stack_Empty(&Local_stBrackets)) {
    4388:	ce 01       	movw	r24, r28
    438a:	0e 96       	adiw	r24, 0x0e	; 14
    438c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <Stack_Empty>
    4390:	00 97       	sbiw	r24, 0x00	; 0
    4392:	49 f4       	brne	.+18     	; 0x43a6 <Validate_Expression+0x9f6>
        		Pop(&Local_chTmp, &Local_stBrackets);
    4394:	ce 01       	movw	r24, r28
    4396:	42 96       	adiw	r24, 0x12	; 18
    4398:	9e 01       	movw	r18, r28
    439a:	22 5f       	subi	r18, 0xF2	; 242
    439c:	3f 4f       	sbci	r19, 0xFF	; 255
    439e:	b9 01       	movw	r22, r18
    43a0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Pop>
    43a4:	03 c0       	rjmp	.+6      	; 0x43ac <Validate_Expression+0x9fc>
        	}
        	else{
                return ES_SYNTAX_ERROR;
    43a6:	84 e0       	ldi	r24, 0x04	; 4
    43a8:	8b 8b       	std	Y+19, r24	; 0x13
    43aa:	28 c0       	rjmp	.+80     	; 0x43fc <Validate_Expression+0xa4c>
    if(OperandsArrIdx == 0 && Local_ExpIt) return ES_SYNTAX_ERROR;

    Stack Local_stBrackets;
    char Local_chTmp;
    Initialize_Stack(&Local_stBrackets);
    for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++) {
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	8f 5f       	subi	r24, 0xFF	; 255
    43b0:	89 83       	std	Y+1, r24	; 0x01
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	88 2f       	mov	r24, r24
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	fc 01       	movw	r30, r24
    43ba:	ea 54       	subi	r30, 0x4A	; 74
    43bc:	fc 4f       	sbci	r31, 0xFC	; 252
    43be:	80 81       	ld	r24, Z
    43c0:	88 23       	and	r24, r24
    43c2:	51 f6       	brne	.-108    	; 0x4358 <Validate_Expression+0x9a8>
        	else{
                return ES_SYNTAX_ERROR;
        	}
        }
    }
	if(!Stack_Empty(&Local_stBrackets)) {
    43c4:	ce 01       	movw	r24, r28
    43c6:	0e 96       	adiw	r24, 0x0e	; 14
    43c8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <Stack_Empty>
    43cc:	00 97       	sbiw	r24, 0x00	; 0
    43ce:	19 f4       	brne	.+6      	; 0x43d6 <Validate_Expression+0xa26>
		return ES_SYNTAX_ERROR;
    43d0:	84 e0       	ldi	r24, 0x04	; 4
    43d2:	8b 8b       	std	Y+19, r24	; 0x13
    43d4:	13 c0       	rjmp	.+38     	; 0x43fc <Validate_Expression+0xa4c>
	}

	if(Local_ExpIt && Is_Operator(GlobalInputExpression[Local_ExpIt - 1])){
    43d6:	89 81       	ldd	r24, Y+1	; 0x01
    43d8:	88 23       	and	r24, r24
    43da:	79 f0       	breq	.+30     	; 0x43fa <Validate_Expression+0xa4a>
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	88 2f       	mov	r24, r24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	fc 01       	movw	r30, r24
    43e6:	ea 54       	subi	r30, 0x4A	; 74
    43e8:	fc 4f       	sbci	r31, 0xFC	; 252
    43ea:	80 81       	ld	r24, Z
    43ec:	0e 94 75 1c 	call	0x38ea	; 0x38ea <Is_Operator>
    43f0:	88 23       	and	r24, r24
    43f2:	19 f0       	breq	.+6      	; 0x43fa <Validate_Expression+0xa4a>
		return ES_SYNTAX_ERROR;
    43f4:	84 e0       	ldi	r24, 0x04	; 4
    43f6:	8b 8b       	std	Y+19, r24	; 0x13
    43f8:	01 c0       	rjmp	.+2      	; 0x43fc <Validate_Expression+0xa4c>
	}

	return ES_OK;
    43fa:	1b 8a       	std	Y+19, r1	; 0x13
    43fc:	8b 89       	ldd	r24, Y+19	; 0x13
}
    43fe:	63 96       	adiw	r28, 0x13	; 19
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	cd bf       	out	0x3d, r28	; 61
    440a:	cf 91       	pop	r28
    440c:	df 91       	pop	r29
    440e:	08 95       	ret

00004410 <main>:
#include "..\.\HAL\LCD\LCD_int.h"

#include "Calculator.h"


int main(void){
    4410:	df 93       	push	r29
    4412:	cf 93       	push	r28
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62

	//Initialization
	Math_voidInit();
    4418:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Math_voidInit>
	DIO_enuInit();
    441c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_enuInit>
	Keypad_enuInit();
    4420:	0e 94 16 14 	call	0x282c	; 0x282c <Keypad_enuInit>
	LCD_enuInit();
    4424:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <LCD_enuInit>

	//APP
	Run_Calculator();
    4428:	0e 94 76 15 	call	0x2aec	; 0x2aec <Run_Calculator>
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
}
    4430:	cf 91       	pop	r28
    4432:	df 91       	pop	r29
    4434:	08 95       	ret

00004436 <__divmodsi4>:
    4436:	97 fb       	bst	r25, 7
    4438:	09 2e       	mov	r0, r25
    443a:	05 26       	eor	r0, r21
    443c:	0e d0       	rcall	.+28     	; 0x445a <__divmodsi4_neg1>
    443e:	57 fd       	sbrc	r21, 7
    4440:	04 d0       	rcall	.+8      	; 0x444a <__divmodsi4_neg2>
    4442:	14 d0       	rcall	.+40     	; 0x446c <__udivmodsi4>
    4444:	0a d0       	rcall	.+20     	; 0x445a <__divmodsi4_neg1>
    4446:	00 1c       	adc	r0, r0
    4448:	38 f4       	brcc	.+14     	; 0x4458 <__divmodsi4_exit>

0000444a <__divmodsi4_neg2>:
    444a:	50 95       	com	r21
    444c:	40 95       	com	r20
    444e:	30 95       	com	r19
    4450:	21 95       	neg	r18
    4452:	3f 4f       	sbci	r19, 0xFF	; 255
    4454:	4f 4f       	sbci	r20, 0xFF	; 255
    4456:	5f 4f       	sbci	r21, 0xFF	; 255

00004458 <__divmodsi4_exit>:
    4458:	08 95       	ret

0000445a <__divmodsi4_neg1>:
    445a:	f6 f7       	brtc	.-4      	; 0x4458 <__divmodsi4_exit>
    445c:	90 95       	com	r25
    445e:	80 95       	com	r24
    4460:	70 95       	com	r23
    4462:	61 95       	neg	r22
    4464:	7f 4f       	sbci	r23, 0xFF	; 255
    4466:	8f 4f       	sbci	r24, 0xFF	; 255
    4468:	9f 4f       	sbci	r25, 0xFF	; 255
    446a:	08 95       	ret

0000446c <__udivmodsi4>:
    446c:	a1 e2       	ldi	r26, 0x21	; 33
    446e:	1a 2e       	mov	r1, r26
    4470:	aa 1b       	sub	r26, r26
    4472:	bb 1b       	sub	r27, r27
    4474:	fd 01       	movw	r30, r26
    4476:	0d c0       	rjmp	.+26     	; 0x4492 <__udivmodsi4_ep>

00004478 <__udivmodsi4_loop>:
    4478:	aa 1f       	adc	r26, r26
    447a:	bb 1f       	adc	r27, r27
    447c:	ee 1f       	adc	r30, r30
    447e:	ff 1f       	adc	r31, r31
    4480:	a2 17       	cp	r26, r18
    4482:	b3 07       	cpc	r27, r19
    4484:	e4 07       	cpc	r30, r20
    4486:	f5 07       	cpc	r31, r21
    4488:	20 f0       	brcs	.+8      	; 0x4492 <__udivmodsi4_ep>
    448a:	a2 1b       	sub	r26, r18
    448c:	b3 0b       	sbc	r27, r19
    448e:	e4 0b       	sbc	r30, r20
    4490:	f5 0b       	sbc	r31, r21

00004492 <__udivmodsi4_ep>:
    4492:	66 1f       	adc	r22, r22
    4494:	77 1f       	adc	r23, r23
    4496:	88 1f       	adc	r24, r24
    4498:	99 1f       	adc	r25, r25
    449a:	1a 94       	dec	r1
    449c:	69 f7       	brne	.-38     	; 0x4478 <__udivmodsi4_loop>
    449e:	60 95       	com	r22
    44a0:	70 95       	com	r23
    44a2:	80 95       	com	r24
    44a4:	90 95       	com	r25
    44a6:	9b 01       	movw	r18, r22
    44a8:	ac 01       	movw	r20, r24
    44aa:	bd 01       	movw	r22, r26
    44ac:	cf 01       	movw	r24, r30
    44ae:	08 95       	ret

000044b0 <__prologue_saves__>:
    44b0:	2f 92       	push	r2
    44b2:	3f 92       	push	r3
    44b4:	4f 92       	push	r4
    44b6:	5f 92       	push	r5
    44b8:	6f 92       	push	r6
    44ba:	7f 92       	push	r7
    44bc:	8f 92       	push	r8
    44be:	9f 92       	push	r9
    44c0:	af 92       	push	r10
    44c2:	bf 92       	push	r11
    44c4:	cf 92       	push	r12
    44c6:	df 92       	push	r13
    44c8:	ef 92       	push	r14
    44ca:	ff 92       	push	r15
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	ca 1b       	sub	r28, r26
    44da:	db 0b       	sbc	r29, r27
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	f8 94       	cli
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	09 94       	ijmp

000044e8 <__epilogue_restores__>:
    44e8:	2a 88       	ldd	r2, Y+18	; 0x12
    44ea:	39 88       	ldd	r3, Y+17	; 0x11
    44ec:	48 88       	ldd	r4, Y+16	; 0x10
    44ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    44f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    44f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    44f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    44f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    44f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    44fa:	b9 84       	ldd	r11, Y+9	; 0x09
    44fc:	c8 84       	ldd	r12, Y+8	; 0x08
    44fe:	df 80       	ldd	r13, Y+7	; 0x07
    4500:	ee 80       	ldd	r14, Y+6	; 0x06
    4502:	fd 80       	ldd	r15, Y+5	; 0x05
    4504:	0c 81       	ldd	r16, Y+4	; 0x04
    4506:	1b 81       	ldd	r17, Y+3	; 0x03
    4508:	aa 81       	ldd	r26, Y+2	; 0x02
    450a:	b9 81       	ldd	r27, Y+1	; 0x01
    450c:	ce 0f       	add	r28, r30
    450e:	d1 1d       	adc	r29, r1
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	ed 01       	movw	r28, r26
    451c:	08 95       	ret

0000451e <malloc>:
    451e:	cf 93       	push	r28
    4520:	df 93       	push	r29
    4522:	bc 01       	movw	r22, r24
    4524:	82 30       	cpi	r24, 0x02	; 2
    4526:	91 05       	cpc	r25, r1
    4528:	10 f4       	brcc	.+4      	; 0x452e <malloc+0x10>
    452a:	62 e0       	ldi	r22, 0x02	; 2
    452c:	70 e0       	ldi	r23, 0x00	; 0
    452e:	a0 91 cc 03 	lds	r26, 0x03CC
    4532:	b0 91 cd 03 	lds	r27, 0x03CD
    4536:	ed 01       	movw	r28, r26
    4538:	e0 e0       	ldi	r30, 0x00	; 0
    453a:	f0 e0       	ldi	r31, 0x00	; 0
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	21 c0       	rjmp	.+66     	; 0x4584 <malloc+0x66>
    4542:	88 81       	ld	r24, Y
    4544:	99 81       	ldd	r25, Y+1	; 0x01
    4546:	86 17       	cp	r24, r22
    4548:	97 07       	cpc	r25, r23
    454a:	69 f4       	brne	.+26     	; 0x4566 <malloc+0x48>
    454c:	8a 81       	ldd	r24, Y+2	; 0x02
    454e:	9b 81       	ldd	r25, Y+3	; 0x03
    4550:	30 97       	sbiw	r30, 0x00	; 0
    4552:	19 f0       	breq	.+6      	; 0x455a <malloc+0x3c>
    4554:	93 83       	std	Z+3, r25	; 0x03
    4556:	82 83       	std	Z+2, r24	; 0x02
    4558:	04 c0       	rjmp	.+8      	; 0x4562 <malloc+0x44>
    455a:	90 93 cd 03 	sts	0x03CD, r25
    455e:	80 93 cc 03 	sts	0x03CC, r24
    4562:	fe 01       	movw	r30, r28
    4564:	34 c0       	rjmp	.+104    	; 0x45ce <malloc+0xb0>
    4566:	68 17       	cp	r22, r24
    4568:	79 07       	cpc	r23, r25
    456a:	38 f4       	brcc	.+14     	; 0x457a <malloc+0x5c>
    456c:	41 15       	cp	r20, r1
    456e:	51 05       	cpc	r21, r1
    4570:	19 f0       	breq	.+6      	; 0x4578 <malloc+0x5a>
    4572:	84 17       	cp	r24, r20
    4574:	95 07       	cpc	r25, r21
    4576:	08 f4       	brcc	.+2      	; 0x457a <malloc+0x5c>
    4578:	ac 01       	movw	r20, r24
    457a:	fe 01       	movw	r30, r28
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	9b 81       	ldd	r25, Y+3	; 0x03
    4580:	9c 01       	movw	r18, r24
    4582:	e9 01       	movw	r28, r18
    4584:	20 97       	sbiw	r28, 0x00	; 0
    4586:	e9 f6       	brne	.-70     	; 0x4542 <malloc+0x24>
    4588:	41 15       	cp	r20, r1
    458a:	51 05       	cpc	r21, r1
    458c:	a9 f1       	breq	.+106    	; 0x45f8 <malloc+0xda>
    458e:	ca 01       	movw	r24, r20
    4590:	86 1b       	sub	r24, r22
    4592:	97 0b       	sbc	r25, r23
    4594:	04 97       	sbiw	r24, 0x04	; 4
    4596:	08 f4       	brcc	.+2      	; 0x459a <malloc+0x7c>
    4598:	ba 01       	movw	r22, r20
    459a:	e0 e0       	ldi	r30, 0x00	; 0
    459c:	f0 e0       	ldi	r31, 0x00	; 0
    459e:	2a c0       	rjmp	.+84     	; 0x45f4 <malloc+0xd6>
    45a0:	8d 91       	ld	r24, X+
    45a2:	9c 91       	ld	r25, X
    45a4:	11 97       	sbiw	r26, 0x01	; 1
    45a6:	84 17       	cp	r24, r20
    45a8:	95 07       	cpc	r25, r21
    45aa:	f9 f4       	brne	.+62     	; 0x45ea <malloc+0xcc>
    45ac:	64 17       	cp	r22, r20
    45ae:	75 07       	cpc	r23, r21
    45b0:	81 f4       	brne	.+32     	; 0x45d2 <malloc+0xb4>
    45b2:	12 96       	adiw	r26, 0x02	; 2
    45b4:	8d 91       	ld	r24, X+
    45b6:	9c 91       	ld	r25, X
    45b8:	13 97       	sbiw	r26, 0x03	; 3
    45ba:	30 97       	sbiw	r30, 0x00	; 0
    45bc:	19 f0       	breq	.+6      	; 0x45c4 <malloc+0xa6>
    45be:	93 83       	std	Z+3, r25	; 0x03
    45c0:	82 83       	std	Z+2, r24	; 0x02
    45c2:	04 c0       	rjmp	.+8      	; 0x45cc <malloc+0xae>
    45c4:	90 93 cd 03 	sts	0x03CD, r25
    45c8:	80 93 cc 03 	sts	0x03CC, r24
    45cc:	fd 01       	movw	r30, r26
    45ce:	32 96       	adiw	r30, 0x02	; 2
    45d0:	4f c0       	rjmp	.+158    	; 0x4670 <malloc+0x152>
    45d2:	ca 01       	movw	r24, r20
    45d4:	86 1b       	sub	r24, r22
    45d6:	97 0b       	sbc	r25, r23
    45d8:	fd 01       	movw	r30, r26
    45da:	e8 0f       	add	r30, r24
    45dc:	f9 1f       	adc	r31, r25
    45de:	61 93       	st	Z+, r22
    45e0:	71 93       	st	Z+, r23
    45e2:	02 97       	sbiw	r24, 0x02	; 2
    45e4:	8d 93       	st	X+, r24
    45e6:	9c 93       	st	X, r25
    45e8:	43 c0       	rjmp	.+134    	; 0x4670 <malloc+0x152>
    45ea:	fd 01       	movw	r30, r26
    45ec:	82 81       	ldd	r24, Z+2	; 0x02
    45ee:	93 81       	ldd	r25, Z+3	; 0x03
    45f0:	9c 01       	movw	r18, r24
    45f2:	d9 01       	movw	r26, r18
    45f4:	10 97       	sbiw	r26, 0x00	; 0
    45f6:	a1 f6       	brne	.-88     	; 0x45a0 <malloc+0x82>
    45f8:	80 91 ca 03 	lds	r24, 0x03CA
    45fc:	90 91 cb 03 	lds	r25, 0x03CB
    4600:	89 2b       	or	r24, r25
    4602:	41 f4       	brne	.+16     	; 0x4614 <malloc+0xf6>
    4604:	80 91 6a 01 	lds	r24, 0x016A
    4608:	90 91 6b 01 	lds	r25, 0x016B
    460c:	90 93 cb 03 	sts	0x03CB, r25
    4610:	80 93 ca 03 	sts	0x03CA, r24
    4614:	40 91 6c 01 	lds	r20, 0x016C
    4618:	50 91 6d 01 	lds	r21, 0x016D
    461c:	41 15       	cp	r20, r1
    461e:	51 05       	cpc	r21, r1
    4620:	41 f4       	brne	.+16     	; 0x4632 <malloc+0x114>
    4622:	4d b7       	in	r20, 0x3d	; 61
    4624:	5e b7       	in	r21, 0x3e	; 62
    4626:	80 91 68 01 	lds	r24, 0x0168
    462a:	90 91 69 01 	lds	r25, 0x0169
    462e:	48 1b       	sub	r20, r24
    4630:	59 0b       	sbc	r21, r25
    4632:	20 91 ca 03 	lds	r18, 0x03CA
    4636:	30 91 cb 03 	lds	r19, 0x03CB
    463a:	24 17       	cp	r18, r20
    463c:	35 07       	cpc	r19, r21
    463e:	b0 f4       	brcc	.+44     	; 0x466c <malloc+0x14e>
    4640:	ca 01       	movw	r24, r20
    4642:	82 1b       	sub	r24, r18
    4644:	93 0b       	sbc	r25, r19
    4646:	86 17       	cp	r24, r22
    4648:	97 07       	cpc	r25, r23
    464a:	80 f0       	brcs	.+32     	; 0x466c <malloc+0x14e>
    464c:	ab 01       	movw	r20, r22
    464e:	4e 5f       	subi	r20, 0xFE	; 254
    4650:	5f 4f       	sbci	r21, 0xFF	; 255
    4652:	84 17       	cp	r24, r20
    4654:	95 07       	cpc	r25, r21
    4656:	50 f0       	brcs	.+20     	; 0x466c <malloc+0x14e>
    4658:	42 0f       	add	r20, r18
    465a:	53 1f       	adc	r21, r19
    465c:	50 93 cb 03 	sts	0x03CB, r21
    4660:	40 93 ca 03 	sts	0x03CA, r20
    4664:	f9 01       	movw	r30, r18
    4666:	61 93       	st	Z+, r22
    4668:	71 93       	st	Z+, r23
    466a:	02 c0       	rjmp	.+4      	; 0x4670 <malloc+0x152>
    466c:	e0 e0       	ldi	r30, 0x00	; 0
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	cf 01       	movw	r24, r30
    4672:	df 91       	pop	r29
    4674:	cf 91       	pop	r28
    4676:	08 95       	ret

00004678 <free>:
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	09 f4       	brne	.+2      	; 0x4682 <free+0xa>
    4680:	50 c0       	rjmp	.+160    	; 0x4722 <free+0xaa>
    4682:	ec 01       	movw	r28, r24
    4684:	22 97       	sbiw	r28, 0x02	; 2
    4686:	1b 82       	std	Y+3, r1	; 0x03
    4688:	1a 82       	std	Y+2, r1	; 0x02
    468a:	a0 91 cc 03 	lds	r26, 0x03CC
    468e:	b0 91 cd 03 	lds	r27, 0x03CD
    4692:	10 97       	sbiw	r26, 0x00	; 0
    4694:	09 f1       	breq	.+66     	; 0x46d8 <free+0x60>
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	ac 17       	cp	r26, r28
    469c:	bd 07       	cpc	r27, r29
    469e:	08 f1       	brcs	.+66     	; 0x46e2 <free+0x6a>
    46a0:	bb 83       	std	Y+3, r27	; 0x03
    46a2:	aa 83       	std	Y+2, r26	; 0x02
    46a4:	fe 01       	movw	r30, r28
    46a6:	21 91       	ld	r18, Z+
    46a8:	31 91       	ld	r19, Z+
    46aa:	e2 0f       	add	r30, r18
    46ac:	f3 1f       	adc	r31, r19
    46ae:	ae 17       	cp	r26, r30
    46b0:	bf 07       	cpc	r27, r31
    46b2:	79 f4       	brne	.+30     	; 0x46d2 <free+0x5a>
    46b4:	8d 91       	ld	r24, X+
    46b6:	9c 91       	ld	r25, X
    46b8:	11 97       	sbiw	r26, 0x01	; 1
    46ba:	28 0f       	add	r18, r24
    46bc:	39 1f       	adc	r19, r25
    46be:	2e 5f       	subi	r18, 0xFE	; 254
    46c0:	3f 4f       	sbci	r19, 0xFF	; 255
    46c2:	39 83       	std	Y+1, r19	; 0x01
    46c4:	28 83       	st	Y, r18
    46c6:	12 96       	adiw	r26, 0x02	; 2
    46c8:	8d 91       	ld	r24, X+
    46ca:	9c 91       	ld	r25, X
    46cc:	13 97       	sbiw	r26, 0x03	; 3
    46ce:	9b 83       	std	Y+3, r25	; 0x03
    46d0:	8a 83       	std	Y+2, r24	; 0x02
    46d2:	41 15       	cp	r20, r1
    46d4:	51 05       	cpc	r21, r1
    46d6:	71 f4       	brne	.+28     	; 0x46f4 <free+0x7c>
    46d8:	d0 93 cd 03 	sts	0x03CD, r29
    46dc:	c0 93 cc 03 	sts	0x03CC, r28
    46e0:	20 c0       	rjmp	.+64     	; 0x4722 <free+0xaa>
    46e2:	12 96       	adiw	r26, 0x02	; 2
    46e4:	8d 91       	ld	r24, X+
    46e6:	9c 91       	ld	r25, X
    46e8:	13 97       	sbiw	r26, 0x03	; 3
    46ea:	ad 01       	movw	r20, r26
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	11 f0       	breq	.+4      	; 0x46f4 <free+0x7c>
    46f0:	dc 01       	movw	r26, r24
    46f2:	d3 cf       	rjmp	.-90     	; 0x469a <free+0x22>
    46f4:	fa 01       	movw	r30, r20
    46f6:	d3 83       	std	Z+3, r29	; 0x03
    46f8:	c2 83       	std	Z+2, r28	; 0x02
    46fa:	21 91       	ld	r18, Z+
    46fc:	31 91       	ld	r19, Z+
    46fe:	e2 0f       	add	r30, r18
    4700:	f3 1f       	adc	r31, r19
    4702:	ce 17       	cp	r28, r30
    4704:	df 07       	cpc	r29, r31
    4706:	69 f4       	brne	.+26     	; 0x4722 <free+0xaa>
    4708:	88 81       	ld	r24, Y
    470a:	99 81       	ldd	r25, Y+1	; 0x01
    470c:	28 0f       	add	r18, r24
    470e:	39 1f       	adc	r19, r25
    4710:	2e 5f       	subi	r18, 0xFE	; 254
    4712:	3f 4f       	sbci	r19, 0xFF	; 255
    4714:	fa 01       	movw	r30, r20
    4716:	31 83       	std	Z+1, r19	; 0x01
    4718:	20 83       	st	Z, r18
    471a:	8a 81       	ldd	r24, Y+2	; 0x02
    471c:	9b 81       	ldd	r25, Y+3	; 0x03
    471e:	93 83       	std	Z+3, r25	; 0x03
    4720:	82 83       	std	Z+2, r24	; 0x02
    4722:	df 91       	pop	r29
    4724:	cf 91       	pop	r28
    4726:	08 95       	ret

00004728 <_exit>:
    4728:	f8 94       	cli

0000472a <__stop_program>:
    472a:	ff cf       	rjmp	.-2      	; 0x472a <__stop_program>
