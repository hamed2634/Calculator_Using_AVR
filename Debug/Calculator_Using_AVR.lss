
Calculator_Using_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00004598  0000462c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  0080019a  0080019a  00004766  2**0
                  ALLOC
  3 .stab         00003aa4  00000000  00000000  00004768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174f  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000995b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00009b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00009d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000d885  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000eb30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000ed10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000f00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fa15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 21 	call	0x423e	; 0x423e <main>
      8a:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 21 	jmp	0x432c	; 0x432c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 97 21 	jmp	0x432e	; 0x432e <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 9e 21 	jmp	0x433c	; 0x433c <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e8 59       	subi	r30, 0x98	; 152
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <DIO_enuInit>:
#include "DIO_config.h"



ES DIO_enuInit(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 83       	std	Y+1, r24	; 0x01

	//Initialize Direction Pins
	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     e66:	ea e3       	ldi	r30, 0x3A	; 58
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     e6e:	e7 e3       	ldi	r30, 0x37	; 55
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     e76:	e4 e3       	ldi	r30, 0x34	; 52
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     e7e:	e1 e3       	ldi	r30, 0x31	; 49
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	80 83       	st	Z, r24

	//Initialize Port Pins
	PORTA = CONC(PA_PIN7_Val, PA_PIN6_Val, PA_PIN5_Val, PA_PIN4_Val, PA_PIN3_Val, PA_PIN2_Val, PA_PIN1_Val, PA_PIN0_Val);
     e86:	eb e3       	ldi	r30, 0x3B	; 59
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_Val, PB_PIN6_Val, PB_PIN5_Val, PB_PIN4_Val, PB_PIN3_Val, PB_PIN2_Val, PB_PIN1_Val, PB_PIN0_Val);
     e8e:	e8 e3       	ldi	r30, 0x38	; 56
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8e ef       	ldi	r24, 0xFE	; 254
     e94:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_Val, PC_PIN6_Val, PC_PIN5_Val, PC_PIN4_Val, PC_PIN3_Val, PC_PIN2_Val, PC_PIN1_Val, PC_PIN0_Val);
     e96:	e5 e3       	ldi	r30, 0x35	; 53
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_Val, PD_PIN6_Val, PD_PIN5_Val, PD_PIN4_Val, PD_PIN3_Val, PD_PIN2_Val, PD_PIN1_Val, PD_PIN0_Val);
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     ea6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <DIO_enuSetPortDirection>:


ES DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <DIO_enuSetPortDirection+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <DIO_enuSetPortDirection+0x8>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	8a 83       	std	Y+2, r24	; 0x02
     ec2:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	18 f0       	brcs	.+6      	; 0xed4 <DIO_enuSetPortDirection+0x22>
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	33 c0       	rjmp	.+102    	; 0xf3a <DIO_enuSetPortDirection+0x88>
	else{
		switch(Copy_u8PortID){
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 83       	std	Y+5, r19	; 0x05
     edc:	2c 83       	std	Y+4, r18	; 0x04
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	d1 f0       	breq	.+52     	; 0xf1c <DIO_enuSetPortDirection+0x6a>
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	3d 81       	ldd	r19, Y+5	; 0x05
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	2c f4       	brge	.+10     	; 0xefc <DIO_enuSetPortDirection+0x4a>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	61 f0       	breq	.+24     	; 0xf12 <DIO_enuSetPortDirection+0x60>
     efa:	1e c0       	rjmp	.+60     	; 0xf38 <DIO_enuSetPortDirection+0x86>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	81 f0       	breq	.+32     	; 0xf26 <DIO_enuSetPortDirection+0x74>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	91 05       	cpc	r25, r1
     f0e:	81 f0       	breq	.+32     	; 0xf30 <DIO_enuSetPortDirection+0x7e>
     f10:	13 c0       	rjmp	.+38     	; 0xf38 <DIO_enuSetPortDirection+0x86>
			case DIO_PORTA:
				DDRA = Copy_u8Value;
     f12:	ea e3       	ldi	r30, 0x3A	; 58
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	80 83       	st	Z, r24
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTB:
				DDRB = Copy_u8Value;
     f1c:	e7 e3       	ldi	r30, 0x37	; 55
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	80 83       	st	Z, r24
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTC:
				DDRC = Copy_u8Value;
     f26:	e4 e3       	ldi	r30, 0x34	; 52
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <DIO_enuSetPortDirection+0x86>
				break;
			case DIO_PORTD:
				DDRD = Copy_u8Value;
     f30:	e1 e3       	ldi	r30, 0x31	; 49
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     f38:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <DIO_enuSetPortValue>:

ES DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_enuSetPortValue+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <DIO_enuSetPortValue+0x8>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	18 f0       	brcs	.+6      	; 0xf6e <DIO_enuSetPortValue+0x22>
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	33 c0       	rjmp	.+102    	; 0xfd4 <DIO_enuSetPortValue+0x88>
	else{
		switch(Copy_u8PortID){
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3d 83       	std	Y+5, r19	; 0x05
     f76:	2c 83       	std	Y+4, r18	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	d1 f0       	breq	.+52     	; 0xfb6 <DIO_enuSetPortValue+0x6a>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	2c f4       	brge	.+10     	; 0xf96 <DIO_enuSetPortValue+0x4a>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	61 f0       	breq	.+24     	; 0xfac <DIO_enuSetPortValue+0x60>
     f94:	1e c0       	rjmp	.+60     	; 0xfd2 <DIO_enuSetPortValue+0x86>
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	3d 81       	ldd	r19, Y+5	; 0x05
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	81 f0       	breq	.+32     	; 0xfc0 <DIO_enuSetPortValue+0x74>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	81 f0       	breq	.+32     	; 0xfca <DIO_enuSetPortValue+0x7e>
     faa:	13 c0       	rjmp	.+38     	; 0xfd2 <DIO_enuSetPortValue+0x86>
			case DIO_PORTA:
				PORTA = Copy_u8Value;
     fac:	eb e3       	ldi	r30, 0x3B	; 59
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	80 83       	st	Z, r24
     fb4:	0e c0       	rjmp	.+28     	; 0xfd2 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
     fb6:	e8 e3       	ldi	r30, 0x38	; 56
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	80 83       	st	Z, r24
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
     fc0:	e5 e3       	ldi	r30, 0x35	; 53
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	80 83       	st	Z, r24
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <DIO_enuSetPortValue+0x86>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
     fca:	e2 e3       	ldi	r30, 0x32	; 50
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
     fd2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <DIO_enuTogPort>:

ES DIO_enuTogPort(u8 Copy_u8PortID)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <DIO_enuTogPort+0x6>
     fec:	00 d0       	rcall	.+0      	; 0xfee <DIO_enuTogPort+0x8>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <DIO_enuTogPort+0x1e>
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	3f c0       	rjmp	.+126    	; 0x1082 <DIO_enuTogPort+0x9c>
	else{
		switch(Copy_u8PortID){
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3c 83       	std	Y+4, r19	; 0x04
    100c:	2b 83       	std	Y+3, r18	; 0x03
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	e9 f0       	breq	.+58     	; 0x1052 <DIO_enuTogPort+0x6c>
    1018:	2b 81       	ldd	r18, Y+3	; 0x03
    101a:	3c 81       	ldd	r19, Y+4	; 0x04
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	2c f4       	brge	.+10     	; 0x102c <DIO_enuTogPort+0x46>
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	61 f0       	breq	.+24     	; 0x1042 <DIO_enuTogPort+0x5c>
    102a:	2a c0       	rjmp	.+84     	; 0x1080 <DIO_enuTogPort+0x9a>
    102c:	2b 81       	ldd	r18, Y+3	; 0x03
    102e:	3c 81       	ldd	r19, Y+4	; 0x04
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	b1 f0       	breq	.+44     	; 0x1062 <DIO_enuTogPort+0x7c>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	c9 f0       	breq	.+50     	; 0x1072 <DIO_enuTogPort+0x8c>
    1040:	1f c0       	rjmp	.+62     	; 0x1080 <DIO_enuTogPort+0x9a>
			case DIO_PORTA:
				PORTA = ~PORTA;
    1042:	ab e3       	ldi	r26, 0x3B	; 59
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 95       	com	r24
    104e:	8c 93       	st	X, r24
    1050:	17 c0       	rjmp	.+46     	; 0x1080 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    1052:	a8 e3       	ldi	r26, 0x38	; 56
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e8 e3       	ldi	r30, 0x38	; 56
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 95       	com	r24
    105e:	8c 93       	st	X, r24
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	80 95       	com	r24
    106e:	8c 93       	st	X, r24
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <DIO_enuTogPort+0x9a>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 95       	com	r24
    107e:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1080:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_enuGetPort>:

ES DIO_enuGetPort(u8 Copy_u8PortID, u8* Copy_pu8Value)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_enuGetPort+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_enuGetPort+0x8>
    109a:	00 d0       	rcall	.+0      	; 0x109c <DIO_enuGetPort+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	7c 83       	std	Y+4, r23	; 0x04
    10a4:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value == NULL) Local_enuErrorState = ES_NULL_POINTER;
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <DIO_enuGetPort+0x26>
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	41 c0       	rjmp	.+130    	; 0x113a <DIO_enuGetPort+0xa8>
	else if (Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	18 f0       	brcs	.+6      	; 0x10c4 <DIO_enuGetPort+0x32>
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	3b c0       	rjmp	.+118    	; 0x113a <DIO_enuGetPort+0xa8>
	else{
		switch(Copy_u8PortID){
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	3e 83       	std	Y+6, r19	; 0x06
    10cc:	2d 83       	std	Y+5, r18	; 0x05
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	e1 f0       	breq	.+56     	; 0x1110 <DIO_enuGetPort+0x7e>
    10d8:	2d 81       	ldd	r18, Y+5	; 0x05
    10da:	3e 81       	ldd	r19, Y+6	; 0x06
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <DIO_enuGetPort+0x5a>
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	61 f0       	breq	.+24     	; 0x1102 <DIO_enuGetPort+0x70>
    10ea:	26 c0       	rjmp	.+76     	; 0x1138 <DIO_enuGetPort+0xa6>
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	3e 81       	ldd	r19, Y+6	; 0x06
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	a1 f0       	breq	.+40     	; 0x111e <DIO_enuGetPort+0x8c>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	b1 f0       	breq	.+44     	; 0x112c <DIO_enuGetPort+0x9a>
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <DIO_enuGetPort+0xa6>
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1102:	e9 e3       	ldi	r30, 0x39	; 57
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	eb 81       	ldd	r30, Y+3	; 0x03
    110a:	fc 81       	ldd	r31, Y+4	; 0x04
    110c:	80 83       	st	Z, r24
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1110:	e6 e3       	ldi	r30, 0x36	; 54
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	eb 81       	ldd	r30, Y+3	; 0x03
    1118:	fc 81       	ldd	r31, Y+4	; 0x04
    111a:	80 83       	st	Z, r24
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	eb 81       	ldd	r30, Y+3	; 0x03
    1126:	fc 81       	ldd	r31, Y+4	; 0x04
    1128:	80 83       	st	Z, r24
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <DIO_enuGetPort+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    112c:	e0 e3       	ldi	r30, 0x30	; 48
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	eb 81       	ldd	r30, Y+3	; 0x03
    1134:	fc 81       	ldd	r31, Y+4	; 0x04
    1136:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1138:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enuErrorState;
    113a:	89 81       	ldd	r24, Y+1	; 0x01
}
    113c:	26 96       	adiw	r28, 0x06	; 6
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <DIO_enuSetPinDirection>:




ES DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_enuSetPinDirection+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_enuSetPinDirection+0x8>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_enuSetPinDirection+0xa>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	8a 83       	std	Y+2, r24	; 0x02
    115e:	6b 83       	std	Y+3, r22	; 0x03
    1160:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	18 f4       	brcc	.+6      	; 0x1172 <DIO_enuSetPinDirection+0x24>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	18 f0       	brcs	.+6      	; 0x1178 <DIO_enuSetPinDirection+0x2a>
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	cd c0       	rjmp	.+410    	; 0x1312 <DIO_enuSetPinDirection+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	18 f0       	brcs	.+6      	; 0x1184 <DIO_enuSetPinDirection+0x36>
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	c7 c0       	rjmp	.+398    	; 0x1312 <DIO_enuSetPinDirection+0x1c4>
	else {
		switch(Copy_u8PortID){
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3e 83       	std	Y+6, r19	; 0x06
    118c:	2d 83       	std	Y+5, r18	; 0x05
    118e:	6d 81       	ldd	r22, Y+5	; 0x05
    1190:	7e 81       	ldd	r23, Y+6	; 0x06
    1192:	61 30       	cpi	r22, 0x01	; 1
    1194:	71 05       	cpc	r23, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_enuSetPinDirection+0x4c>
    1198:	41 c0       	rjmp	.+130    	; 0x121c <DIO_enuSetPinDirection+0xce>
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	91 05       	cpc	r25, r1
    11a2:	34 f4       	brge	.+12     	; 0x11b0 <DIO_enuSetPinDirection+0x62>
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	21 15       	cp	r18, r1
    11aa:	31 05       	cpc	r19, r1
    11ac:	71 f0       	breq	.+28     	; 0x11ca <DIO_enuSetPinDirection+0x7c>
    11ae:	b0 c0       	rjmp	.+352    	; 0x1310 <DIO_enuSetPinDirection+0x1c2>
    11b0:	6d 81       	ldd	r22, Y+5	; 0x05
    11b2:	7e 81       	ldd	r23, Y+6	; 0x06
    11b4:	62 30       	cpi	r22, 0x02	; 2
    11b6:	71 05       	cpc	r23, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <DIO_enuSetPinDirection+0x6e>
    11ba:	59 c0       	rjmp	.+178    	; 0x126e <DIO_enuSetPinDirection+0x120>
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <DIO_enuSetPinDirection+0x7a>
    11c6:	7c c0       	rjmp	.+248    	; 0x12c0 <DIO_enuSetPinDirection+0x172>
    11c8:	a3 c0       	rjmp	.+326    	; 0x1310 <DIO_enuSetPinDirection+0x1c2>
			case DIO_PORTA:
				DDRA &= ~(1 << Copy_u8PinID);
    11ca:	aa e3       	ldi	r26, 0x3A	; 58
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ea e3       	ldi	r30, 0x3A	; 58
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_enuSetPinDirection+0x98>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	2a 95       	dec	r18
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_enuSetPinDirection+0x94>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
				DDRA |= (Copy_u8Value << Copy_u8PinID);
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	b9 01       	movw	r22, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_enuSetPinDirection+0xc2>
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_enuSetPinDirection+0xbe>
    1214:	cb 01       	movw	r24, r22
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	7a c0       	rjmp	.+244    	; 0x1310 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTB:
				DDRB &= ~(1 << Copy_u8PinID);
    121c:	a7 e3       	ldi	r26, 0x37	; 55
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e7 e3       	ldi	r30, 0x37	; 55
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_enuSetPinDirection+0xea>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	2a 95       	dec	r18
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_enuSetPinDirection+0xe6>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
				DDRB |= (Copy_u8Value << Copy_u8PinID);
    1242:	a7 e3       	ldi	r26, 0x37	; 55
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e7 e3       	ldi	r30, 0x37	; 55
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	b9 01       	movw	r22, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_enuSetPinDirection+0x114>
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_enuSetPinDirection+0x110>
    1266:	cb 01       	movw	r24, r22
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	51 c0       	rjmp	.+162    	; 0x1310 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTC:
				DDRC &= ~(1 << Copy_u8PinID);
    126e:	a4 e3       	ldi	r26, 0x34	; 52
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_enuSetPinDirection+0x13c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	2a 95       	dec	r18
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_enuSetPinDirection+0x138>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
				DDRC |= (Copy_u8Value << Copy_u8PinID);
    1294:	a4 e3       	ldi	r26, 0x34	; 52
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b9 01       	movw	r22, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_enuSetPinDirection+0x166>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_enuSetPinDirection+0x162>
    12b8:	cb 01       	movw	r24, r22
    12ba:	84 2b       	or	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	28 c0       	rjmp	.+80     	; 0x1310 <DIO_enuSetPinDirection+0x1c2>
				break;
			case DIO_PORTD:
				DDRD &= ~(1 << Copy_u8PinID);
    12c0:	a1 e3       	ldi	r26, 0x31	; 49
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_enuSetPinDirection+0x18e>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	2a 95       	dec	r18
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_enuSetPinDirection+0x18a>
    12e0:	80 95       	com	r24
    12e2:	84 23       	and	r24, r20
    12e4:	8c 93       	st	X, r24
				DDRD |= (Copy_u8Value << Copy_u8PinID);
    12e6:	a1 e3       	ldi	r26, 0x31	; 49
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e1 e3       	ldi	r30, 0x31	; 49
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	b9 01       	movw	r22, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_enuSetPinDirection+0x1b8>
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_enuSetPinDirection+0x1b4>
    130a:	cb 01       	movw	r24, r22
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1310:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
}
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_enuSetPinValue>:

ES DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_enuSetPinValue+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_enuSetPinValue+0x8>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_enuSetPinValue+0xa>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	8a 83       	std	Y+2, r24	; 0x02
    1336:	6b 83       	std	Y+3, r22	; 0x03
    1338:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD || Copy_u8Value > OUTPUT) Local_enuErrorState = ES_OUT_OF_RANGE;
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	18 f4       	brcc	.+6      	; 0x134a <DIO_enuSetPinValue+0x24>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	18 f0       	brcs	.+6      	; 0x1350 <DIO_enuSetPinValue+0x2a>
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	cd c0       	rjmp	.+410    	; 0x14ea <DIO_enuSetPinValue+0x1c4>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	18 f0       	brcs	.+6      	; 0x135c <DIO_enuSetPinValue+0x36>
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	c7 c0       	rjmp	.+398    	; 0x14ea <DIO_enuSetPinValue+0x1c4>
	else{
		switch(Copy_u8PortID){
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3e 83       	std	Y+6, r19	; 0x06
    1364:	2d 83       	std	Y+5, r18	; 0x05
    1366:	6d 81       	ldd	r22, Y+5	; 0x05
    1368:	7e 81       	ldd	r23, Y+6	; 0x06
    136a:	61 30       	cpi	r22, 0x01	; 1
    136c:	71 05       	cpc	r23, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <DIO_enuSetPinValue+0x4c>
    1370:	41 c0       	rjmp	.+130    	; 0x13f4 <DIO_enuSetPinValue+0xce>
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	91 05       	cpc	r25, r1
    137a:	34 f4       	brge	.+12     	; 0x1388 <DIO_enuSetPinValue+0x62>
    137c:	2d 81       	ldd	r18, Y+5	; 0x05
    137e:	3e 81       	ldd	r19, Y+6	; 0x06
    1380:	21 15       	cp	r18, r1
    1382:	31 05       	cpc	r19, r1
    1384:	71 f0       	breq	.+28     	; 0x13a2 <DIO_enuSetPinValue+0x7c>
    1386:	b0 c0       	rjmp	.+352    	; 0x14e8 <DIO_enuSetPinValue+0x1c2>
    1388:	6d 81       	ldd	r22, Y+5	; 0x05
    138a:	7e 81       	ldd	r23, Y+6	; 0x06
    138c:	62 30       	cpi	r22, 0x02	; 2
    138e:	71 05       	cpc	r23, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <DIO_enuSetPinValue+0x6e>
    1392:	59 c0       	rjmp	.+178    	; 0x1446 <DIO_enuSetPinValue+0x120>
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <DIO_enuSetPinValue+0x7a>
    139e:	7c c0       	rjmp	.+248    	; 0x1498 <DIO_enuSetPinValue+0x172>
    13a0:	a3 c0       	rjmp	.+326    	; 0x14e8 <DIO_enuSetPinValue+0x1c2>
			case DIO_PORTA:
				PORTA &= ~(1 << Copy_u8PinID);
    13a2:	ab e3       	ldi	r26, 0x3B	; 59
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_enuSetPinValue+0x98>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	2a 95       	dec	r18
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_enuSetPinValue+0x94>
    13c2:	80 95       	com	r24
    13c4:	84 23       	and	r24, r20
    13c6:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value << Copy_u8PinID);
    13c8:	ab e3       	ldi	r26, 0x3B	; 59
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	eb e3       	ldi	r30, 0x3B	; 59
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	b9 01       	movw	r22, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_enuSetPinValue+0xc2>
    13e4:	66 0f       	add	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_enuSetPinValue+0xbe>
    13ec:	cb 01       	movw	r24, r22
    13ee:	84 2b       	or	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	7a c0       	rjmp	.+244    	; 0x14e8 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTB:
				PORTB &= ~(1 << Copy_u8PinID);
    13f4:	a8 e3       	ldi	r26, 0x38	; 56
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_enuSetPinValue+0xea>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	2a 95       	dec	r18
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_enuSetPinValue+0xe6>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value << Copy_u8PinID);
    141a:	a8 e3       	ldi	r26, 0x38	; 56
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e8 e3       	ldi	r30, 0x38	; 56
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	b9 01       	movw	r22, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_enuSetPinValue+0x114>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	8a 95       	dec	r24
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_enuSetPinValue+0x110>
    143e:	cb 01       	movw	r24, r22
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	51 c0       	rjmp	.+162    	; 0x14e8 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTC:
				PORTC &= ~(1 << Copy_u8PinID);
    1446:	a5 e3       	ldi	r26, 0x35	; 53
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e5 e3       	ldi	r30, 0x35	; 53
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_enuSetPinValue+0x13c>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	2a 95       	dec	r18
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_enuSetPinValue+0x138>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value << Copy_u8PinID);
    146c:	a5 e3       	ldi	r26, 0x35	; 53
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e3       	ldi	r30, 0x35	; 53
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	b9 01       	movw	r22, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_enuSetPinValue+0x166>
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_enuSetPinValue+0x162>
    1490:	cb 01       	movw	r24, r22
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	28 c0       	rjmp	.+80     	; 0x14e8 <DIO_enuSetPinValue+0x1c2>
				break;
			case DIO_PORTD:
				PORTD &= ~(1 << Copy_u8PinID);
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_enuSetPinValue+0x18e>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	2a 95       	dec	r18
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_enuSetPinValue+0x18a>
    14b8:	80 95       	com	r24
    14ba:	84 23       	and	r24, r20
    14bc:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value << Copy_u8PinID);
    14be:	a2 e3       	ldi	r26, 0x32	; 50
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e2 e3       	ldi	r30, 0x32	; 50
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	b9 01       	movw	r22, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <DIO_enuSetPinValue+0x1b8>
    14da:	66 0f       	add	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	8a 95       	dec	r24
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <DIO_enuSetPinValue+0x1b4>
    14e2:	cb 01       	movw	r24, r22
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    14e8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	26 96       	adiw	r28, 0x06	; 6
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_enuGetpin>:

ES DIO_enuGetpin(u8 Copy_u8PortID,u8 Copy_u8PinID, u8* Copy_pu8Value)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	27 97       	sbiw	r28, 0x07	; 7
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	6b 83       	std	Y+3, r22	; 0x03
    1516:	5d 83       	std	Y+5, r21	; 0x05
    1518:	4c 83       	std	Y+4, r20	; 0x04
	ES Local_enuErrorState = ES_NOK;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	18 f0       	brcs	.+6      	; 0x152a <DIO_enuGetpin+0x2c>
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	7e c0       	rjmp	.+252    	; 0x1626 <DIO_enuGetpin+0x128>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 30       	cpi	r24, 0x08	; 8
    152e:	18 f0       	brcs	.+6      	; 0x1536 <DIO_enuGetpin+0x38>
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	78 c0       	rjmp	.+240    	; 0x1626 <DIO_enuGetpin+0x128>
	else if(Copy_pu8Value == NULL)Local_enuErrorState = ES_NULL_POINTER;
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	19 f4       	brne	.+6      	; 0x1544 <DIO_enuGetpin+0x46>
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	71 c0       	rjmp	.+226    	; 0x1626 <DIO_enuGetpin+0x128>
	else{
		switch(Copy_u8PortID){
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3f 83       	std	Y+7, r19	; 0x07
    154c:	2e 83       	std	Y+6, r18	; 0x06
    154e:	4e 81       	ldd	r20, Y+6	; 0x06
    1550:	5f 81       	ldd	r21, Y+7	; 0x07
    1552:	41 30       	cpi	r20, 0x01	; 1
    1554:	51 05       	cpc	r21, r1
    1556:	59 f1       	breq	.+86     	; 0x15ae <DIO_enuGetpin+0xb0>
    1558:	8e 81       	ldd	r24, Y+6	; 0x06
    155a:	9f 81       	ldd	r25, Y+7	; 0x07
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	34 f4       	brge	.+12     	; 0x156e <DIO_enuGetpin+0x70>
    1562:	2e 81       	ldd	r18, Y+6	; 0x06
    1564:	3f 81       	ldd	r19, Y+7	; 0x07
    1566:	21 15       	cp	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	69 f0       	breq	.+26     	; 0x1586 <DIO_enuGetpin+0x88>
    156c:	5b c0       	rjmp	.+182    	; 0x1624 <DIO_enuGetpin+0x126>
    156e:	4e 81       	ldd	r20, Y+6	; 0x06
    1570:	5f 81       	ldd	r21, Y+7	; 0x07
    1572:	42 30       	cpi	r20, 0x02	; 2
    1574:	51 05       	cpc	r21, r1
    1576:	79 f1       	breq	.+94     	; 0x15d6 <DIO_enuGetpin+0xd8>
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <DIO_enuGetpin+0x86>
    1582:	3d c0       	rjmp	.+122    	; 0x15fe <DIO_enuGetpin+0x100>
    1584:	4f c0       	rjmp	.+158    	; 0x1624 <DIO_enuGetpin+0x126>
			case DIO_PORTA:
				*Copy_pu8Value = getBit(PINA,Copy_u8PinID);
    1586:	e9 e3       	ldi	r30, 0x39	; 57
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a9 01       	movw	r20, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_enuGetpin+0xa0>
    159a:	55 95       	asr	r21
    159c:	47 95       	ror	r20
    159e:	8a 95       	dec	r24
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_enuGetpin+0x9c>
    15a2:	ca 01       	movw	r24, r20
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	ec 81       	ldd	r30, Y+4	; 0x04
    15a8:	fd 81       	ldd	r31, Y+5	; 0x05
    15aa:	80 83       	st	Z, r24
    15ac:	3b c0       	rjmp	.+118    	; 0x1624 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = getBit(PINB,Copy_u8PinID);
    15ae:	e6 e3       	ldi	r30, 0x36	; 54
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a9 01       	movw	r20, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_enuGetpin+0xc8>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_enuGetpin+0xc4>
    15ca:	ca 01       	movw	r24, r20
    15cc:	81 70       	andi	r24, 0x01	; 1
    15ce:	ec 81       	ldd	r30, Y+4	; 0x04
    15d0:	fd 81       	ldd	r31, Y+5	; 0x05
    15d2:	80 83       	st	Z, r24
    15d4:	27 c0       	rjmp	.+78     	; 0x1624 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = getBit(PINC,Copy_u8PinID);
    15d6:	e3 e3       	ldi	r30, 0x33	; 51
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a9 01       	movw	r20, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_enuGetpin+0xf0>
    15ea:	55 95       	asr	r21
    15ec:	47 95       	ror	r20
    15ee:	8a 95       	dec	r24
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_enuGetpin+0xec>
    15f2:	ca 01       	movw	r24, r20
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	ec 81       	ldd	r30, Y+4	; 0x04
    15f8:	fd 81       	ldd	r31, Y+5	; 0x05
    15fa:	80 83       	st	Z, r24
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <DIO_enuGetpin+0x126>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = getBit(PIND,Copy_u8PinID);
    15fe:	e0 e3       	ldi	r30, 0x30	; 48
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_enuGetpin+0x118>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_enuGetpin+0x114>
    161a:	ca 01       	movw	r24, r20
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	ec 81       	ldd	r30, Y+4	; 0x04
    1620:	fd 81       	ldd	r31, Y+5	; 0x05
    1622:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1624:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
}
    1628:	27 96       	adiw	r28, 0x07	; 7
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <DIO_enuTogPin>:

ES DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_enuTogPin+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_enuTogPin+0x8>
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	8a 83       	std	Y+2, r24	; 0x02
    164a:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_enuErrorState = ES_NOK;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID < DIO_PORTA || Copy_u8PortID > DIO_PORTD) Local_enuErrorState = ES_OUT_OF_RANGE;
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	18 f0       	brcs	.+6      	; 0x165c <DIO_enuTogPin+0x22>
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	75 c0       	rjmp	.+234    	; 0x1746 <DIO_enuTogPin+0x10c>
	else if (Copy_u8PinID < DIO_PIN0 || Copy_u8PinID > DIO_PIN7 ) Local_enuErrorState = ES_OUT_OF_RANGE;
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	18 f0       	brcs	.+6      	; 0x1668 <DIO_enuTogPin+0x2e>
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6f c0       	rjmp	.+222    	; 0x1746 <DIO_enuTogPin+0x10c>
	else{
		switch(Copy_u8PortID){
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	49 f1       	breq	.+82     	; 0x16ce <DIO_enuTogPin+0x94>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <DIO_enuTogPin+0x56>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 f0       	breq	.+24     	; 0x16a6 <DIO_enuTogPin+0x6c>
    168e:	5a c0       	rjmp	.+180    	; 0x1744 <DIO_enuTogPin+0x10a>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	71 f1       	breq	.+92     	; 0x16f6 <DIO_enuTogPin+0xbc>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	e9 f1       	breq	.+122    	; 0x171e <DIO_enuTogPin+0xe4>
    16a4:	4f c0       	rjmp	.+158    	; 0x1744 <DIO_enuTogPin+0x10a>
			case DIO_PORTA:
				PORTA ^= (1 << Copy_u8PinID);
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_enuTogPin+0x8a>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_enuTogPin+0x86>
    16c8:	84 27       	eor	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	3b c0       	rjmp	.+118    	; 0x1744 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTB:
				PORTB ^= (1 << Copy_u8PinID);
    16ce:	a8 e3       	ldi	r26, 0x38	; 56
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e8 e3       	ldi	r30, 0x38	; 56
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_enuTogPin+0xb2>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_enuTogPin+0xae>
    16f0:	84 27       	eor	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTC:
				PORTC ^= (1 << Copy_u8PinID);
    16f6:	a5 e3       	ldi	r26, 0x35	; 53
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e3       	ldi	r30, 0x35	; 53
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_enuTogPin+0xda>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_enuTogPin+0xd6>
    1718:	84 27       	eor	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	13 c0       	rjmp	.+38     	; 0x1744 <DIO_enuTogPin+0x10a>
				break;
			case DIO_PORTD:
				PORTD ^= (1 << Copy_u8PinID);
    171e:	a2 e3       	ldi	r26, 0x32	; 50
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e2 e3       	ldi	r30, 0x32	; 50
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_enuTogPin+0x102>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_enuTogPin+0xfe>
    1740:	84 27       	eor	r24, r20
    1742:	8c 93       	st	X, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    1744:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState;
    1746:	89 81       	ldd	r24, Y+1	; 0x01

}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <Initialize_Stack>:
#include "..\stdTypes.h"
#include "stdlib.h"
#include "stack.h"

void Initialize_Stack(Stack* ps){
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <Initialize_Stack+0x6>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
	ps->top = NULL;
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	11 82       	std	Z+1, r1	; 0x01
    176c:	10 82       	st	Z, r1
	ps->size = 0;
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	13 82       	std	Z+3, r1	; 0x03
    1774:	12 82       	std	Z+2, r1	; 0x02
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <Push>:

void Push(Stack* ps, StackEntry val){
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <Push+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <Push+0x8>
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	9c 83       	std	Y+4, r25	; 0x04
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	6d 83       	std	Y+5, r22	; 0x05
	StackNode* pn = (StackNode*) malloc(sizeof(StackNode));
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 c5 21 	call	0x438a	; 0x438a <malloc>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
	pn->entry = val;
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	80 83       	st	Z, r24
	pn->next = ps->top;
    17a8:	eb 81       	ldd	r30, Y+3	; 0x03
    17aa:	fc 81       	ldd	r31, Y+4	; 0x04
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	92 83       	std	Z+2, r25	; 0x02
    17b6:	81 83       	std	Z+1, r24	; 0x01
	ps->top = pn;
    17b8:	eb 81       	ldd	r30, Y+3	; 0x03
    17ba:	fc 81       	ldd	r31, Y+4	; 0x04
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
	ps->size++;
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	eb 81       	ldd	r30, Y+3	; 0x03
    17d0:	fc 81       	ldd	r31, Y+4	; 0x04
    17d2:	93 83       	std	Z+3, r25	; 0x03
    17d4:	82 83       	std	Z+2, r24	; 0x02
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <Pop>:

void Pop(StackEntry *pe,Stack* ps){
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <Pop+0x6>
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <Pop+0x8>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <Pop+0xa>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	7e 83       	std	Y+6, r23	; 0x06
    17fa:	6d 83       	std	Y+5, r22	; 0x05
	*pe = ps->top->entry;
    17fc:	ed 81       	ldd	r30, Y+5	; 0x05
    17fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1800:	01 90       	ld	r0, Z+
    1802:	f0 81       	ld	r31, Z
    1804:	e0 2d       	mov	r30, r0
    1806:	80 81       	ld	r24, Z
    1808:	eb 81       	ldd	r30, Y+3	; 0x03
    180a:	fc 81       	ldd	r31, Y+4	; 0x04
    180c:	80 83       	st	Z, r24
	StackNode* pn = ps->top;
    180e:	ed 81       	ldd	r30, Y+5	; 0x05
    1810:	fe 81       	ldd	r31, Y+6	; 0x06
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
	ps->top = ps->top->next;
    181a:	ed 81       	ldd	r30, Y+5	; 0x05
    181c:	fe 81       	ldd	r31, Y+6	; 0x06
    181e:	01 90       	ld	r0, Z+
    1820:	f0 81       	ld	r31, Z
    1822:	e0 2d       	mov	r30, r0
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	92 81       	ldd	r25, Z+2	; 0x02
    1828:	ed 81       	ldd	r30, Y+5	; 0x05
    182a:	fe 81       	ldd	r31, Y+6	; 0x06
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
	free(pn);
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	0e 94 72 22 	call	0x44e4	; 0x44e4 <free>
	ps->size--;
    1838:	ed 81       	ldd	r30, Y+5	; 0x05
    183a:	fe 81       	ldd	r31, Y+6	; 0x06
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	ed 81       	ldd	r30, Y+5	; 0x05
    1844:	fe 81       	ldd	r31, Y+6	; 0x06
    1846:	93 83       	std	Z+3, r25	; 0x03
    1848:	82 83       	std	Z+2, r24	; 0x02
}
    184a:	26 96       	adiw	r28, 0x06	; 6
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <Stack_Empty>:

int Stack_Empty(Stack* ps){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <Stack_Empty+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <Stack_Empty+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	return ps->top == NULL;
    186c:	e9 81       	ldd	r30, Y+1	; 0x01
    186e:	fa 81       	ldd	r31, Y+2	; 0x02
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	1c 82       	std	Y+4, r1	; 0x04
    1876:	1b 82       	std	Y+3, r1	; 0x03
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	21 f4       	brne	.+8      	; 0x1884 <Stack_Empty+0x28>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <Stack_Size>:

int Stack_Size(Stack* ps){
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <Stack_Size+0x6>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
	return ps->size;
    18a4:	e9 81       	ldd	r30, Y+1	; 0x01
    18a6:	fa 81       	ldd	r31, Y+2	; 0x02
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <Clear_Stack>:

void Clear_Stack(Stack* ps){
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <Clear_Stack+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <Clear_Stack+0x8>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
	StackNode* pn = ps->top;
    18c6:	eb 81       	ldd	r30, Y+3	; 0x03
    18c8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	12 c0       	rjmp	.+36     	; 0x18f8 <Clear_Stack+0x42>
	while(pn){
		pn = pn->next;
    18d4:	e9 81       	ldd	r30, Y+1	; 0x01
    18d6:	fa 81       	ldd	r31, Y+2	; 0x02
    18d8:	81 81       	ldd	r24, Z+1	; 0x01
    18da:	92 81       	ldd	r25, Z+2	; 0x02
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
		free(ps->top);
    18e0:	eb 81       	ldd	r30, Y+3	; 0x03
    18e2:	fc 81       	ldd	r31, Y+4	; 0x04
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	0e 94 72 22 	call	0x44e4	; 0x44e4 <free>
		ps->top = pn;
    18ec:	eb 81       	ldd	r30, Y+3	; 0x03
    18ee:	fc 81       	ldd	r31, Y+4	; 0x04
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
	return ps->size;
}

void Clear_Stack(Stack* ps){
	StackNode* pn = ps->top;
	while(pn){
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	51 f7       	brne	.-44     	; 0x18d4 <Clear_Stack+0x1e>
		pn = pn->next;
		free(ps->top);
		ps->top = pn;
	}
	ps->size = 0;
    1900:	eb 81       	ldd	r30, Y+3	; 0x03
    1902:	fc 81       	ldd	r31, Y+4	; 0x04
    1904:	13 82       	std	Z+3, r1	; 0x03
    1906:	12 82       	std	Z+2, r1	; 0x02
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <Top>:


StackEntry Top(Stack* ps){
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <Top+0x6>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
	return ps->top->entry;
    1924:	e9 81       	ldd	r30, Y+1	; 0x01
    1926:	fa 81       	ldd	r31, Y+2	; 0x02
    1928:	01 90       	ld	r0, Z+
    192a:	f0 81       	ld	r31, Z
    192c:	e0 2d       	mov	r30, r0
    192e:	80 81       	ld	r24, Z
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <max>:
 */


double factorial[100];

int max(int a, int b){
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <max+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <max+0x8>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <max+0xa>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	7c 83       	std	Y+4, r23	; 0x04
    194e:	6b 83       	std	Y+3, r22	; 0x03
	if(a > b) return a;
    1950:	29 81       	ldd	r18, Y+1	; 0x01
    1952:	3a 81       	ldd	r19, Y+2	; 0x02
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	82 17       	cp	r24, r18
    195a:	93 07       	cpc	r25, r19
    195c:	2c f4       	brge	.+10     	; 0x1968 <max+0x2e>
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <max+0x36>
	return b;
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1974:	26 96       	adiw	r28, 0x06	; 6
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Float_Abs>:
double Float_Abs(double a,double b){
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	2c 97       	sbiw	r28, 0x0c	; 12
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	69 83       	std	Y+1, r22	; 0x01
    199c:	7a 83       	std	Y+2, r23	; 0x02
    199e:	8b 83       	std	Y+3, r24	; 0x03
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	2d 83       	std	Y+5, r18	; 0x05
    19a4:	3e 83       	std	Y+6, r19	; 0x06
    19a6:	4f 83       	std	Y+7, r20	; 0x07
    19a8:	58 87       	std	Y+8, r21	; 0x08
	if(a > b) return a - b;
    19aa:	69 81       	ldd	r22, Y+1	; 0x01
    19ac:	7a 81       	ldd	r23, Y+2	; 0x02
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	2d 81       	ldd	r18, Y+5	; 0x05
    19b4:	3e 81       	ldd	r19, Y+6	; 0x06
    19b6:	4f 81       	ldd	r20, Y+7	; 0x07
    19b8:	58 85       	ldd	r21, Y+8	; 0x08
    19ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	8c f4       	brge	.+34     	; 0x19e4 <Float_Abs+0x5e>
    19c2:	69 81       	ldd	r22, Y+1	; 0x01
    19c4:	7a 81       	ldd	r23, Y+2	; 0x02
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	2d 81       	ldd	r18, Y+5	; 0x05
    19cc:	3e 81       	ldd	r19, Y+6	; 0x06
    19ce:	4f 81       	ldd	r20, Y+7	; 0x07
    19d0:	58 85       	ldd	r21, Y+8	; 0x08
    19d2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	89 87       	std	Y+9, r24	; 0x09
    19dc:	9a 87       	std	Y+10, r25	; 0x0a
    19de:	ab 87       	std	Y+11, r26	; 0x0b
    19e0:	bc 87       	std	Y+12, r27	; 0x0c
    19e2:	10 c0       	rjmp	.+32     	; 0x1a04 <Float_Abs+0x7e>
	return b - a;
    19e4:	6d 81       	ldd	r22, Y+5	; 0x05
    19e6:	7e 81       	ldd	r23, Y+6	; 0x06
    19e8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ea:	98 85       	ldd	r25, Y+8	; 0x08
    19ec:	29 81       	ldd	r18, Y+1	; 0x01
    19ee:	3a 81       	ldd	r19, Y+2	; 0x02
    19f0:	4b 81       	ldd	r20, Y+3	; 0x03
    19f2:	5c 81       	ldd	r21, Y+4	; 0x04
    19f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	89 87       	std	Y+9, r24	; 0x09
    19fe:	9a 87       	std	Y+10, r25	; 0x0a
    1a00:	ab 87       	std	Y+11, r26	; 0x0b
    1a02:	bc 87       	std	Y+12, r27	; 0x0c
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a0a:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	2c 96       	adiw	r28, 0x0c	; 12
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <Math_voidInit>:

void Math_voidInit(){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	set_factorial();
    1a2a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <set_factorial>
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <set_factorial>:

void set_factorial(){
    1a34:	cf 92       	push	r12
    1a36:	df 92       	push	r13
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <set_factorial+0x12>
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    factorial[0] = 1;
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 e8       	ldi	r26, 0x80	; 128
    1a50:	bf e3       	ldi	r27, 0x3F	; 63
    1a52:	80 93 9a 01 	sts	0x019A, r24
    1a56:	90 93 9b 01 	sts	0x019B, r25
    1a5a:	a0 93 9c 01 	sts	0x019C, r26
    1a5e:	b0 93 9d 01 	sts	0x019D, r27
    for(int i = 1; i < 100; i++){
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	35 c0       	rjmp	.+106    	; 0x1ad6 <set_factorial+0xa2>
        factorial[i] = factorial[i - 1] * i;
    1a6c:	c9 80       	ldd	r12, Y+1	; 0x01
    1a6e:	da 80       	ldd	r13, Y+2	; 0x02
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e6 56       	subi	r30, 0x66	; 102
    1a82:	fe 4f       	sbci	r31, 0xFE	; 254
    1a84:	e0 80       	ld	r14, Z
    1a86:	f1 80       	ldd	r15, Z+1	; 0x01
    1a88:	02 81       	ldd	r16, Z+2	; 0x02
    1a8a:	13 81       	ldd	r17, Z+3	; 0x03
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	aa 27       	eor	r26, r26
    1a92:	97 fd       	sbrc	r25, 7
    1a94:	a0 95       	com	r26
    1a96:	ba 2f       	mov	r27, r26
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	c8 01       	movw	r24, r16
    1aa6:	b7 01       	movw	r22, r14
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9c 01       	movw	r18, r24
    1ab2:	ad 01       	movw	r20, r26
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	fc 01       	movw	r30, r24
    1ac0:	e6 56       	subi	r30, 0x66	; 102
    1ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac4:	20 83       	st	Z, r18
    1ac6:	31 83       	std	Z+1, r19	; 0x01
    1ac8:	42 83       	std	Z+2, r20	; 0x02
    1aca:	53 83       	std	Z+3, r21	; 0x03
	set_factorial();
}

void set_factorial(){
    factorial[0] = 1;
    for(int i = 1; i < 100; i++){
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ada:	84 36       	cpi	r24, 0x64	; 100
    1adc:	91 05       	cpc	r25, r1
    1ade:	34 f2       	brlt	.-116    	; 0x1a6c <set_factorial+0x38>
        factorial[i] = factorial[i - 1] * i;
    }
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	08 95       	ret

00001af6 <LN>:

double LN(double x) {
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	62 97       	sbiw	r28, 0x12	; 18
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	6b 87       	std	Y+11, r22	; 0x0b
    1b0c:	7c 87       	std	Y+12, r23	; 0x0c
    1b0e:	8d 87       	std	Y+13, r24	; 0x0d
    1b10:	9e 87       	std	Y+14, r25	; 0x0e

    if (x >= 2) {
    1b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e4       	ldi	r21, 0x40	; 64
    1b22:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    1b26:	88 23       	and	r24, r24
    1b28:	0c f1       	brlt	.+66     	; 0x1b6c <LN+0x76>
        return LN(x/2.0) + (double)0.6931471806;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e4       	ldi	r21, 0x40	; 64
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LN>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	28 e1       	ldi	r18, 0x18	; 24
    1b54:	32 e7       	ldi	r19, 0x72	; 114
    1b56:	41 e3       	ldi	r20, 0x31	; 49
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8f 87       	std	Y+15, r24	; 0x0f
    1b64:	98 8b       	std	Y+16, r25	; 0x10
    1b66:	a9 8b       	std	Y+17, r26	; 0x11
    1b68:	ba 8b       	std	Y+18, r27	; 0x12
    1b6a:	93 c0       	rjmp	.+294    	; 0x1c92 <LN+0x19c>
    }

    x = x-1;
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8b 87       	std	Y+11, r24	; 0x0b
    1b86:	9c 87       	std	Y+12, r25	; 0x0c
    1b88:	ad 87       	std	Y+13, r26	; 0x0d
    1b8a:	be 87       	std	Y+14, r27	; 0x0e

    double total = 0.0;
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	8f 83       	std	Y+7, r24	; 0x07
    1b96:	98 87       	std	Y+8, r25	; 0x08
    1b98:	a9 87       	std	Y+9, r26	; 0x09
    1b9a:	ba 87       	std	Y+10, r27	; 0x0a
    double xToTheIPower = x;
    1b9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba0:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ba2:	be 85       	ldd	r27, Y+14	; 0x0e
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    1ba6:	9c 83       	std	Y+4, r25	; 0x04
    1ba8:	ad 83       	std	Y+5, r26	; 0x05
    1baa:	be 83       	std	Y+6, r27	; 0x06

    for (int i = 1; i < 100; i++) {
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	60 c0       	rjmp	.+192    	; 0x1c76 <LN+0x180>
        if (i&1) total += xToTheIPower / (i);
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	88 23       	and	r24, r24
    1bc0:	19 f1       	breq	.+70     	; 0x1c08 <LN+0x112>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	aa 27       	eor	r26, r26
    1bc8:	97 fd       	sbrc	r25, 7
    1bca:	a0 95       	com	r26
    1bcc:	ba 2f       	mov	r27, r26
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	6b 81       	ldd	r22, Y+3	; 0x03
    1bdc:	7c 81       	ldd	r23, Y+4	; 0x04
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9c 01       	movw	r18, r24
    1bec:	ad 01       	movw	r20, r26
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8f 83       	std	Y+7, r24	; 0x07
    1c00:	98 87       	std	Y+8, r25	; 0x08
    1c02:	a9 87       	std	Y+9, r26	; 0x09
    1c04:	ba 87       	std	Y+10, r27	; 0x0a
    1c06:	22 c0       	rjmp	.+68     	; 0x1c4c <LN+0x156>
        else total -= xToTheIPower / (i);
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	aa 27       	eor	r26, r26
    1c0e:	97 fd       	sbrc	r25, 7
    1c10:	a0 95       	com	r26
    1c12:	ba 2f       	mov	r27, r26
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	6b 81       	ldd	r22, Y+3	; 0x03
    1c22:	7c 81       	ldd	r23, Y+4	; 0x04
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9c 01       	movw	r18, r24
    1c32:	ad 01       	movw	r20, r26
    1c34:	6f 81       	ldd	r22, Y+7	; 0x07
    1c36:	78 85       	ldd	r23, Y+8	; 0x08
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8f 83       	std	Y+7, r24	; 0x07
    1c46:	98 87       	std	Y+8, r25	; 0x08
    1c48:	a9 87       	std	Y+9, r26	; 0x09
    1c4a:	ba 87       	std	Y+10, r27	; 0x0a
        xToTheIPower *= x;
    1c4c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c4e:	7c 81       	ldd	r23, Y+4	; 0x04
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c56:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c58:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c5a:	5e 85       	ldd	r21, Y+14	; 0x0e
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	9c 83       	std	Y+4, r25	; 0x04
    1c68:	ad 83       	std	Y+5, r26	; 0x05
    1c6a:	be 83       	std	Y+6, r27	; 0x06
    x = x-1;

    double total = 0.0;
    double xToTheIPower = x;

    for (int i = 1; i < 100; i++) {
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	84 36       	cpi	r24, 0x64	; 100
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	0c f4       	brge	.+2      	; 0x1c82 <LN+0x18c>
    1c80:	9a cf       	rjmp	.-204    	; 0x1bb6 <LN+0xc0>
        if (i&1) total += xToTheIPower / (i);
        else total -= xToTheIPower / (i);
        xToTheIPower *= x;
    }
    return total;
    1c82:	8f 81       	ldd	r24, Y+7	; 0x07
    1c84:	98 85       	ldd	r25, Y+8	; 0x08
    1c86:	a9 85       	ldd	r26, Y+9	; 0x09
    1c88:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	98 8b       	std	Y+16, r25	; 0x10
    1c8e:	a9 8b       	std	Y+17, r26	; 0x11
    1c90:	ba 8b       	std	Y+18, r27	; 0x12
    1c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c94:	98 89       	ldd	r25, Y+16	; 0x10
    1c96:	a9 89       	ldd	r26, Y+17	; 0x11
    1c98:	ba 89       	ldd	r27, Y+18	; 0x12
}
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	62 96       	adiw	r28, 0x12	; 18
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <e>:

double e(double x){
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	2e 97       	sbiw	r28, 0x0e	; 14
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	6b 87       	std	Y+11, r22	; 0x0b
    1cc6:	7c 87       	std	Y+12, r23	; 0x0c
    1cc8:	8d 87       	std	Y+13, r24	; 0x0d
    1cca:	9e 87       	std	Y+14, r25	; 0x0e
    double sum = 0, xToTheIPower = 1;
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a0 e8       	ldi	r26, 0x80	; 128
    1ce2:	bf e3       	ldi	r27, 0x3F	; 63
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	ad 83       	std	Y+5, r26	; 0x05
    1cea:	be 83       	std	Y+6, r27	; 0x06
    for (int i = 0; i < 38; i++){
    1cec:	1a 82       	std	Y+2, r1	; 0x02
    1cee:	19 82       	std	Y+1, r1	; 0x01
    1cf0:	38 c0       	rjmp	.+112    	; 0x1d62 <e+0xb2>
        sum += xToTheIPower/factorial[i] ;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	fc 01       	movw	r30, r24
    1d00:	e6 56       	subi	r30, 0x66	; 102
    1d02:	fe 4f       	sbci	r31, 0xFE	; 254
    1d04:	20 81       	ld	r18, Z
    1d06:	31 81       	ldd	r19, Z+1	; 0x01
    1d08:	42 81       	ldd	r20, Z+2	; 0x02
    1d0a:	53 81       	ldd	r21, Z+3	; 0x03
    1d0c:	6b 81       	ldd	r22, Y+3	; 0x03
    1d0e:	7c 81       	ldd	r23, Y+4	; 0x04
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9c 01       	movw	r18, r24
    1d1e:	ad 01       	movw	r20, r26
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	8f 83       	std	Y+7, r24	; 0x07
    1d32:	98 87       	std	Y+8, r25	; 0x08
    1d34:	a9 87       	std	Y+9, r26	; 0x09
    1d36:	ba 87       	std	Y+10, r27	; 0x0a
        xToTheIPower *= x;
    1d38:	6b 81       	ldd	r22, Y+3	; 0x03
    1d3a:	7c 81       	ldd	r23, Y+4	; 0x04
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d42:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d44:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d46:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	8b 83       	std	Y+3, r24	; 0x03
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	ad 83       	std	Y+5, r26	; 0x05
    1d56:	be 83       	std	Y+6, r27	; 0x06
    return total;
}

double e(double x){
    double sum = 0, xToTheIPower = 1;
    for (int i = 0; i < 38; i++){
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	86 32       	cpi	r24, 0x26	; 38
    1d68:	91 05       	cpc	r25, r1
    1d6a:	1c f2       	brlt	.-122    	; 0x1cf2 <e+0x42>
        sum += xToTheIPower/factorial[i] ;
        xToTheIPower *= x;
    }
    return sum;
    1d6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6e:	98 85       	ldd	r25, Y+8	; 0x08
    1d70:	a9 85       	ldd	r26, Y+9	; 0x09
    1d72:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	2e 96       	adiw	r28, 0x0e	; 14
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <power>:

double power(double a,double b){
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	28 97       	sbiw	r28, 0x08	; 8
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	69 83       	std	Y+1, r22	; 0x01
    1da0:	7a 83       	std	Y+2, r23	; 0x02
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	2d 83       	std	Y+5, r18	; 0x05
    1da8:	3e 83       	std	Y+6, r19	; 0x06
    1daa:	4f 83       	std	Y+7, r20	; 0x07
    1dac:	58 87       	std	Y+8, r21	; 0x08
    return e(b * LN(a));
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	ab 81       	ldd	r26, Y+3	; 0x03
    1db4:	bc 81       	ldd	r27, Y+4	; 0x04
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LN>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dca:	4f 81       	ldd	r20, Y+7	; 0x07
    1dcc:	58 85       	ldd	r21, Y+8	; 0x08
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <e>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
}
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	28 96       	adiw	r28, 0x08	; 8
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <LCD_enuInit>:
#include "LCD_config.h"
#include "LCD_priv.h"

#include "util/delay.h"

ES LCD_enuInit(void){
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	e9 97       	sbiw	r28, 0x39	; 57
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
	ES Local_enuErrorState = ES_NOK;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	41 e0       	ldi	r20, 0x01	; 1
    1e16:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	62 e0       	ldi	r22, 0x02	; 2
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	67 e0       	ldi	r22, 0x07	; 7
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	66 e0       	ldi	r22, 0x06	; 6
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	65 e0       	ldi	r22, 0x05	; 5
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	ac e0       	ldi	r26, 0x0C	; 12
    1e5c:	b2 e4       	ldi	r27, 0x42	; 66
    1e5e:	8d ab       	std	Y+53, r24	; 0x35
    1e60:	9e ab       	std	Y+54, r25	; 0x36
    1e62:	af ab       	std	Y+55, r26	; 0x37
    1e64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6d a9       	ldd	r22, Y+53	; 0x35
    1e68:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	53 e4       	ldi	r21, 0x43	; 67
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	89 ab       	std	Y+49, r24	; 0x31
    1e80:	9a ab       	std	Y+50, r25	; 0x32
    1e82:	ab ab       	std	Y+51, r26	; 0x33
    1e84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_enuInit+0xb0>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	98 ab       	std	Y+48, r25	; 0x30
    1ea4:	8f a7       	std	Y+47, r24	; 0x2f
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_enuInit+0x110>
    1eea:	89 e1       	ldi	r24, 0x19	; 25
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e a7       	std	Y+46, r25	; 0x2e
    1ef0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_enuInit+0xfe>
    1efa:	9e a7       	std	Y+46, r25	; 0x2e
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_enuInit+0xf2>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	69 a9       	ldd	r22, Y+49	; 0x31
    1f14:	7a a9       	ldd	r23, Y+50	; 0x32
    1f16:	8b a9       	ldd	r24, Y+51	; 0x33
    1f18:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	9c a7       	std	Y+44, r25	; 0x2c
    1f2c:	8b a7       	std	Y+43, r24	; 0x2b
    1f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_enuInit+0x13a>
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	63 e0       	ldi	r22, 0x03	; 3
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
	LCD_inVoidSendCommand(0x3B);
    1f62:	8b e3       	ldi	r24, 0x3B	; 59
    1f64:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_inVoidSendCommand>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e8       	ldi	r26, 0x80	; 128
    1f6e:	bf e3       	ldi	r27, 0x3F	; 63
    1f70:	8f a3       	std	Y+39, r24	; 0x27
    1f72:	98 a7       	std	Y+40, r25	; 0x28
    1f74:	a9 a7       	std	Y+41, r26	; 0x29
    1f76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	6f a1       	ldd	r22, Y+39	; 0x27
    1f7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a e7       	ldi	r20, 0x7A	; 122
    1f86:	53 e4       	ldi	r21, 0x43	; 67
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8b a3       	std	Y+35, r24	; 0x23
    1f92:	9c a3       	std	Y+36, r25	; 0x24
    1f94:	ad a3       	std	Y+37, r26	; 0x25
    1f96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f98:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	2c f4       	brge	.+10     	; 0x1fba <LCD_enuInit+0x1c2>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9a a3       	std	Y+34, r25	; 0x22
    1fb6:	89 a3       	std	Y+33, r24	; 0x21
    1fb8:	3f c0       	rjmp	.+126    	; 0x2038 <LCD_enuInit+0x240>
	else if (__tmp > 65535)
    1fba:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f5       	brge	.+82     	; 0x2024 <LCD_enuInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	51 e4       	ldi	r21, 0x41	; 65
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9a a3       	std	Y+34, r25	; 0x22
    1ff8:	89 a3       	std	Y+33, r24	; 0x21
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <LCD_enuInit+0x222>
    1ffc:	89 e1       	ldi	r24, 0x19	; 25
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 a3       	std	Y+32, r25	; 0x20
    2002:	8f 8f       	std	Y+31, r24	; 0x1f
    2004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2006:	98 a1       	ldd	r25, Y+32	; 0x20
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_enuInit+0x210>
    200c:	98 a3       	std	Y+32, r25	; 0x20
    200e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	9a a3       	std	Y+34, r25	; 0x22
    2018:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	69 f7       	brne	.-38     	; 0x1ffc <LCD_enuInit+0x204>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <LCD_enuInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	6b a1       	ldd	r22, Y+35	; 0x23
    2026:	7c a1       	ldd	r23, Y+36	; 0x24
    2028:	8d a1       	ldd	r24, Y+37	; 0x25
    202a:	9e a1       	ldd	r25, Y+38	; 0x26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	89 a1       	ldd	r24, Y+33	; 0x21
    203a:	9a a1       	ldd	r25, Y+34	; 0x22
    203c:	9e 8f       	std	Y+30, r25	; 0x1e
    203e:	8d 8f       	std	Y+29, r24	; 0x1d
    2040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_enuInit+0x24c>
    2048:	9e 8f       	std	Y+30, r25	; 0x1e
    204a:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommand(0x2B);
#endif
	_delay_ms(1);
	LCD_inVoidSendCommand(0x0f);
    204c:	8f e0       	ldi	r24, 0x0F	; 15
    204e:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_inVoidSendCommand>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	89 8f       	std	Y+25, r24	; 0x19
    205c:	9a 8f       	std	Y+26, r25	; 0x1a
    205e:	ab 8f       	std	Y+27, r26	; 0x1b
    2060:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	69 8d       	ldd	r22, Y+25	; 0x19
    2064:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a e7       	ldi	r20, 0x7A	; 122
    2070:	53 e4       	ldi	r21, 0x43	; 67
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8d 8b       	std	Y+21, r24	; 0x15
    207c:	9e 8b       	std	Y+22, r25	; 0x16
    207e:	af 8b       	std	Y+23, r26	; 0x17
    2080:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_enuInit+0x2ac>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c 8b       	std	Y+20, r25	; 0x14
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_enuInit+0x32a>
	else if (__tmp > 65535)
    20a4:	6d 89       	ldd	r22, Y+21	; 0x15
    20a6:	7e 89       	ldd	r23, Y+22	; 0x16
    20a8:	8f 89       	ldd	r24, Y+23	; 0x17
    20aa:	98 8d       	ldd	r25, Y+24	; 0x18
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_enuInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	69 8d       	ldd	r22, Y+25	; 0x19
    20be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_enuInit+0x30c>
    20e6:	89 e1       	ldi	r24, 0x19	; 25
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9a 8b       	std	Y+18, r25	; 0x12
    20ec:	89 8b       	std	Y+17, r24	; 0x11
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	9a 89       	ldd	r25, Y+18	; 0x12
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_enuInit+0x2fa>
    20f6:	9a 8b       	std	Y+18, r25	; 0x12
    20f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8b 89       	ldd	r24, Y+19	; 0x13
    20fc:	9c 89       	ldd	r25, Y+20	; 0x14
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8b 89       	ldd	r24, Y+19	; 0x13
    2106:	9c 89       	ldd	r25, Y+20	; 0x14
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_enuInit+0x2ee>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_enuInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6d 89       	ldd	r22, Y+21	; 0x15
    2110:	7e 89       	ldd	r23, Y+22	; 0x16
    2112:	8f 89       	ldd	r24, Y+23	; 0x17
    2114:	98 8d       	ldd	r25, Y+24	; 0x18
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	8b 89       	ldd	r24, Y+19	; 0x13
    2124:	9c 89       	ldd	r25, Y+20	; 0x14
    2126:	98 8b       	std	Y+16, r25	; 0x10
    2128:	8f 87       	std	Y+15, r24	; 0x0f
    212a:	8f 85       	ldd	r24, Y+15	; 0x0f
    212c:	98 89       	ldd	r25, Y+16	; 0x10
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_enuInit+0x336>
    2132:	98 8b       	std	Y+16, r25	; 0x10
    2134:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_inVoidSendCommand(0x01);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_inVoidSendCommand>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e4       	ldi	r27, 0x40	; 64
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	ad 87       	std	Y+13, r26	; 0x0d
    214a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a e7       	ldi	r20, 0x7A	; 122
    215a:	53 e4       	ldi	r21, 0x43	; 67
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f 83       	std	Y+7, r24	; 0x07
    2166:	98 87       	std	Y+8, r25	; 0x08
    2168:	a9 87       	std	Y+9, r26	; 0x09
    216a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_enuInit+0x396>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	3f c0       	rjmp	.+126    	; 0x220c <LCD_enuInit+0x414>
	else if (__tmp > 65535)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <LCD_enuInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_enuInit+0x3f6>
    21d0:	89 e1       	ldi	r24, 0x19	; 25
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_enuInit+0x3e4>
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <LCD_enuInit+0x3d8>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <LCD_enuInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_enuInit+0x420>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_inVoidSendCommand(0x06);
    2220:	86 e0       	ldi	r24, 0x06	; 6
    2222:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_inVoidSendCommand>

	Local_enuErrorState = ES_OK;
    2226:	19 ae       	std	Y+57, r1	; 0x39
	return Local_enuErrorState;
    2228:	89 ad       	ldd	r24, Y+57	; 0x39
}
    222a:	e9 96       	adiw	r28, 0x39	; 57
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_enuDisplayChar>:

ES LCD_enuDisplayChar(u8 Copy_u8Data){
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <LCD_enuDisplayChar+0x6>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	LCD_VoidLatch(Copy_u8Data);
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <LCD_VoidLatch>

	Local_enuErrorState = ES_OK;
    225c:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <LCD_enuSendCommand>:

ES LCD_enuSendCommand(u8 Copy_u8Command){
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <LCD_enuSendCommand+0x6>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	8a 83       	std	Y+2, r24	; 0x02
	ES Local_enuErrorState = ES_NOK;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	LCD_VoidLatch(Copy_u8Command);
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <LCD_VoidLatch>

	Local_enuErrorState = ES_OK;
    228a:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <LCD_enuClearDisplay>:

ES LCD_enuClearDisplay(){
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
	ES Local_enuErrorState = ES_NOK;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01

	LCD_inVoidSendCommand(0x01);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_inVoidSendCommand>

	Local_enuErrorState = ES_OK;
    22ac:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <LCD_VoidLatch>:

static void LCD_VoidLatch(u8 Copy_u8Data)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	6d 97       	sbiw	r28, 0x1d	; 29
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    22e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e4:	98 2f       	mov	r25, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	99 27       	eor	r25, r25
    22ea:	99 1f       	adc	r25, r25
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	67 e0       	ldi	r22, 0x07	; 7
    22f0:	49 2f       	mov	r20, r25
    22f2:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    22f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f8:	82 95       	swap	r24
    22fa:	86 95       	lsr	r24
    22fc:	86 95       	lsr	r24
    22fe:	83 70       	andi	r24, 0x03	; 3
    2300:	98 2f       	mov	r25, r24
    2302:	91 70       	andi	r25, 0x01	; 1
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	66 e0       	ldi	r22, 0x06	; 6
    2308:	49 2f       	mov	r20, r25
    230a:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    230e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2310:	82 95       	swap	r24
    2312:	86 95       	lsr	r24
    2314:	87 70       	andi	r24, 0x07	; 7
    2316:	98 2f       	mov	r25, r24
    2318:	91 70       	andi	r25, 0x01	; 1
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	65 e0       	ldi	r22, 0x05	; 5
    231e:	49 2f       	mov	r20, r25
    2320:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2326:	82 95       	swap	r24
    2328:	8f 70       	andi	r24, 0x0F	; 15
    232a:	98 2f       	mov	r25, r24
    232c:	91 70       	andi	r25, 0x01	; 1
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	64 e0       	ldi	r22, 0x04	; 4
    2332:	49 2f       	mov	r20, r25
    2334:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233a:	86 95       	lsr	r24
    233c:	86 95       	lsr	r24
    233e:	86 95       	lsr	r24
    2340:	98 2f       	mov	r25, r24
    2342:	91 70       	andi	r25, 0x01	; 1
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	63 e0       	ldi	r22, 0x03	; 3
    2348:	49 2f       	mov	r20, r25
    234a:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    234e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2350:	86 95       	lsr	r24
    2352:	86 95       	lsr	r24
    2354:	98 2f       	mov	r25, r24
    2356:	91 70       	andi	r25, 0x01	; 1
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	62 e0       	ldi	r22, 0x02	; 2
    235c:	49 2f       	mov	r20, r25
    235e:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    2362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2364:	86 95       	lsr	r24
    2366:	98 2f       	mov	r25, r24
    2368:	91 70       	andi	r25, 0x01	; 1
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	49 2f       	mov	r20, r25
    2370:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    2374:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2376:	98 2f       	mov	r25, r24
    2378:	91 70       	andi	r25, 0x01	; 1
    237a:	82 e0       	ldi	r24, 0x02	; 2
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	49 2f       	mov	r20, r25
    2380:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
#endif

	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e2       	ldi	r26, 0x20	; 32
    2394:	b1 e4       	ldi	r27, 0x41	; 65
    2396:	89 8f       	std	Y+25, r24	; 0x19
    2398:	9a 8f       	std	Y+26, r25	; 0x1a
    239a:	ab 8f       	std	Y+27, r26	; 0x1b
    239c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	69 8d       	ldd	r22, Y+25	; 0x19
    23a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a e7       	ldi	r20, 0x7A	; 122
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8d 8b       	std	Y+21, r24	; 0x15
    23b8:	9e 8b       	std	Y+22, r25	; 0x16
    23ba:	af 8b       	std	Y+23, r26	; 0x17
    23bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <LCD_VoidLatch+0x128>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	3f c0       	rjmp	.+126    	; 0x245e <LCD_VoidLatch+0x1a6>
	else if (__tmp > 65535)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <LCD_VoidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <LCD_VoidLatch+0x188>
    2422:	89 e1       	ldi	r24, 0x19	; 25
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_VoidLatch+0x176>
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <LCD_VoidLatch+0x16a>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <LCD_VoidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f
    2466:	8f 85       	ldd	r24, Y+15	; 0x0f
    2468:	98 89       	ldd	r25, Y+16	; 0x10
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_VoidLatch+0x1b2>
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e2       	ldi	r26, 0x20	; 32
    2482:	b1 e4       	ldi	r27, 0x41	; 65
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	ad 87       	std	Y+13, r26	; 0x0d
    248a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	53 e4       	ldi	r21, 0x43	; 67
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8f 83       	std	Y+7, r24	; 0x07
    24a6:	98 87       	std	Y+8, r25	; 0x08
    24a8:	a9 87       	std	Y+9, r26	; 0x09
    24aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <LCD_VoidLatch+0x216>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <LCD_VoidLatch+0x294>
	else if (__tmp > 65535)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <LCD_VoidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	0f c0       	rjmp	.+30     	; 0x252e <LCD_VoidLatch+0x276>
    2510:	89 e1       	ldi	r24, 0x19	; 25
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_VoidLatch+0x264>
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <LCD_VoidLatch+0x258>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <LCD_VoidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_VoidLatch+0x2a0>
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    2560:	6d 96       	adiw	r28, 0x1d	; 29
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <LCD_inVoidSendCommand>:


static inline void LCD_inVoidSendCommand(u8 Copy_u8Command){
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	2f 97       	sbiw	r28, 0x0f	; 15
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    259c:	83 e0       	ldi	r24, 0x03	; 3
    259e:	62 e0       	ldi	r22, 0x02	; 2
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Command >> 7)&1);
    25a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a8:	98 2f       	mov	r25, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	99 27       	eor	r25, r25
    25ae:	99 1f       	adc	r25, r25
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	67 e0       	ldi	r22, 0x07	; 7
    25b4:	49 2f       	mov	r20, r25
    25b6:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Command >> 6)&1);
    25ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    25bc:	82 95       	swap	r24
    25be:	86 95       	lsr	r24
    25c0:	86 95       	lsr	r24
    25c2:	83 70       	andi	r24, 0x03	; 3
    25c4:	98 2f       	mov	r25, r24
    25c6:	91 70       	andi	r25, 0x01	; 1
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	66 e0       	ldi	r22, 0x06	; 6
    25cc:	49 2f       	mov	r20, r25
    25ce:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Command >> 5)&1);
    25d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d4:	82 95       	swap	r24
    25d6:	86 95       	lsr	r24
    25d8:	87 70       	andi	r24, 0x07	; 7
    25da:	98 2f       	mov	r25, r24
    25dc:	91 70       	andi	r25, 0x01	; 1
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	65 e0       	ldi	r22, 0x05	; 5
    25e2:	49 2f       	mov	r20, r25
    25e4:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Command >> 4)&1);
    25e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ea:	82 95       	swap	r24
    25ec:	8f 70       	andi	r24, 0x0F	; 15
    25ee:	98 2f       	mov	r25, r24
    25f0:	91 70       	andi	r25, 0x01	; 1
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	64 e0       	ldi	r22, 0x04	; 4
    25f6:	49 2f       	mov	r20, r25
    25f8:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT, D3_PIN, (Copy_u8Command >> 3)&1);
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	86 95       	lsr	r24
    2600:	86 95       	lsr	r24
    2602:	86 95       	lsr	r24
    2604:	98 2f       	mov	r25, r24
    2606:	91 70       	andi	r25, 0x01	; 1
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	49 2f       	mov	r20, r25
    260e:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT, D2_PIN, (Copy_u8Command >> 2)&1);
    2612:	8f 85       	ldd	r24, Y+15	; 0x0f
    2614:	86 95       	lsr	r24
    2616:	86 95       	lsr	r24
    2618:	98 2f       	mov	r25, r24
    261a:	91 70       	andi	r25, 0x01	; 1
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	49 2f       	mov	r20, r25
    2622:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT, D1_PIN, (Copy_u8Command >> 1)&1);
    2626:	8f 85       	ldd	r24, Y+15	; 0x0f
    2628:	86 95       	lsr	r24
    262a:	98 2f       	mov	r25, r24
    262c:	91 70       	andi	r25, 0x01	; 1
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	49 2f       	mov	r20, r25
    2634:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT, D0_PIN, (Copy_u8Command >> 0)&1);
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	98 2f       	mov	r25, r24
    263c:	91 70       	andi	r25, 0x01	; 1
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	49 2f       	mov	r20, r25
    2644:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e2       	ldi	r26, 0x20	; 32
    2658:	b1 e4       	ldi	r27, 0x41	; 65
    265a:	8b 87       	std	Y+11, r24	; 0x0b
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	ad 87       	std	Y+13, r26	; 0x0d
    2660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a e7       	ldi	r20, 0x7A	; 122
    2670:	53 e4       	ldi	r21, 0x43	; 67
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8f 83       	std	Y+7, r24	; 0x07
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	a9 87       	std	Y+9, r26	; 0x09
    2680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <LCD_inVoidSendCommand+0x132>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <LCD_inVoidSendCommand+0x1b0>
	else if (__tmp > 65535)
    26a4:	6f 81       	ldd	r22, Y+7	; 0x07
    26a6:	78 85       	ldd	r23, Y+8	; 0x08
    26a8:	89 85       	ldd	r24, Y+9	; 0x09
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <LCD_inVoidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_inVoidSendCommand+0x192>
    26e6:	89 e1       	ldi	r24, 0x19	; 25
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_inVoidSendCommand+0x180>
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <LCD_inVoidSendCommand+0x174>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <LCD_inVoidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_inVoidSendCommand+0x1bc>
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2736:	83 e0       	ldi	r24, 0x03	; 3
    2738:	62 e0       	ldi	r22, 0x02	; 2
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>


}
    2740:	2f 96       	adiw	r28, 0x0f	; 15
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <LCD_enuGoto>:



ES LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	00 d0       	rcall	.+0      	; 0x2758 <LCD_enuGoto+0x6>
    2758:	00 d0       	rcall	.+0      	; 0x275a <LCD_enuGoto+0x8>
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	8a 83       	std	Y+2, r24	; 0x02
    2760:	6b 83       	std	Y+3, r22	; 0x03
	ES Local_ErrorState = ES_NOK;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Line == 1)
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	31 f4       	brne	.+12     	; 0x2778 <LCD_enuGoto+0x26>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80 + Copy_u8Block);
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	80 58       	subi	r24, 0x80	; 128
    2770:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_enuSendCommand>
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	0c c0       	rjmp	.+24     	; 0x2790 <LCD_enuGoto+0x3e>
	}
	else if(Copy_u8Line == 2)
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	82 30       	cpi	r24, 0x02	; 2
    277c:	31 f4       	brne	.+12     	; 0x278a <LCD_enuGoto+0x38>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80+0x40+Copy_u8Block);
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	80 54       	subi	r24, 0x40	; 64
    2782:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_enuSendCommand>
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	03 c0       	rjmp	.+6      	; 0x2790 <LCD_enuGoto+0x3e>
	}
	else
	{
		return ES_OUT_OF_RANGE;
    278a:	83 e0       	ldi	r24, 0x03	; 3
    278c:	8c 83       	std	Y+4, r24	; 0x04
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <LCD_enuGoto+0x42>
	}
	return Local_ErrorState;
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	8c 83       	std	Y+4, r24	; 0x04
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <Keypad_enuInit>:

extern Line Keypad_AstrRows[ROWS_NUM];
extern Line Keypad_AstrCols[COLS_NUM];
extern u8 Keypad_Au8Chars[];

ES Keypad_enuInit(void){
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <Keypad_enuInit+0x6>
    27aa:	0f 92       	push	r0
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	ES Local_u8ErrorState = ES_NOK;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	8b 83       	std	Y+3, r24	; 0x03

	//Set Rows As Input Pulled Up
	for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    27b4:	1a 82       	std	Y+2, r1	; 0x02
    27b6:	31 c0       	rjmp	.+98     	; 0x281a <Keypad_enuInit+0x76>
		DIO_enuSetPinDirection(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8INPUT);
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	fc 01       	movw	r30, r24
    27c4:	ea 57       	subi	r30, 0x7A	; 122
    27c6:	fe 4f       	sbci	r31, 0xFE	; 254
    27c8:	20 81       	ld	r18, Z
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	fc 01       	movw	r30, r24
    27d6:	e9 57       	subi	r30, 0x79	; 121
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	90 81       	ld	r25, Z
    27dc:	82 2f       	mov	r24, r18
    27de:	69 2f       	mov	r22, r25
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8HIGH);
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	fc 01       	movw	r30, r24
    27f2:	ea 57       	subi	r30, 0x7A	; 122
    27f4:	fe 4f       	sbci	r31, 0xFE	; 254
    27f6:	20 81       	ld	r18, Z
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	88 2f       	mov	r24, r24
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	fc 01       	movw	r30, r24
    2804:	e9 57       	subi	r30, 0x79	; 121
    2806:	fe 4f       	sbci	r31, 0xFE	; 254
    2808:	90 81       	ld	r25, Z
    280a:	82 2f       	mov	r24, r18
    280c:	69 2f       	mov	r22, r25
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

ES Keypad_enuInit(void){
	ES Local_u8ErrorState = ES_NOK;

	//Set Rows As Input Pulled Up
	for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	60 f2       	brcs	.-104    	; 0x27b8 <Keypad_enuInit+0x14>
		DIO_enuSetPinDirection(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8INPUT);
		DIO_enuSetPinValue(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8HIGH);
	}

	//Set Cols As Output and High
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    2820:	19 82       	std	Y+1, r1	; 0x01
    2822:	31 c0       	rjmp	.+98     	; 0x2886 <Keypad_enuInit+0xe2>
		DIO_enuSetPinDirection(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8OUTPUT);
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	fc 01       	movw	r30, r24
    2830:	e2 57       	subi	r30, 0x72	; 114
    2832:	fe 4f       	sbci	r31, 0xFE	; 254
    2834:	20 81       	ld	r18, Z
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	fc 01       	movw	r30, r24
    2842:	e1 57       	subi	r30, 0x71	; 113
    2844:	fe 4f       	sbci	r31, 0xFE	; 254
    2846:	90 81       	ld	r25, Z
    2848:	82 2f       	mov	r24, r18
    284a:	69 2f       	mov	r22, r25
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	0e 94 a7 08 	call	0x114e	; 0x114e <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	88 2f       	mov	r24, r24
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	fc 01       	movw	r30, r24
    285e:	e2 57       	subi	r30, 0x72	; 114
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	20 81       	ld	r18, Z
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	fc 01       	movw	r30, r24
    2870:	e1 57       	subi	r30, 0x71	; 113
    2872:	fe 4f       	sbci	r31, 0xFE	; 254
    2874:	90 81       	ld	r25, Z
    2876:	82 2f       	mov	r24, r18
    2878:	69 2f       	mov	r22, r25
    287a:	41 e0       	ldi	r20, 0x01	; 1
    287c:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>
		DIO_enuSetPinDirection(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8INPUT);
		DIO_enuSetPinValue(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, DIO_u8HIGH);
	}

	//Set Cols As Output and High
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	86 30       	cpi	r24, 0x06	; 6
    288a:	60 f2       	brcs	.-104    	; 0x2824 <Keypad_enuInit+0x80>
		DIO_enuSetPinDirection(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8OUTPUT);
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
	}

	Local_u8ErrorState = ES_OK;
    288c:	1b 82       	std	Y+3, r1	; 0x03
	return Local_u8ErrorState;
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <Keypad_enuGetPressedButton>:

ES Keypad_enuGetPressedButton(u8* copy_pu8KeypadState){
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	27 97       	sbiw	r28, 0x07	; 7
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
	ES Local_u8ErrorState = ES_NOK;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	8b 83       	std	Y+3, r24	; 0x03

	//Loop Over all cols
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    28b8:	1a 82       	std	Y+2, r1	; 0x02
    28ba:	90 c0       	rjmp	.+288    	; 0x29dc <Keypad_enuGetPressedButton+0x140>
		//Set Col Low
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8LOW);
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	fc 01       	movw	r30, r24
    28c8:	e2 57       	subi	r30, 0x72	; 114
    28ca:	fe 4f       	sbci	r31, 0xFE	; 254
    28cc:	20 81       	ld	r18, Z
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	fc 01       	movw	r30, r24
    28da:	e1 57       	subi	r30, 0x71	; 113
    28dc:	fe 4f       	sbci	r31, 0xFE	; 254
    28de:	90 81       	ld	r25, Z
    28e0:	82 2f       	mov	r24, r18
    28e2:	69 2f       	mov	r22, r25
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

		//Loop Over all Rows
		for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    28ea:	19 82       	std	Y+1, r1	; 0x01
    28ec:	59 c0       	rjmp	.+178    	; 0x29a0 <Keypad_enuGetPressedButton+0x104>

			//Check for low Row
			u8 Local_u8RowState;
			DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	fc 01       	movw	r30, r24
    28fa:	ea 57       	subi	r30, 0x7A	; 122
    28fc:	fe 4f       	sbci	r31, 0xFE	; 254
    28fe:	40 81       	ld	r20, Z
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	fc 01       	movw	r30, r24
    290c:	e9 57       	subi	r30, 0x79	; 121
    290e:	fe 4f       	sbci	r31, 0xFE	; 254
    2910:	90 81       	ld	r25, Z
    2912:	9e 01       	movw	r18, r28
    2914:	2c 5f       	subi	r18, 0xFC	; 252
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	84 2f       	mov	r24, r20
    291a:	69 2f       	mov	r22, r25
    291c:	a9 01       	movw	r20, r18
    291e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuGetpin>
			if(!Local_u8RowState){
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	88 23       	and	r24, r24
    2926:	c9 f5       	brne	.+114    	; 0x299a <Keypad_enuGetPressedButton+0xfe>
    2928:	1a c0       	rjmp	.+52     	; 0x295e <Keypad_enuGetPressedButton+0xc2>

				//prevent bouncing
				while(!Local_u8RowState)
					DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	fc 01       	movw	r30, r24
    2936:	ea 57       	subi	r30, 0x7A	; 122
    2938:	fe 4f       	sbci	r31, 0xFE	; 254
    293a:	40 81       	ld	r20, Z
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	88 2f       	mov	r24, r24
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	fc 01       	movw	r30, r24
    2948:	e9 57       	subi	r30, 0x79	; 121
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	90 81       	ld	r25, Z
    294e:	9e 01       	movw	r18, r28
    2950:	2c 5f       	subi	r18, 0xFC	; 252
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
    2954:	84 2f       	mov	r24, r20
    2956:	69 2f       	mov	r22, r25
    2958:	a9 01       	movw	r20, r18
    295a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_enuGetpin>
			u8 Local_u8RowState;
			DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);
			if(!Local_u8RowState){

				//prevent bouncing
				while(!Local_u8RowState)
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	88 23       	and	r24, r24
    2962:	19 f3       	breq	.-58     	; 0x292a <Keypad_enuGetPressedButton+0x8e>
					DIO_enuGetpin(Keypad_AstrRows[Local_u8RowsIt].u8_LinePortID, Keypad_AstrRows[Local_u8RowsIt].u8_LinePinID, &Local_u8RowState);

				//assign value
				*copy_pu8KeypadState = Keypad_Au8Chars[Local_u8RowsIt * COLS_NUM + Local_u8ColsIt];
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	c9 01       	movw	r24, r18
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	82 0f       	add	r24, r18
    2972:	93 1f       	adc	r25, r19
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	9c 01       	movw	r18, r24
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	82 0f       	add	r24, r18
    2982:	93 1f       	adc	r25, r19
    2984:	fc 01       	movw	r30, r24
    2986:	e2 59       	subi	r30, 0x92	; 146
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	80 81       	ld	r24, Z
    298c:	ed 81       	ldd	r30, Y+5	; 0x05
    298e:	fe 81       	ldd	r31, Y+6	; 0x06
    2990:	80 83       	st	Z, r24

				Local_u8ErrorState = ES_OK;
    2992:	1b 82       	std	Y+3, r1	; 0x03
				return Local_u8ErrorState;
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	8f 83       	std	Y+7, r24	; 0x07
    2998:	2c c0       	rjmp	.+88     	; 0x29f2 <Keypad_enuGetPressedButton+0x156>
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
		//Set Col Low
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8LOW);

		//Loop Over all Rows
		for(u8 Local_u8RowsIt = 0; Local_u8RowsIt < ROWS_NUM; Local_u8RowsIt++){
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	84 30       	cpi	r24, 0x04	; 4
    29a4:	08 f4       	brcc	.+2      	; 0x29a8 <Keypad_enuGetPressedButton+0x10c>
    29a6:	a3 cf       	rjmp	.-186    	; 0x28ee <Keypad_enuGetPressedButton+0x52>
				Local_u8ErrorState = ES_OK;
				return Local_u8ErrorState;
			}

		}
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	88 2f       	mov	r24, r24
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	fc 01       	movw	r30, r24
    29b4:	e2 57       	subi	r30, 0x72	; 114
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	20 81       	ld	r18, Z
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	fc 01       	movw	r30, r24
    29c6:	e1 57       	subi	r30, 0x71	; 113
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	90 81       	ld	r25, Z
    29cc:	82 2f       	mov	r24, r18
    29ce:	69 2f       	mov	r22, r25
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_enuSetPinValue>

ES Keypad_enuGetPressedButton(u8* copy_pu8KeypadState){
	ES Local_u8ErrorState = ES_NOK;

	//Loop Over all cols
	for(u8 Local_u8ColsIt = 0; Local_u8ColsIt < COLS_NUM; Local_u8ColsIt++){
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
    29da:	8a 83       	std	Y+2, r24	; 0x02
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	86 30       	cpi	r24, 0x06	; 6
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <Keypad_enuGetPressedButton+0x148>
    29e2:	6c cf       	rjmp	.-296    	; 0x28bc <Keypad_enuGetPressedButton+0x20>
			}

		}
		DIO_enuSetPinValue(Keypad_AstrCols[Local_u8ColsIt].u8_LinePortID, Keypad_AstrCols[Local_u8ColsIt].u8_LinePinID, DIO_u8HIGH);
	}
	*copy_pu8KeypadState = KEYPAD_NO_PRESSED;
    29e4:	ed 81       	ldd	r30, Y+5	; 0x05
    29e6:	fe 81       	ldd	r31, Y+6	; 0x06
    29e8:	8f ef       	ldi	r24, 0xFF	; 255
    29ea:	80 83       	st	Z, r24
	Local_u8ErrorState = ES_OK;
    29ec:	1b 82       	std	Y+3, r1	; 0x03
	return Local_u8ErrorState;
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	8f 83       	std	Y+7, r24	; 0x07
    29f2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    29f4:	27 96       	adiw	r28, 0x07	; 7
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <Clear_Arrays>:
char GlobalInputExpression[MAX_SIZE];
char GlobalPostfixExpression[MAX_SIZE];
char GlobalResultExpression[MAX_SIZE];


void Clear_Arrays(){
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <Clear_Arrays+0x6>
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < MAX_SIZE; i++){
    2a10:	1a 82       	std	Y+2, r1	; 0x02
    2a12:	19 82       	std	Y+1, r1	; 0x01
    2a14:	1d c0       	rjmp	.+58     	; 0x2a50 <Clear_Arrays+0x4a>
		GlobalShaddedExpression[i] = 0;
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	ee 55       	subi	r30, 0x5E	; 94
    2a1e:	fc 4f       	sbci	r31, 0xFC	; 252
    2a20:	10 82       	st	Z, r1
		GlobalInputExpression[i] = 0;
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	fc 01       	movw	r30, r24
    2a28:	ea 54       	subi	r30, 0x4A	; 74
    2a2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2a2c:	10 82       	st	Z, r1
		GlobalPostfixExpression[i] = 0;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	fc 01       	movw	r30, r24
    2a34:	e6 5d       	subi	r30, 0xD6	; 214
    2a36:	fc 4f       	sbci	r31, 0xFC	; 252
    2a38:	10 82       	st	Z, r1
		GlobalResultExpression[i] = 0;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	fc 01       	movw	r30, r24
    2a40:	e2 5c       	subi	r30, 0xC2	; 194
    2a42:	fc 4f       	sbci	r31, 0xFC	; 252
    2a44:	10 82       	st	Z, r1
char GlobalPostfixExpression[MAX_SIZE];
char GlobalResultExpression[MAX_SIZE];


void Clear_Arrays(){
	for(int i = 0; i < MAX_SIZE; i++){
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	84 31       	cpi	r24, 0x14	; 20
    2a56:	91 05       	cpc	r25, r1
    2a58:	f4 f2       	brlt	.-68     	; 0x2a16 <Clear_Arrays+0x10>
		GlobalShaddedExpression[i] = 0;
		GlobalInputExpression[i] = 0;
		GlobalPostfixExpression[i] = 0;
		GlobalResultExpression[i] = 0;
	}
}
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <Run_Calculator>:



void Run_Calculator(){
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	29 97       	sbiw	r28, 0x09	; 9
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
	int idx = 0;
    2a78:	18 86       	std	Y+8, r1	; 0x08
    2a7a:	1f 82       	std	Y+7, r1	; 0x07
	u8 LCD_ShouldBeCleared = 0;
    2a7c:	1e 82       	std	Y+6, r1	; 0x06
	u8 LCD_DoneCalculating = 0;
    2a7e:	1d 82       	std	Y+5, r1	; 0x05
	while(1){
		u8 pressed;
		Keypad_enuGetPressedButton(&pressed);
    2a80:	ce 01       	movw	r24, r28
    2a82:	09 96       	adiw	r24, 0x09	; 9
    2a84:	0e 94 4e 14 	call	0x289c	; 0x289c <Keypad_enuGetPressedButton>
		if(pressed == KEYPAD_STATE_NO_PRESSED) continue;
    2a88:	89 85       	ldd	r24, Y+9	; 0x09
    2a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a8c:	c9 f3       	breq	.-14     	; 0x2a80 <Run_Calculator+0x1c>
		if(LCD_ShouldBeCleared) {
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	88 23       	and	r24, r24
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <Run_Calculator+0x36>
			LCD_enuClearDisplay();
    2a94:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
			LCD_ShouldBeCleared = 0;
    2a98:	1e 82       	std	Y+6, r1	; 0x06
		}


		if(LCD_DoneCalculating){
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <Run_Calculator+0x3e>
    2aa0:	87 c0       	rjmp	.+270    	; 0x2bb0 <Run_Calculator+0x14c>
			if(pressed == '=') continue;
    2aa2:	89 85       	ldd	r24, Y+9	; 0x09
    2aa4:	8d 33       	cpi	r24, 0x3D	; 61
    2aa6:	61 f3       	breq	.-40     	; 0x2a80 <Run_Calculator+0x1c>
			else if(pressed == 'A' || pressed == 'C'){
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	81 34       	cpi	r24, 0x41	; 65
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <Run_Calculator+0x50>
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	83 34       	cpi	r24, 0x43	; 67
    2ab2:	39 f4       	brne	.+14     	; 0x2ac2 <Run_Calculator+0x5e>
				Clear_Arrays();
    2ab4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <Clear_Arrays>
				idx = 0;
    2ab8:	18 86       	std	Y+8, r1	; 0x08
    2aba:	1f 82       	std	Y+7, r1	; 0x07
				LCD_enuClearDisplay();
    2abc:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
    2ac0:	75 c0       	rjmp	.+234    	; 0x2bac <Run_Calculator+0x148>
			}
			else if(Is_Operator(pressed)){
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    2ac8:	88 23       	and	r24, r24
    2aca:	09 f4       	brne	.+2      	; 0x2ace <Run_Calculator+0x6a>
    2acc:	55 c0       	rjmp	.+170    	; 0x2b78 <Run_Calculator+0x114>
				LCD_enuClearDisplay();
    2ace:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
				for(int i = 0; i < MAX_SIZE; i++){
    2ad2:	1c 82       	std	Y+4, r1	; 0x04
    2ad4:	1b 82       	std	Y+3, r1	; 0x03
    2ad6:	17 c0       	rjmp	.+46     	; 0x2b06 <Run_Calculator+0xa2>
					GlobalShaddedExpression[i] = 0;
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	9c 81       	ldd	r25, Y+4	; 0x04
    2adc:	fc 01       	movw	r30, r24
    2ade:	ee 55       	subi	r30, 0x5E	; 94
    2ae0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ae2:	10 82       	st	Z, r1
					GlobalInputExpression[i] = 0;
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	fc 01       	movw	r30, r24
    2aea:	ea 54       	subi	r30, 0x4A	; 74
    2aec:	fc 4f       	sbci	r31, 0xFC	; 252
    2aee:	10 82       	st	Z, r1
					GlobalPostfixExpression[i] = 0;
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	fc 01       	movw	r30, r24
    2af6:	e6 5d       	subi	r30, 0xD6	; 214
    2af8:	fc 4f       	sbci	r31, 0xFC	; 252
    2afa:	10 82       	st	Z, r1
				idx = 0;
				LCD_enuClearDisplay();
			}
			else if(Is_Operator(pressed)){
				LCD_enuClearDisplay();
				for(int i = 0; i < MAX_SIZE; i++){
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	9c 81       	ldd	r25, Y+4	; 0x04
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	9c 83       	std	Y+4, r25	; 0x04
    2b04:	8b 83       	std	Y+3, r24	; 0x03
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	84 31       	cpi	r24, 0x14	; 20
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	24 f3       	brlt	.-56     	; 0x2ad8 <Run_Calculator+0x74>
					GlobalShaddedExpression[i] = 0;
					GlobalInputExpression[i] = 0;
					GlobalPostfixExpression[i] = 0;
				}
				for(idx = 0; GlobalResultExpression[idx]; idx++){
    2b10:	18 86       	std	Y+8, r1	; 0x08
    2b12:	1f 82       	std	Y+7, r1	; 0x07
    2b14:	19 c0       	rjmp	.+50     	; 0x2b48 <Run_Calculator+0xe4>
					GlobalInputExpression[idx] = GlobalResultExpression[idx];
    2b16:	2f 81       	ldd	r18, Y+7	; 0x07
    2b18:	38 85       	ldd	r19, Y+8	; 0x08
    2b1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b1c:	98 85       	ldd	r25, Y+8	; 0x08
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e2 5c       	subi	r30, 0xC2	; 194
    2b22:	fc 4f       	sbci	r31, 0xFC	; 252
    2b24:	80 81       	ld	r24, Z
    2b26:	f9 01       	movw	r30, r18
    2b28:	ea 54       	subi	r30, 0x4A	; 74
    2b2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2b2c:	80 83       	st	Z, r24
					LCD_enuDisplayChar(GlobalInputExpression[idx]);
    2b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b30:	98 85       	ldd	r25, Y+8	; 0x08
    2b32:	fc 01       	movw	r30, r24
    2b34:	ea 54       	subi	r30, 0x4A	; 74
    2b36:	fc 4f       	sbci	r31, 0xFC	; 252
    2b38:	80 81       	ld	r24, Z
    2b3a:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
				for(int i = 0; i < MAX_SIZE; i++){
					GlobalShaddedExpression[i] = 0;
					GlobalInputExpression[i] = 0;
					GlobalPostfixExpression[i] = 0;
				}
				for(idx = 0; GlobalResultExpression[idx]; idx++){
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	98 87       	std	Y+8, r25	; 0x08
    2b46:	8f 83       	std	Y+7, r24	; 0x07
    2b48:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4a:	98 85       	ldd	r25, Y+8	; 0x08
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e2 5c       	subi	r30, 0xC2	; 194
    2b50:	fc 4f       	sbci	r31, 0xFC	; 252
    2b52:	80 81       	ld	r24, Z
    2b54:	88 23       	and	r24, r24
    2b56:	f9 f6       	brne	.-66     	; 0x2b16 <Run_Calculator+0xb2>
					GlobalInputExpression[idx] = GlobalResultExpression[idx];
					LCD_enuDisplayChar(GlobalInputExpression[idx]);
				}
				GlobalInputExpression[idx++] = pressed;
    2b58:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5a:	98 85       	ldd	r25, Y+8	; 0x08
    2b5c:	29 85       	ldd	r18, Y+9	; 0x09
    2b5e:	fc 01       	movw	r30, r24
    2b60:	ea 54       	subi	r30, 0x4A	; 74
    2b62:	fc 4f       	sbci	r31, 0xFC	; 252
    2b64:	20 83       	st	Z, r18
    2b66:	8f 81       	ldd	r24, Y+7	; 0x07
    2b68:	98 85       	ldd	r25, Y+8	; 0x08
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	98 87       	std	Y+8, r25	; 0x08
    2b6e:	8f 83       	std	Y+7, r24	; 0x07
				LCD_enuDisplayChar(pressed);
    2b70:	89 85       	ldd	r24, Y+9	; 0x09
    2b72:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
    2b76:	1a c0       	rjmp	.+52     	; 0x2bac <Run_Calculator+0x148>
			}
			else if(Is_Number(pressed)){
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <Is_Number>
    2b7e:	88 23       	and	r24, r24
    2b80:	a9 f0       	breq	.+42     	; 0x2bac <Run_Calculator+0x148>
				idx = 0;
    2b82:	18 86       	std	Y+8, r1	; 0x08
    2b84:	1f 82       	std	Y+7, r1	; 0x07
				LCD_enuClearDisplay();
    2b86:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
				Clear_Arrays();
    2b8a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <Clear_Arrays>
				GlobalInputExpression[idx++] = pressed;
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	98 85       	ldd	r25, Y+8	; 0x08
    2b92:	29 85       	ldd	r18, Y+9	; 0x09
    2b94:	fc 01       	movw	r30, r24
    2b96:	ea 54       	subi	r30, 0x4A	; 74
    2b98:	fc 4f       	sbci	r31, 0xFC	; 252
    2b9a:	20 83       	st	Z, r18
    2b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9e:	98 85       	ldd	r25, Y+8	; 0x08
    2ba0:	01 96       	adiw	r24, 0x01	; 1
    2ba2:	98 87       	std	Y+8, r25	; 0x08
    2ba4:	8f 83       	std	Y+7, r24	; 0x07
				LCD_enuDisplayChar(pressed);
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
			}
			LCD_DoneCalculating = 0;
    2bac:	1d 82       	std	Y+5, r1	; 0x05
    2bae:	68 cf       	rjmp	.-304    	; 0x2a80 <Run_Calculator+0x1c>
		}
		else{
			if(pressed != 'A' && pressed != 'C') {
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	81 34       	cpi	r24, 0x41	; 65
    2bb4:	31 f0       	breq	.+12     	; 0x2bc2 <Run_Calculator+0x15e>
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	83 34       	cpi	r24, 0x43	; 67
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <Run_Calculator+0x15e>
				LCD_enuDisplayChar(pressed);
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
			}
			if(pressed == '='){
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	8d 33       	cpi	r24, 0x3D	; 61
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <Run_Calculator+0x166>
    2bc8:	7b c0       	rjmp	.+246    	; 0x2cc0 <Run_Calculator+0x25c>
				LCD_DoneCalculating = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
				ES Local_enuErrorState = Validate_Expression();
    2bce:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <Validate_Expression>
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
				if(Local_enuErrorState == ES_SYNTAX_ERROR){
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	69 f5       	brne	.+90     	; 0x2c34 <Run_Calculator+0x1d0>
					LCD_enuClearDisplay();
    2bda:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
					LCD_enuGoto(1,2);
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	62 e0       	ldi	r22, 0x02	; 2
    2be2:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_enuGoto>
					LCD_enuDisplayChar('S');
    2be6:	83 e5       	ldi	r24, 0x53	; 83
    2be8:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('Y');
    2bec:	89 e5       	ldi	r24, 0x59	; 89
    2bee:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('N');
    2bf2:	8e e4       	ldi	r24, 0x4E	; 78
    2bf4:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('T');
    2bf8:	84 e5       	ldi	r24, 0x54	; 84
    2bfa:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('A');
    2bfe:	81 e4       	ldi	r24, 0x41	; 65
    2c00:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('X');
    2c04:	88 e5       	ldi	r24, 0x58	; 88
    2c06:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar(' ');
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('E');
    2c10:	85 e4       	ldi	r24, 0x45	; 69
    2c12:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2c16:	82 e5       	ldi	r24, 0x52	; 82
    2c18:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2c1c:	82 e5       	ldi	r24, 0x52	; 82
    2c1e:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('O');
    2c22:	8f e4       	ldi	r24, 0x4F	; 79
    2c24:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2c28:	82 e5       	ldi	r24, 0x52	; 82
    2c2a:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_ShouldBeCleared = 1;
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	8e 83       	std	Y+6, r24	; 0x06
    2c32:	26 cf       	rjmp	.-436    	; 0x2a80 <Run_Calculator+0x1c>
				}
				else if(Local_enuErrorState == ES_MATH_ERROR){
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	85 30       	cpi	r24, 0x05	; 5
    2c38:	39 f5       	brne	.+78     	; 0x2c88 <Run_Calculator+0x224>
					LCD_enuClearDisplay();
    2c3a:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
					LCD_enuGoto(1,3);
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	63 e0       	ldi	r22, 0x03	; 3
    2c42:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_enuGoto>
					LCD_enuDisplayChar('M');
    2c46:	8d e4       	ldi	r24, 0x4D	; 77
    2c48:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('A');
    2c4c:	81 e4       	ldi	r24, 0x41	; 65
    2c4e:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('T');
    2c52:	84 e5       	ldi	r24, 0x54	; 84
    2c54:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('H');
    2c58:	88 e4       	ldi	r24, 0x48	; 72
    2c5a:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar(' ');
    2c5e:	80 e2       	ldi	r24, 0x20	; 32
    2c60:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('E');
    2c64:	85 e4       	ldi	r24, 0x45	; 69
    2c66:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2c6a:	82 e5       	ldi	r24, 0x52	; 82
    2c6c:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2c70:	82 e5       	ldi	r24, 0x52	; 82
    2c72:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('O');
    2c76:	8f e4       	ldi	r24, 0x4F	; 79
    2c78:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_enuDisplayChar('R');
    2c7c:	82 e5       	ldi	r24, 0x52	; 82
    2c7e:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_ShouldBeCleared = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	8e 83       	std	Y+6, r24	; 0x06
    2c86:	fc ce       	rjmp	.-520    	; 0x2a80 <Run_Calculator+0x1c>
				}
				else if(Local_enuErrorState == ES_OK){
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	88 23       	and	r24, r24
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <Run_Calculator+0x22c>
    2c8e:	f8 ce       	rjmp	.-528    	; 0x2a80 <Run_Calculator+0x1c>
					LCD_enuGoto(2,0);
    2c90:	82 e0       	ldi	r24, 0x02	; 2
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_enuGoto>
					Calc_Expression();
    2c98:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <Calc_Expression>
					for(u8 i = 0; i < MAX_SIZE; i++){
    2c9c:	19 82       	std	Y+1, r1	; 0x01
    2c9e:	0c c0       	rjmp	.+24     	; 0x2cb8 <Run_Calculator+0x254>
						LCD_enuDisplayChar(GlobalResultExpression[i]);
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	88 2f       	mov	r24, r24
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e2 5c       	subi	r30, 0xC2	; 194
    2caa:	fc 4f       	sbci	r31, 0xFC	; 252
    2cac:	80 81       	ld	r24, Z
    2cae:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
					LCD_ShouldBeCleared = 1;
				}
				else if(Local_enuErrorState == ES_OK){
					LCD_enuGoto(2,0);
					Calc_Expression();
					for(u8 i = 0; i < MAX_SIZE; i++){
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	84 31       	cpi	r24, 0x14	; 20
    2cbc:	88 f3       	brcs	.-30     	; 0x2ca0 <Run_Calculator+0x23c>
    2cbe:	e0 ce       	rjmp	.-576    	; 0x2a80 <Run_Calculator+0x1c>
						LCD_enuDisplayChar(GlobalResultExpression[i]);
					}
				}
			}
			else if(pressed == 'A'){
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	81 34       	cpi	r24, 0x41	; 65
    2cc4:	41 f4       	brne	.+16     	; 0x2cd6 <Run_Calculator+0x272>
				LCD_enuClearDisplay();
    2cc6:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_enuClearDisplay>
				Clear_Arrays();
    2cca:	0e 94 03 15 	call	0x2a06	; 0x2a06 <Clear_Arrays>
				idx = 0;
    2cce:	18 86       	std	Y+8, r1	; 0x08
    2cd0:	1f 82       	std	Y+7, r1	; 0x07
				LCD_ShouldBeCleared = 0;
    2cd2:	1e 82       	std	Y+6, r1	; 0x06
    2cd4:	d5 ce       	rjmp	.-598    	; 0x2a80 <Run_Calculator+0x1c>
			}
			else if(pressed == 'C'){
    2cd6:	89 85       	ldd	r24, Y+9	; 0x09
    2cd8:	83 34       	cpi	r24, 0x43	; 67
    2cda:	11 f5       	brne	.+68     	; 0x2d20 <Run_Calculator+0x2bc>
				GlobalInputExpression[idx--] = '\0';
    2cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cde:	98 85       	ldd	r25, Y+8	; 0x08
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	ea 54       	subi	r30, 0x4A	; 74
    2ce4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ce6:	10 82       	st	Z, r1
    2ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cea:	98 85       	ldd	r25, Y+8	; 0x08
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	98 87       	std	Y+8, r25	; 0x08
    2cf0:	8f 83       	std	Y+7, r24	; 0x07
				idx = max(0,idx);
    2cf2:	2f 81       	ldd	r18, Y+7	; 0x07
    2cf4:	38 85       	ldd	r19, Y+8	; 0x08
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	b9 01       	movw	r22, r18
    2cfc:	0e 94 9d 0c 	call	0x193a	; 0x193a <max>
    2d00:	98 87       	std	Y+8, r25	; 0x08
    2d02:	8f 83       	std	Y+7, r24	; 0x07
				LCD_enuGoto(1,idx);
    2d04:	9f 81       	ldd	r25, Y+7	; 0x07
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	69 2f       	mov	r22, r25
    2d0a:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_enuGoto>
				LCD_enuDisplayChar(' ');
    2d0e:	80 e2       	ldi	r24, 0x20	; 32
    2d10:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_enuDisplayChar>
				LCD_enuGoto(1,idx);
    2d14:	9f 81       	ldd	r25, Y+7	; 0x07
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	69 2f       	mov	r22, r25
    2d1a:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_enuGoto>
    2d1e:	b0 ce       	rjmp	.-672    	; 0x2a80 <Run_Calculator+0x1c>
			}
			else{
				GlobalInputExpression[idx++] = pressed;
    2d20:	8f 81       	ldd	r24, Y+7	; 0x07
    2d22:	98 85       	ldd	r25, Y+8	; 0x08
    2d24:	29 85       	ldd	r18, Y+9	; 0x09
    2d26:	fc 01       	movw	r30, r24
    2d28:	ea 54       	subi	r30, 0x4A	; 74
    2d2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d2c:	20 83       	st	Z, r18
    2d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d30:	98 85       	ldd	r25, Y+8	; 0x08
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	98 87       	std	Y+8, r25	; 0x08
    2d36:	8f 83       	std	Y+7, r24	; 0x07
    2d38:	a3 ce       	rjmp	.-698    	; 0x2a80 <Run_Calculator+0x1c>

00002d3a <Calc_Expression>:

	}
}


ES Calc_Expression(){
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	61 97       	sbiw	r28, 0x11	; 17
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    ES Local_enuErrorState = ES_NOK;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	8d 87       	std	Y+13, r24	; 0x0d
    Infix_To_Postfix();
    2d5a:	0e 94 5f 18 	call	0x30be	; 0x30be <Infix_To_Postfix>
    double Local_DoubleResult;
    Calc_Postfix(&Local_DoubleResult);
    2d5e:	ce 01       	movw	r24, r28
    2d60:	0e 96       	adiw	r24, 0x0e	; 14
    2d62:	0e 94 86 19 	call	0x330c	; 0x330c <Calc_Postfix>


    u8 Local_Idx = 0;
    2d66:	1c 86       	std	Y+12, r1	; 0x0c

    //printing Sign
    if(Local_DoubleResult < 0) {
    2d68:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d6c:	a8 89       	ldd	r26, Y+16	; 0x10
    2d6e:	b9 89       	ldd	r27, Y+17	; 0x11
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e0       	ldi	r20, 0x00	; 0
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d80:	88 23       	and	r24, r24
    2d82:	a4 f4       	brge	.+40     	; 0x2dac <Calc_Expression+0x72>
    	GlobalResultExpression[Local_Idx++] = '-';
    2d84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d86:	88 2f       	mov	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e2 5c       	subi	r30, 0xC2	; 194
    2d8e:	fc 4f       	sbci	r31, 0xFC	; 252
    2d90:	8d e2       	ldi	r24, 0x2D	; 45
    2d92:	80 83       	st	Z, r24
    2d94:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	8c 87       	std	Y+12, r24	; 0x0c
        Local_DoubleResult *= -1;
    2d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d9e:	a8 89       	ldd	r26, Y+16	; 0x10
    2da0:	b9 89       	ldd	r27, Y+17	; 0x11
    2da2:	b0 58       	subi	r27, 0x80	; 128
    2da4:	8e 87       	std	Y+14, r24	; 0x0e
    2da6:	9f 87       	std	Y+15, r25	; 0x0f
    2da8:	a8 8b       	std	Y+16, r26	; 0x10
    2daa:	b9 8b       	std	Y+17, r27	; 0x11
    }


    long Local_longValue = Local_DoubleResult;
    2dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    2db0:	a8 89       	ldd	r26, Y+16	; 0x10
    2db2:	b9 89       	ldd	r27, Y+17	; 0x11
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	88 87       	std	Y+8, r24	; 0x08
    2dc2:	99 87       	std	Y+9, r25	; 0x09
    2dc4:	aa 87       	std	Y+10, r26	; 0x0a
    2dc6:	bb 87       	std	Y+11, r27	; 0x0b
    Local_DoubleResult -= Local_longValue;
    2dc8:	ee 84       	ldd	r14, Y+14	; 0x0e
    2dca:	ff 84       	ldd	r15, Y+15	; 0x0f
    2dcc:	08 89       	ldd	r16, Y+16	; 0x10
    2dce:	19 89       	ldd	r17, Y+17	; 0x11
    2dd0:	68 85       	ldd	r22, Y+8	; 0x08
    2dd2:	79 85       	ldd	r23, Y+9	; 0x09
    2dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dd8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2ddc:	9b 01       	movw	r18, r22
    2dde:	ac 01       	movw	r20, r24
    2de0:	c8 01       	movw	r24, r16
    2de2:	b7 01       	movw	r22, r14
    2de4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	8e 87       	std	Y+14, r24	; 0x0e
    2dee:	9f 87       	std	Y+15, r25	; 0x0f
    2df0:	a8 8b       	std	Y+16, r26	; 0x10
    2df2:	b9 8b       	std	Y+17, r27	; 0x11


    u8 Local_u8TrailingZeros = 0;
    2df4:	1f 82       	std	Y+7, r1	; 0x07
    long Local_longReversedNumber = 0;
    2df6:	1b 82       	std	Y+3, r1	; 0x03
    2df8:	1c 82       	std	Y+4, r1	; 0x04
    2dfa:	1d 82       	std	Y+5, r1	; 0x05
    2dfc:	1e 82       	std	Y+6, r1	; 0x06
    2dfe:	15 c0       	rjmp	.+42     	; 0x2e2a <Calc_Expression+0xf0>

    while(Local_longValue && !(Local_longValue%10)){
    	Local_longValue /= 10;
    2e00:	88 85       	ldd	r24, Y+8	; 0x08
    2e02:	99 85       	ldd	r25, Y+9	; 0x09
    2e04:	aa 85       	ldd	r26, Y+10	; 0x0a
    2e06:	bb 85       	ldd	r27, Y+11	; 0x0b
    2e08:	2a e0       	ldi	r18, 0x0A	; 10
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    2e18:	da 01       	movw	r26, r20
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	88 87       	std	Y+8, r24	; 0x08
    2e1e:	99 87       	std	Y+9, r25	; 0x09
    2e20:	aa 87       	std	Y+10, r26	; 0x0a
    2e22:	bb 87       	std	Y+11, r27	; 0x0b
    	Local_u8TrailingZeros++;
    2e24:	8f 81       	ldd	r24, Y+7	; 0x07
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	8f 83       	std	Y+7, r24	; 0x07


    u8 Local_u8TrailingZeros = 0;
    long Local_longReversedNumber = 0;

    while(Local_longValue && !(Local_longValue%10)){
    2e2a:	88 85       	ldd	r24, Y+8	; 0x08
    2e2c:	99 85       	ldd	r25, Y+9	; 0x09
    2e2e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2e30:	bb 85       	ldd	r27, Y+11	; 0x0b
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	a1 05       	cpc	r26, r1
    2e36:	b1 05       	cpc	r27, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <Calc_Expression+0x102>
    2e3a:	53 c0       	rjmp	.+166    	; 0x2ee2 <Calc_Expression+0x1a8>
    2e3c:	88 85       	ldd	r24, Y+8	; 0x08
    2e3e:	99 85       	ldd	r25, Y+9	; 0x09
    2e40:	aa 85       	ldd	r26, Y+10	; 0x0a
    2e42:	bb 85       	ldd	r27, Y+11	; 0x0b
    2e44:	2a e0       	ldi	r18, 0x0A	; 10
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	50 e0       	ldi	r21, 0x00	; 0
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	a1 05       	cpc	r26, r1
    2e5c:	b1 05       	cpc	r27, r1
    2e5e:	81 f2       	breq	.-96     	; 0x2e00 <Calc_Expression+0xc6>
    2e60:	40 c0       	rjmp	.+128    	; 0x2ee2 <Calc_Expression+0x1a8>
    	Local_longValue /= 10;
    	Local_u8TrailingZeros++;
    }

    while(Local_longValue){
    	Local_longReversedNumber *= 10;
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	9c 81       	ldd	r25, Y+4	; 0x04
    2e66:	ad 81       	ldd	r26, Y+5	; 0x05
    2e68:	be 81       	ldd	r27, Y+6	; 0x06
    2e6a:	2a e0       	ldi	r18, 0x0A	; 10
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 32 21 	call	0x4264	; 0x4264 <__mulsi3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	ad 83       	std	Y+5, r26	; 0x05
    2e84:	be 83       	std	Y+6, r27	; 0x06
    	Local_longReversedNumber += Local_longValue %10;
    2e86:	88 85       	ldd	r24, Y+8	; 0x08
    2e88:	99 85       	ldd	r25, Y+9	; 0x09
    2e8a:	aa 85       	ldd	r26, Y+10	; 0x0a
    2e8c:	bb 85       	ldd	r27, Y+11	; 0x0b
    2e8e:	2a e0       	ldi	r18, 0x0A	; 10
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9c 01       	movw	r18, r24
    2ea4:	ad 01       	movw	r20, r26
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	ad 81       	ldd	r26, Y+5	; 0x05
    2eac:	be 81       	ldd	r27, Y+6	; 0x06
    2eae:	82 0f       	add	r24, r18
    2eb0:	93 1f       	adc	r25, r19
    2eb2:	a4 1f       	adc	r26, r20
    2eb4:	b5 1f       	adc	r27, r21
    2eb6:	8b 83       	std	Y+3, r24	; 0x03
    2eb8:	9c 83       	std	Y+4, r25	; 0x04
    2eba:	ad 83       	std	Y+5, r26	; 0x05
    2ebc:	be 83       	std	Y+6, r27	; 0x06
        Local_longValue/=10;
    2ebe:	88 85       	ldd	r24, Y+8	; 0x08
    2ec0:	99 85       	ldd	r25, Y+9	; 0x09
    2ec2:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ec4:	bb 85       	ldd	r27, Y+11	; 0x0b
    2ec6:	2a e0       	ldi	r18, 0x0A	; 10
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e0       	ldi	r20, 0x00	; 0
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    2ed6:	da 01       	movw	r26, r20
    2ed8:	c9 01       	movw	r24, r18
    2eda:	88 87       	std	Y+8, r24	; 0x08
    2edc:	99 87       	std	Y+9, r25	; 0x09
    2ede:	aa 87       	std	Y+10, r26	; 0x0a
    2ee0:	bb 87       	std	Y+11, r27	; 0x0b
    while(Local_longValue && !(Local_longValue%10)){
    	Local_longValue /= 10;
    	Local_u8TrailingZeros++;
    }

    while(Local_longValue){
    2ee2:	88 85       	ldd	r24, Y+8	; 0x08
    2ee4:	99 85       	ldd	r25, Y+9	; 0x09
    2ee6:	aa 85       	ldd	r26, Y+10	; 0x0a
    2ee8:	bb 85       	ldd	r27, Y+11	; 0x0b
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	a1 05       	cpc	r26, r1
    2eee:	b1 05       	cpc	r27, r1
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <Calc_Expression+0x1ba>
    2ef2:	b7 cf       	rjmp	.-146    	; 0x2e62 <Calc_Expression+0x128>
    2ef4:	2b c0       	rjmp	.+86     	; 0x2f4c <Calc_Expression+0x212>



    //Printing Integer value
    while(Local_longReversedNumber){
    	GlobalResultExpression[Local_Idx++] = ((u8)(Local_longReversedNumber % 10 + '0'));
    2ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ef8:	08 2f       	mov	r16, r24
    2efa:	10 e0       	ldi	r17, 0x00	; 0
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	ad 81       	ldd	r26, Y+5	; 0x05
    2f02:	be 81       	ldd	r27, Y+6	; 0x06
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	80 5d       	subi	r24, 0xD0	; 208
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	e2 5c       	subi	r30, 0xC2	; 194
    2f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f20:	80 83       	st	Z, r24
    2f22:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f24:	8f 5f       	subi	r24, 0xFF	; 255
    2f26:	8c 87       	std	Y+12, r24	; 0x0c
    	Local_longReversedNumber /= 10;
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2c:	ad 81       	ldd	r26, Y+5	; 0x05
    2f2e:	be 81       	ldd	r27, Y+6	; 0x06
    2f30:	2a e0       	ldi	r18, 0x0A	; 10
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    2f40:	da 01       	movw	r26, r20
    2f42:	c9 01       	movw	r24, r18
    2f44:	8b 83       	std	Y+3, r24	; 0x03
    2f46:	9c 83       	std	Y+4, r25	; 0x04
    2f48:	ad 83       	std	Y+5, r26	; 0x05
    2f4a:	be 83       	std	Y+6, r27	; 0x06
    }



    //Printing Integer value
    while(Local_longReversedNumber){
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f50:	ad 81       	ldd	r26, Y+5	; 0x05
    2f52:	be 81       	ldd	r27, Y+6	; 0x06
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	a1 05       	cpc	r26, r1
    2f58:	b1 05       	cpc	r27, r1
    2f5a:	69 f6       	brne	.-102    	; 0x2ef6 <Calc_Expression+0x1bc>
    	GlobalResultExpression[Local_Idx++] = ((u8)(Local_longReversedNumber % 10 + '0'));
    	Local_longReversedNumber /= 10;
    }

    //printing Trailing Zeros
    for(u8 i = 0; i < Local_u8TrailingZeros; i++){
    2f5c:	1a 82       	std	Y+2, r1	; 0x02
    2f5e:	0e c0       	rjmp	.+28     	; 0x2f7c <Calc_Expression+0x242>
    	GlobalResultExpression[Local_Idx++] = '0';
    2f60:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	fc 01       	movw	r30, r24
    2f68:	e2 5c       	subi	r30, 0xC2	; 194
    2f6a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f6c:	80 e3       	ldi	r24, 0x30	; 48
    2f6e:	80 83       	st	Z, r24
    2f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f72:	8f 5f       	subi	r24, 0xFF	; 255
    2f74:	8c 87       	std	Y+12, r24	; 0x0c
    	GlobalResultExpression[Local_Idx++] = ((u8)(Local_longReversedNumber % 10 + '0'));
    	Local_longReversedNumber /= 10;
    }

    //printing Trailing Zeros
    for(u8 i = 0; i < Local_u8TrailingZeros; i++){
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	8a 83       	std	Y+2, r24	; 0x02
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f80:	98 17       	cp	r25, r24
    2f82:	70 f3       	brcs	.-36     	; 0x2f60 <Calc_Expression+0x226>
    	GlobalResultExpression[Local_Idx++] = '0';
    }

    //printing Fraction
    if(Float_Abs(Local_DoubleResult, (long)Local_DoubleResult) > EPS){
    2f84:	ee 84       	ldd	r14, Y+14	; 0x0e
    2f86:	ff 84       	ldd	r15, Y+15	; 0x0f
    2f88:	08 89       	ldd	r16, Y+16	; 0x10
    2f8a:	19 89       	ldd	r17, Y+17	; 0x11
    2f8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f90:	a8 89       	ldd	r26, Y+16	; 0x10
    2f92:	b9 89       	ldd	r27, Y+17	; 0x11
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2fa8:	9b 01       	movw	r18, r22
    2faa:	ac 01       	movw	r20, r24
    2fac:	c8 01       	movw	r24, r16
    2fae:	b7 01       	movw	r22, r14
    2fb0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Float_Abs>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	2c ea       	ldi	r18, 0xAC	; 172
    2fbe:	35 ec       	ldi	r19, 0xC5	; 197
    2fc0:	47 e2       	ldi	r20, 0x27	; 39
    2fc2:	57 e3       	ldi	r21, 0x37	; 55
    2fc4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	0c f0       	brlt	.+2      	; 0x2fce <Calc_Expression+0x294>
    2fcc:	44 c0       	rjmp	.+136    	; 0x3056 <Calc_Expression+0x31c>
    	GlobalResultExpression[Local_Idx++] = '.';
    2fce:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	e2 5c       	subi	r30, 0xC2	; 194
    2fd8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fda:	8e e2       	ldi	r24, 0x2E	; 46
    2fdc:	80 83       	st	Z, r24
    2fde:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fe0:	8f 5f       	subi	r24, 0xFF	; 255
    2fe2:	8c 87       	std	Y+12, r24	; 0x0c
    	for(u8 i = 0; i < PRECISION_DIGITS; i++){
    2fe4:	19 82       	std	Y+1, r1	; 0x01
    2fe6:	34 c0       	rjmp	.+104    	; 0x3050 <Calc_Expression+0x316>
    		Local_DoubleResult *= 10;
    2fe8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fea:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fec:	a8 89       	ldd	r26, Y+16	; 0x10
    2fee:	b9 89       	ldd	r27, Y+17	; 0x11
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8e 87       	std	Y+14, r24	; 0x0e
    3006:	9f 87       	std	Y+15, r25	; 0x0f
    3008:	a8 8b       	std	Y+16, r26	; 0x10
    300a:	b9 8b       	std	Y+17, r27	; 0x11
    		GlobalResultExpression[Local_Idx++] = ((long)Local_DoubleResult %10 + '0');
    300c:	8c 85       	ldd	r24, Y+12	; 0x0c
    300e:	08 2f       	mov	r16, r24
    3010:	10 e0       	ldi	r17, 0x00	; 0
    3012:	8e 85       	ldd	r24, Y+14	; 0x0e
    3014:	9f 85       	ldd	r25, Y+15	; 0x0f
    3016:	a8 89       	ldd	r26, Y+16	; 0x10
    3018:	b9 89       	ldd	r27, Y+17	; 0x11
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	2a e0       	ldi	r18, 0x0A	; 10
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__divmodsi4>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	80 5d       	subi	r24, 0xD0	; 208
    303c:	f8 01       	movw	r30, r16
    303e:	e2 5c       	subi	r30, 0xC2	; 194
    3040:	fc 4f       	sbci	r31, 0xFC	; 252
    3042:	80 83       	st	Z, r24
    3044:	8c 85       	ldd	r24, Y+12	; 0x0c
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	8c 87       	std	Y+12, r24	; 0x0c
    }

    //printing Fraction
    if(Float_Abs(Local_DoubleResult, (long)Local_DoubleResult) > EPS){
    	GlobalResultExpression[Local_Idx++] = '.';
    	for(u8 i = 0; i < PRECISION_DIGITS; i++){
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	8f 5f       	subi	r24, 0xFF	; 255
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	84 30       	cpi	r24, 0x04	; 4
    3054:	48 f2       	brcs	.-110    	; 0x2fe8 <Calc_Expression+0x2ae>
    		Local_DoubleResult *= 10;
    		GlobalResultExpression[Local_Idx++] = ((long)Local_DoubleResult %10 + '0');
    	}
    }

    Local_enuErrorState = ES_OK;
    3056:	1d 86       	std	Y+13, r1	; 0x0d
    return Local_enuErrorState;
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    305a:	61 96       	adiw	r28, 0x11	; 17
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	ff 90       	pop	r15
    3070:	ef 90       	pop	r14
    3072:	08 95       	ret

00003074 <priority>:


u8 priority(char key){
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	00 d0       	rcall	.+0      	; 0x307a <priority+0x6>
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	89 83       	std	Y+1, r24	; 0x01
	if(key == '+' || key == '-') return 0;
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	8b 32       	cpi	r24, 0x2B	; 43
    3084:	19 f0       	breq	.+6      	; 0x308c <priority+0x18>
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	8d 32       	cpi	r24, 0x2D	; 45
    308a:	11 f4       	brne	.+4      	; 0x3090 <priority+0x1c>
    308c:	1a 82       	std	Y+2, r1	; 0x02
    308e:	11 c0       	rjmp	.+34     	; 0x30b2 <priority+0x3e>
	if(key == '*' || key == '/') return 1;
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	8a 32       	cpi	r24, 0x2A	; 42
    3094:	19 f0       	breq	.+6      	; 0x309c <priority+0x28>
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	8f 32       	cpi	r24, 0x2F	; 47
    309a:	19 f4       	brne	.+6      	; 0x30a2 <priority+0x2e>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	8a 83       	std	Y+2, r24	; 0x02
    30a0:	08 c0       	rjmp	.+16     	; 0x30b2 <priority+0x3e>
	if(key == '^') return 2;
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	8e 35       	cpi	r24, 0x5E	; 94
    30a6:	19 f4       	brne	.+6      	; 0x30ae <priority+0x3a>
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	8a 83       	std	Y+2, r24	; 0x02
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <priority+0x3e>
	return -1;
    30ae:	8f ef       	ldi	r24, 0xFF	; 255
    30b0:	8a 83       	std	Y+2, r24	; 0x02
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	cf 91       	pop	r28
    30ba:	df 91       	pop	r29
    30bc:	08 95       	ret

000030be <Infix_To_Postfix>:

ES Infix_To_Postfix(){
    30be:	1f 93       	push	r17
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	2d 97       	sbiw	r28, 0x0d	; 13
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    ES Local_enuErrorState = ES_NOK;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	8e 83       	std	Y+6, r24	; 0x06
    char* LocalInfixExpression = GlobalShaddedExpression;
    30d8:	82 ea       	ldi	r24, 0xA2	; 162
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	9d 83       	std	Y+5, r25	; 0x05
    30de:	8c 83       	std	Y+4, r24	; 0x04
    Stack st;
    Initialize_Stack(&st);
    30e0:	ce 01       	movw	r24, r28
    30e2:	07 96       	adiw	r24, 0x07	; 7
    30e4:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Initialize_Stack>
    u8 postfix_ind = 0;
    30e8:	1b 82       	std	Y+3, r1	; 0x03
    for(int i = 0; LocalInfixExpression[i]; ++i){
    30ea:	1a 82       	std	Y+2, r1	; 0x02
    30ec:	19 82       	std	Y+1, r1	; 0x01
    30ee:	d6 c0       	rjmp	.+428    	; 0x329c <Infix_To_Postfix+0x1de>
        if(LocalInfixExpression[i] == ')'){
    30f0:	29 81       	ldd	r18, Y+1	; 0x01
    30f2:	3a 81       	ldd	r19, Y+2	; 0x02
    30f4:	8c 81       	ldd	r24, Y+4	; 0x04
    30f6:	9d 81       	ldd	r25, Y+5	; 0x05
    30f8:	fc 01       	movw	r30, r24
    30fa:	e2 0f       	add	r30, r18
    30fc:	f3 1f       	adc	r31, r19
    30fe:	80 81       	ld	r24, Z
    3100:	89 32       	cpi	r24, 0x29	; 41
    3102:	49 f5       	brne	.+82     	; 0x3156 <Infix_To_Postfix+0x98>
    3104:	13 c0       	rjmp	.+38     	; 0x312c <Infix_To_Postfix+0x6e>
            char c;
            while(!Stack_Empty(&st) && Top(&st) != '('){
                Pop(&c,&st);
    3106:	ce 01       	movw	r24, r28
    3108:	0b 96       	adiw	r24, 0x0b	; 11
    310a:	9e 01       	movw	r18, r28
    310c:	29 5f       	subi	r18, 0xF9	; 249
    310e:	3f 4f       	sbci	r19, 0xFF	; 255
    3110:	b9 01       	movw	r22, r18
    3112:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
                GlobalPostfixExpression[postfix_ind] = c;
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	88 2f       	mov	r24, r24
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	2b 85       	ldd	r18, Y+11	; 0x0b
    311e:	fc 01       	movw	r30, r24
    3120:	e6 5d       	subi	r30, 0xD6	; 214
    3122:	fc 4f       	sbci	r31, 0xFC	; 252
    3124:	20 83       	st	Z, r18
                postfix_ind++;
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	8f 5f       	subi	r24, 0xFF	; 255
    312a:	8b 83       	std	Y+3, r24	; 0x03
    Initialize_Stack(&st);
    u8 postfix_ind = 0;
    for(int i = 0; LocalInfixExpression[i]; ++i){
        if(LocalInfixExpression[i] == ')'){
            char c;
            while(!Stack_Empty(&st) && Top(&st) != '('){
    312c:	ce 01       	movw	r24, r28
    312e:	07 96       	adiw	r24, 0x07	; 7
    3130:	0e 94 2e 0c 	call	0x185c	; 0x185c <Stack_Empty>
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	31 f4       	brne	.+12     	; 0x3144 <Infix_To_Postfix+0x86>
    3138:	ce 01       	movw	r24, r28
    313a:	07 96       	adiw	r24, 0x07	; 7
    313c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Top>
    3140:	88 32       	cpi	r24, 0x28	; 40
    3142:	09 f7       	brne	.-62     	; 0x3106 <Infix_To_Postfix+0x48>
                Pop(&c,&st);
                GlobalPostfixExpression[postfix_ind] = c;
                postfix_ind++;
            }
            Pop(&c,&st);
    3144:	ce 01       	movw	r24, r28
    3146:	0b 96       	adiw	r24, 0x0b	; 11
    3148:	9e 01       	movw	r18, r28
    314a:	29 5f       	subi	r18, 0xF9	; 249
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	b9 01       	movw	r22, r18
    3150:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
    3154:	9e c0       	rjmp	.+316    	; 0x3292 <Infix_To_Postfix+0x1d4>
        }
        else{
            if(LocalInfixExpression[i] == '('){
    3156:	29 81       	ldd	r18, Y+1	; 0x01
    3158:	3a 81       	ldd	r19, Y+2	; 0x02
    315a:	8c 81       	ldd	r24, Y+4	; 0x04
    315c:	9d 81       	ldd	r25, Y+5	; 0x05
    315e:	fc 01       	movw	r30, r24
    3160:	e2 0f       	add	r30, r18
    3162:	f3 1f       	adc	r31, r19
    3164:	80 81       	ld	r24, Z
    3166:	88 32       	cpi	r24, 0x28	; 40
    3168:	71 f4       	brne	.+28     	; 0x3186 <Infix_To_Postfix+0xc8>
                Push(&st, LocalInfixExpression[i]);
    316a:	29 81       	ldd	r18, Y+1	; 0x01
    316c:	3a 81       	ldd	r19, Y+2	; 0x02
    316e:	8c 81       	ldd	r24, Y+4	; 0x04
    3170:	9d 81       	ldd	r25, Y+5	; 0x05
    3172:	fc 01       	movw	r30, r24
    3174:	e2 0f       	add	r30, r18
    3176:	f3 1f       	adc	r31, r19
    3178:	20 81       	ld	r18, Z
    317a:	ce 01       	movw	r24, r28
    317c:	07 96       	adiw	r24, 0x07	; 7
    317e:	62 2f       	mov	r22, r18
    3180:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    3184:	86 c0       	rjmp	.+268    	; 0x3292 <Infix_To_Postfix+0x1d4>
            }
            else if(LocalInfixExpression[i] == '+' || LocalInfixExpression[i] == '-' || LocalInfixExpression[i] == '*' || LocalInfixExpression[i] == '/' || LocalInfixExpression[i] == '^'){
    3186:	29 81       	ldd	r18, Y+1	; 0x01
    3188:	3a 81       	ldd	r19, Y+2	; 0x02
    318a:	8c 81       	ldd	r24, Y+4	; 0x04
    318c:	9d 81       	ldd	r25, Y+5	; 0x05
    318e:	fc 01       	movw	r30, r24
    3190:	e2 0f       	add	r30, r18
    3192:	f3 1f       	adc	r31, r19
    3194:	80 81       	ld	r24, Z
    3196:	8b 32       	cpi	r24, 0x2B	; 43
    3198:	e9 f1       	breq	.+122    	; 0x3214 <Infix_To_Postfix+0x156>
    319a:	29 81       	ldd	r18, Y+1	; 0x01
    319c:	3a 81       	ldd	r19, Y+2	; 0x02
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	9d 81       	ldd	r25, Y+5	; 0x05
    31a2:	fc 01       	movw	r30, r24
    31a4:	e2 0f       	add	r30, r18
    31a6:	f3 1f       	adc	r31, r19
    31a8:	80 81       	ld	r24, Z
    31aa:	8d 32       	cpi	r24, 0x2D	; 45
    31ac:	99 f1       	breq	.+102    	; 0x3214 <Infix_To_Postfix+0x156>
    31ae:	29 81       	ldd	r18, Y+1	; 0x01
    31b0:	3a 81       	ldd	r19, Y+2	; 0x02
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	9d 81       	ldd	r25, Y+5	; 0x05
    31b6:	fc 01       	movw	r30, r24
    31b8:	e2 0f       	add	r30, r18
    31ba:	f3 1f       	adc	r31, r19
    31bc:	80 81       	ld	r24, Z
    31be:	8a 32       	cpi	r24, 0x2A	; 42
    31c0:	49 f1       	breq	.+82     	; 0x3214 <Infix_To_Postfix+0x156>
    31c2:	29 81       	ldd	r18, Y+1	; 0x01
    31c4:	3a 81       	ldd	r19, Y+2	; 0x02
    31c6:	8c 81       	ldd	r24, Y+4	; 0x04
    31c8:	9d 81       	ldd	r25, Y+5	; 0x05
    31ca:	fc 01       	movw	r30, r24
    31cc:	e2 0f       	add	r30, r18
    31ce:	f3 1f       	adc	r31, r19
    31d0:	80 81       	ld	r24, Z
    31d2:	8f 32       	cpi	r24, 0x2F	; 47
    31d4:	f9 f0       	breq	.+62     	; 0x3214 <Infix_To_Postfix+0x156>
    31d6:	29 81       	ldd	r18, Y+1	; 0x01
    31d8:	3a 81       	ldd	r19, Y+2	; 0x02
    31da:	8c 81       	ldd	r24, Y+4	; 0x04
    31dc:	9d 81       	ldd	r25, Y+5	; 0x05
    31de:	fc 01       	movw	r30, r24
    31e0:	e2 0f       	add	r30, r18
    31e2:	f3 1f       	adc	r31, r19
    31e4:	80 81       	ld	r24, Z
    31e6:	8e 35       	cpi	r24, 0x5E	; 94
    31e8:	09 f0       	breq	.+2      	; 0x31ec <Infix_To_Postfix+0x12e>
    31ea:	41 c0       	rjmp	.+130    	; 0x326e <Infix_To_Postfix+0x1b0>
    31ec:	13 c0       	rjmp	.+38     	; 0x3214 <Infix_To_Postfix+0x156>
                while(!Stack_Empty(&st) && Top(&st) != '(' && priority(LocalInfixExpression[i]) <= priority(Top(&st))){
                    char c;
                    Pop(&c,&st);
    31ee:	ce 01       	movw	r24, r28
    31f0:	0c 96       	adiw	r24, 0x0c	; 12
    31f2:	9e 01       	movw	r18, r28
    31f4:	29 5f       	subi	r18, 0xF9	; 249
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	b9 01       	movw	r22, r18
    31fa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
                    GlobalPostfixExpression[postfix_ind] = (char)c;
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	88 2f       	mov	r24, r24
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	2c 85       	ldd	r18, Y+12	; 0x0c
    3206:	fc 01       	movw	r30, r24
    3208:	e6 5d       	subi	r30, 0xD6	; 214
    320a:	fc 4f       	sbci	r31, 0xFC	; 252
    320c:	20 83       	st	Z, r18
                    postfix_ind++;
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	8f 5f       	subi	r24, 0xFF	; 255
    3212:	8b 83       	std	Y+3, r24	; 0x03
        else{
            if(LocalInfixExpression[i] == '('){
                Push(&st, LocalInfixExpression[i]);
            }
            else if(LocalInfixExpression[i] == '+' || LocalInfixExpression[i] == '-' || LocalInfixExpression[i] == '*' || LocalInfixExpression[i] == '/' || LocalInfixExpression[i] == '^'){
                while(!Stack_Empty(&st) && Top(&st) != '(' && priority(LocalInfixExpression[i]) <= priority(Top(&st))){
    3214:	ce 01       	movw	r24, r28
    3216:	07 96       	adiw	r24, 0x07	; 7
    3218:	0e 94 2e 0c 	call	0x185c	; 0x185c <Stack_Empty>
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	c9 f4       	brne	.+50     	; 0x3252 <Infix_To_Postfix+0x194>
    3220:	ce 01       	movw	r24, r28
    3222:	07 96       	adiw	r24, 0x07	; 7
    3224:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Top>
    3228:	88 32       	cpi	r24, 0x28	; 40
    322a:	99 f0       	breq	.+38     	; 0x3252 <Infix_To_Postfix+0x194>
    322c:	29 81       	ldd	r18, Y+1	; 0x01
    322e:	3a 81       	ldd	r19, Y+2	; 0x02
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	9d 81       	ldd	r25, Y+5	; 0x05
    3234:	fc 01       	movw	r30, r24
    3236:	e2 0f       	add	r30, r18
    3238:	f3 1f       	adc	r31, r19
    323a:	80 81       	ld	r24, Z
    323c:	0e 94 3a 18 	call	0x3074	; 0x3074 <priority>
    3240:	18 2f       	mov	r17, r24
    3242:	ce 01       	movw	r24, r28
    3244:	07 96       	adiw	r24, 0x07	; 7
    3246:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Top>
    324a:	0e 94 3a 18 	call	0x3074	; 0x3074 <priority>
    324e:	81 17       	cp	r24, r17
    3250:	70 f6       	brcc	.-100    	; 0x31ee <Infix_To_Postfix+0x130>
                    char c;
                    Pop(&c,&st);
                    GlobalPostfixExpression[postfix_ind] = (char)c;
                    postfix_ind++;
                }
                Push(&st, LocalInfixExpression[i]);
    3252:	29 81       	ldd	r18, Y+1	; 0x01
    3254:	3a 81       	ldd	r19, Y+2	; 0x02
    3256:	8c 81       	ldd	r24, Y+4	; 0x04
    3258:	9d 81       	ldd	r25, Y+5	; 0x05
    325a:	fc 01       	movw	r30, r24
    325c:	e2 0f       	add	r30, r18
    325e:	f3 1f       	adc	r31, r19
    3260:	20 81       	ld	r18, Z
    3262:	ce 01       	movw	r24, r28
    3264:	07 96       	adiw	r24, 0x07	; 7
    3266:	62 2f       	mov	r22, r18
    3268:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    326c:	12 c0       	rjmp	.+36     	; 0x3292 <Infix_To_Postfix+0x1d4>
            }
            else {
            	GlobalPostfixExpression[postfix_ind] = LocalInfixExpression[i];
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	48 2f       	mov	r20, r24
    3272:	50 e0       	ldi	r21, 0x00	; 0
    3274:	29 81       	ldd	r18, Y+1	; 0x01
    3276:	3a 81       	ldd	r19, Y+2	; 0x02
    3278:	8c 81       	ldd	r24, Y+4	; 0x04
    327a:	9d 81       	ldd	r25, Y+5	; 0x05
    327c:	fc 01       	movw	r30, r24
    327e:	e2 0f       	add	r30, r18
    3280:	f3 1f       	adc	r31, r19
    3282:	80 81       	ld	r24, Z
    3284:	fa 01       	movw	r30, r20
    3286:	e6 5d       	subi	r30, 0xD6	; 214
    3288:	fc 4f       	sbci	r31, 0xFC	; 252
    328a:	80 83       	st	Z, r24
                postfix_ind++;
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	8f 5f       	subi	r24, 0xFF	; 255
    3290:	8b 83       	std	Y+3, r24	; 0x03
    ES Local_enuErrorState = ES_NOK;
    char* LocalInfixExpression = GlobalShaddedExpression;
    Stack st;
    Initialize_Stack(&st);
    u8 postfix_ind = 0;
    for(int i = 0; LocalInfixExpression[i]; ++i){
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	01 96       	adiw	r24, 0x01	; 1
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
    329c:	29 81       	ldd	r18, Y+1	; 0x01
    329e:	3a 81       	ldd	r19, Y+2	; 0x02
    32a0:	8c 81       	ldd	r24, Y+4	; 0x04
    32a2:	9d 81       	ldd	r25, Y+5	; 0x05
    32a4:	fc 01       	movw	r30, r24
    32a6:	e2 0f       	add	r30, r18
    32a8:	f3 1f       	adc	r31, r19
    32aa:	80 81       	ld	r24, Z
    32ac:	88 23       	and	r24, r24
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <Infix_To_Postfix+0x1f4>
    32b0:	1f cf       	rjmp	.-450    	; 0x30f0 <Infix_To_Postfix+0x32>
    32b2:	13 c0       	rjmp	.+38     	; 0x32da <Infix_To_Postfix+0x21c>
            }
        }
    }
    while(!Stack_Empty(&st)){
        char c;
        Pop(&c,&st);
    32b4:	ce 01       	movw	r24, r28
    32b6:	0d 96       	adiw	r24, 0x0d	; 13
    32b8:	9e 01       	movw	r18, r28
    32ba:	29 5f       	subi	r18, 0xF9	; 249
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	b9 01       	movw	r22, r18
    32c0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
        GlobalPostfixExpression[postfix_ind] = (char)c;
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    32cc:	fc 01       	movw	r30, r24
    32ce:	e6 5d       	subi	r30, 0xD6	; 214
    32d0:	fc 4f       	sbci	r31, 0xFC	; 252
    32d2:	20 83       	st	Z, r18
        postfix_ind++;
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	8f 5f       	subi	r24, 0xFF	; 255
    32d8:	8b 83       	std	Y+3, r24	; 0x03
            	GlobalPostfixExpression[postfix_ind] = LocalInfixExpression[i];
                postfix_ind++;
            }
        }
    }
    while(!Stack_Empty(&st)){
    32da:	ce 01       	movw	r24, r28
    32dc:	07 96       	adiw	r24, 0x07	; 7
    32de:	0e 94 2e 0c 	call	0x185c	; 0x185c <Stack_Empty>
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	39 f3       	breq	.-50     	; 0x32b4 <Infix_To_Postfix+0x1f6>
        char c;
        Pop(&c,&st);
        GlobalPostfixExpression[postfix_ind] = (char)c;
        postfix_ind++;
    }
    GlobalPostfixExpression[postfix_ind] = '\0';
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	88 2f       	mov	r24, r24
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	fc 01       	movw	r30, r24
    32ee:	e6 5d       	subi	r30, 0xD6	; 214
    32f0:	fc 4f       	sbci	r31, 0xFC	; 252
    32f2:	10 82       	st	Z, r1
    Local_enuErrorState = ES_OK;
    32f4:	1e 82       	std	Y+6, r1	; 0x06
    return Local_enuErrorState;
    32f6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    32f8:	2d 96       	adiw	r28, 0x0d	; 13
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	1f 91       	pop	r17
    330a:	08 95       	ret

0000330c <Calc_Postfix>:

ES Calc_Postfix(double * Copy_pDoubleResult){
    330c:	cf 92       	push	r12
    330e:	df 92       	push	r13
    3310:	ef 92       	push	r14
    3312:	ff 92       	push	r15
    3314:	0f 93       	push	r16
    3316:	1f 93       	push	r17
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	2e 97       	sbiw	r28, 0x0e	; 14
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	9b 87       	std	Y+11, r25	; 0x0b
    332e:	8a 87       	std	Y+10, r24	; 0x0a
    ES Local_enuErrorState = ES_NOK;
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	8b 83       	std	Y+3, r24	; 0x03
    Stack st;
    Initialize_Stack(&st);
    3334:	ce 01       	movw	r24, r28
    3336:	04 96       	adiw	r24, 0x04	; 4
    3338:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Initialize_Stack>
    for (int i = 0; GlobalPostfixExpression[i]; ++i) {
    333c:	1a 82       	std	Y+2, r1	; 0x02
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	c6 c1       	rjmp	.+908    	; 0x36ce <Calc_Postfix+0x3c2>
        if(GlobalPostfixExpression[i] >= 'A' && GlobalPostfixExpression[i] <= 'Z'){
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	fc 01       	movw	r30, r24
    3348:	e6 5d       	subi	r30, 0xD6	; 214
    334a:	fc 4f       	sbci	r31, 0xFC	; 252
    334c:	80 81       	ld	r24, Z
    334e:	81 34       	cpi	r24, 0x41	; 65
    3350:	a0 f0       	brcs	.+40     	; 0x337a <Calc_Postfix+0x6e>
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	9a 81       	ldd	r25, Y+2	; 0x02
    3356:	fc 01       	movw	r30, r24
    3358:	e6 5d       	subi	r30, 0xD6	; 214
    335a:	fc 4f       	sbci	r31, 0xFC	; 252
    335c:	80 81       	ld	r24, Z
    335e:	8b 35       	cpi	r24, 0x5B	; 91
    3360:	60 f4       	brcc	.+24     	; 0x337a <Calc_Postfix+0x6e>
            Push(&st,GlobalPostfixExpression[i]);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	fc 01       	movw	r30, r24
    3368:	e6 5d       	subi	r30, 0xD6	; 214
    336a:	fc 4f       	sbci	r31, 0xFC	; 252
    336c:	20 81       	ld	r18, Z
    336e:	ce 01       	movw	r24, r28
    3370:	04 96       	adiw	r24, 0x04	; 4
    3372:	62 2f       	mov	r22, r18
    3374:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    3378:	a5 c1       	rjmp	.+842    	; 0x36c4 <Calc_Postfix+0x3b8>
        }
        else{
            if(Stack_Size(&st) >= 2){
    337a:	ce 01       	movw	r24, r28
    337c:	04 96       	adiw	r24, 0x04	; 4
    337e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <Stack_Size>
    3382:	82 30       	cpi	r24, 0x02	; 2
    3384:	91 05       	cpc	r25, r1
    3386:	0c f4       	brge	.+2      	; 0x338a <Calc_Postfix+0x7e>
    3388:	9a c1       	rjmp	.+820    	; 0x36be <Calc_Postfix+0x3b2>
                char op1,op2;
                Pop(&op2,&st);
    338a:	ce 01       	movw	r24, r28
    338c:	09 96       	adiw	r24, 0x09	; 9
    338e:	9e 01       	movw	r18, r28
    3390:	2c 5f       	subi	r18, 0xFC	; 252
    3392:	3f 4f       	sbci	r19, 0xFF	; 255
    3394:	b9 01       	movw	r22, r18
    3396:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
                Pop(&op1,&st);
    339a:	ce 01       	movw	r24, r28
    339c:	08 96       	adiw	r24, 0x08	; 8
    339e:	9e 01       	movw	r18, r28
    33a0:	2c 5f       	subi	r18, 0xFC	; 252
    33a2:	3f 4f       	sbci	r19, 0xFF	; 255
    33a4:	b9 01       	movw	r22, r18
    33a6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
                switch (GlobalPostfixExpression[i]) {
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	9a 81       	ldd	r25, Y+2	; 0x02
    33ae:	fc 01       	movw	r30, r24
    33b0:	e6 5d       	subi	r30, 0xD6	; 214
    33b2:	fc 4f       	sbci	r31, 0xFC	; 252
    33b4:	80 81       	ld	r24, Z
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	3e 87       	std	Y+14, r19	; 0x0e
    33bc:	2d 87       	std	Y+13, r18	; 0x0d
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	8d 32       	cpi	r24, 0x2D	; 45
    33c4:	91 05       	cpc	r25, r1
    33c6:	09 f4       	brne	.+2      	; 0x33ca <Calc_Postfix+0xbe>
    33c8:	64 c0       	rjmp	.+200    	; 0x3492 <Calc_Postfix+0x186>
    33ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    33cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    33ce:	2e 32       	cpi	r18, 0x2E	; 46
    33d0:	31 05       	cpc	r19, r1
    33d2:	64 f4       	brge	.+24     	; 0x33ec <Calc_Postfix+0xe0>
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	8a 32       	cpi	r24, 0x2A	; 42
    33da:	91 05       	cpc	r25, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <Calc_Postfix+0xd4>
    33de:	9f c0       	rjmp	.+318    	; 0x351e <Calc_Postfix+0x212>
    33e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    33e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    33e4:	2b 32       	cpi	r18, 0x2B	; 43
    33e6:	31 05       	cpc	r19, r1
    33e8:	71 f0       	breq	.+28     	; 0x3406 <Calc_Postfix+0xfa>
    33ea:	6c c1       	rjmp	.+728    	; 0x36c4 <Calc_Postfix+0x3b8>
    33ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f0:	8f 32       	cpi	r24, 0x2F	; 47
    33f2:	91 05       	cpc	r25, r1
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <Calc_Postfix+0xec>
    33f6:	d9 c0       	rjmp	.+434    	; 0x35aa <Calc_Postfix+0x29e>
    33f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    33fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    33fc:	2e 35       	cpi	r18, 0x5E	; 94
    33fe:	31 05       	cpc	r19, r1
    3400:	09 f4       	brne	.+2      	; 0x3404 <Calc_Postfix+0xf8>
    3402:	19 c1       	rjmp	.+562    	; 0x3636 <Calc_Postfix+0x32a>
    3404:	5f c1       	rjmp	.+702    	; 0x36c4 <Calc_Postfix+0x3b8>
                    case '+':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] + GlobalOperands[op2 - 'A'];
    3406:	88 85       	ldd	r24, Y+8	; 0x08
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0f 2e       	mov	r0, r31
    340e:	ff eb       	ldi	r31, 0xBF	; 191
    3410:	cf 2e       	mov	r12, r31
    3412:	ff ef       	ldi	r31, 0xFF	; 255
    3414:	df 2e       	mov	r13, r31
    3416:	f0 2d       	mov	r31, r0
    3418:	c8 0e       	add	r12, r24
    341a:	d9 1e       	adc	r13, r25
    341c:	88 85       	ldd	r24, Y+8	; 0x08
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	81 54       	subi	r24, 0x41	; 65
    3424:	90 40       	sbci	r25, 0x00	; 0
    3426:	88 0f       	add	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	fc 01       	movw	r30, r24
    3430:	ee 5a       	subi	r30, 0xAE	; 174
    3432:	fc 4f       	sbci	r31, 0xFC	; 252
    3434:	e0 80       	ld	r14, Z
    3436:	f1 80       	ldd	r15, Z+1	; 0x01
    3438:	02 81       	ldd	r16, Z+2	; 0x02
    343a:	13 81       	ldd	r17, Z+3	; 0x03
    343c:	89 85       	ldd	r24, Y+9	; 0x09
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	81 54       	subi	r24, 0x41	; 65
    3444:	90 40       	sbci	r25, 0x00	; 0
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	fc 01       	movw	r30, r24
    3450:	ee 5a       	subi	r30, 0xAE	; 174
    3452:	fc 4f       	sbci	r31, 0xFC	; 252
    3454:	20 81       	ld	r18, Z
    3456:	31 81       	ldd	r19, Z+1	; 0x01
    3458:	42 81       	ldd	r20, Z+2	; 0x02
    345a:	53 81       	ldd	r21, Z+3	; 0x03
    345c:	c8 01       	movw	r24, r16
    345e:	b7 01       	movw	r22, r14
    3460:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9c 01       	movw	r18, r24
    346a:	ad 01       	movw	r20, r26
    346c:	c6 01       	movw	r24, r12
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	fc 01       	movw	r30, r24
    3478:	ee 5a       	subi	r30, 0xAE	; 174
    347a:	fc 4f       	sbci	r31, 0xFC	; 252
    347c:	20 83       	st	Z, r18
    347e:	31 83       	std	Z+1, r19	; 0x01
    3480:	42 83       	std	Z+2, r20	; 0x02
    3482:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    3484:	28 85       	ldd	r18, Y+8	; 0x08
    3486:	ce 01       	movw	r24, r28
    3488:	04 96       	adiw	r24, 0x04	; 4
    348a:	62 2f       	mov	r22, r18
    348c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    3490:	19 c1       	rjmp	.+562    	; 0x36c4 <Calc_Postfix+0x3b8>
                        break;
                    case '-':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] - GlobalOperands[op2 - 'A'];
    3492:	88 85       	ldd	r24, Y+8	; 0x08
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0f 2e       	mov	r0, r31
    349a:	ff eb       	ldi	r31, 0xBF	; 191
    349c:	cf 2e       	mov	r12, r31
    349e:	ff ef       	ldi	r31, 0xFF	; 255
    34a0:	df 2e       	mov	r13, r31
    34a2:	f0 2d       	mov	r31, r0
    34a4:	c8 0e       	add	r12, r24
    34a6:	d9 1e       	adc	r13, r25
    34a8:	88 85       	ldd	r24, Y+8	; 0x08
    34aa:	88 2f       	mov	r24, r24
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	81 54       	subi	r24, 0x41	; 65
    34b0:	90 40       	sbci	r25, 0x00	; 0
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	fc 01       	movw	r30, r24
    34bc:	ee 5a       	subi	r30, 0xAE	; 174
    34be:	fc 4f       	sbci	r31, 0xFC	; 252
    34c0:	e0 80       	ld	r14, Z
    34c2:	f1 80       	ldd	r15, Z+1	; 0x01
    34c4:	02 81       	ldd	r16, Z+2	; 0x02
    34c6:	13 81       	ldd	r17, Z+3	; 0x03
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	88 2f       	mov	r24, r24
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	81 54       	subi	r24, 0x41	; 65
    34d0:	90 40       	sbci	r25, 0x00	; 0
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	fc 01       	movw	r30, r24
    34dc:	ee 5a       	subi	r30, 0xAE	; 174
    34de:	fc 4f       	sbci	r31, 0xFC	; 252
    34e0:	20 81       	ld	r18, Z
    34e2:	31 81       	ldd	r19, Z+1	; 0x01
    34e4:	42 81       	ldd	r20, Z+2	; 0x02
    34e6:	53 81       	ldd	r21, Z+3	; 0x03
    34e8:	c8 01       	movw	r24, r16
    34ea:	b7 01       	movw	r22, r14
    34ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	9c 01       	movw	r18, r24
    34f6:	ad 01       	movw	r20, r26
    34f8:	c6 01       	movw	r24, r12
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	fc 01       	movw	r30, r24
    3504:	ee 5a       	subi	r30, 0xAE	; 174
    3506:	fc 4f       	sbci	r31, 0xFC	; 252
    3508:	20 83       	st	Z, r18
    350a:	31 83       	std	Z+1, r19	; 0x01
    350c:	42 83       	std	Z+2, r20	; 0x02
    350e:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    3510:	28 85       	ldd	r18, Y+8	; 0x08
    3512:	ce 01       	movw	r24, r28
    3514:	04 96       	adiw	r24, 0x04	; 4
    3516:	62 2f       	mov	r22, r18
    3518:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    351c:	d3 c0       	rjmp	.+422    	; 0x36c4 <Calc_Postfix+0x3b8>
                        break;
                    case '*':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] * GlobalOperands[op2 - 'A'];
    351e:	88 85       	ldd	r24, Y+8	; 0x08
    3520:	88 2f       	mov	r24, r24
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	0f 2e       	mov	r0, r31
    3526:	ff eb       	ldi	r31, 0xBF	; 191
    3528:	cf 2e       	mov	r12, r31
    352a:	ff ef       	ldi	r31, 0xFF	; 255
    352c:	df 2e       	mov	r13, r31
    352e:	f0 2d       	mov	r31, r0
    3530:	c8 0e       	add	r12, r24
    3532:	d9 1e       	adc	r13, r25
    3534:	88 85       	ldd	r24, Y+8	; 0x08
    3536:	88 2f       	mov	r24, r24
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	81 54       	subi	r24, 0x41	; 65
    353c:	90 40       	sbci	r25, 0x00	; 0
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	fc 01       	movw	r30, r24
    3548:	ee 5a       	subi	r30, 0xAE	; 174
    354a:	fc 4f       	sbci	r31, 0xFC	; 252
    354c:	e0 80       	ld	r14, Z
    354e:	f1 80       	ldd	r15, Z+1	; 0x01
    3550:	02 81       	ldd	r16, Z+2	; 0x02
    3552:	13 81       	ldd	r17, Z+3	; 0x03
    3554:	89 85       	ldd	r24, Y+9	; 0x09
    3556:	88 2f       	mov	r24, r24
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	81 54       	subi	r24, 0x41	; 65
    355c:	90 40       	sbci	r25, 0x00	; 0
    355e:	88 0f       	add	r24, r24
    3560:	99 1f       	adc	r25, r25
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	fc 01       	movw	r30, r24
    3568:	ee 5a       	subi	r30, 0xAE	; 174
    356a:	fc 4f       	sbci	r31, 0xFC	; 252
    356c:	20 81       	ld	r18, Z
    356e:	31 81       	ldd	r19, Z+1	; 0x01
    3570:	42 81       	ldd	r20, Z+2	; 0x02
    3572:	53 81       	ldd	r21, Z+3	; 0x03
    3574:	c8 01       	movw	r24, r16
    3576:	b7 01       	movw	r22, r14
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9c 01       	movw	r18, r24
    3582:	ad 01       	movw	r20, r26
    3584:	c6 01       	movw	r24, r12
    3586:	88 0f       	add	r24, r24
    3588:	99 1f       	adc	r25, r25
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	fc 01       	movw	r30, r24
    3590:	ee 5a       	subi	r30, 0xAE	; 174
    3592:	fc 4f       	sbci	r31, 0xFC	; 252
    3594:	20 83       	st	Z, r18
    3596:	31 83       	std	Z+1, r19	; 0x01
    3598:	42 83       	std	Z+2, r20	; 0x02
    359a:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    359c:	28 85       	ldd	r18, Y+8	; 0x08
    359e:	ce 01       	movw	r24, r28
    35a0:	04 96       	adiw	r24, 0x04	; 4
    35a2:	62 2f       	mov	r22, r18
    35a4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    35a8:	8d c0       	rjmp	.+282    	; 0x36c4 <Calc_Postfix+0x3b8>
                        break;
                    case '/':
                        GlobalOperands[op1 - 'A'] = GlobalOperands[op1 - 'A'] / GlobalOperands[op2 - 'A'];
    35aa:	88 85       	ldd	r24, Y+8	; 0x08
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0f 2e       	mov	r0, r31
    35b2:	ff eb       	ldi	r31, 0xBF	; 191
    35b4:	cf 2e       	mov	r12, r31
    35b6:	ff ef       	ldi	r31, 0xFF	; 255
    35b8:	df 2e       	mov	r13, r31
    35ba:	f0 2d       	mov	r31, r0
    35bc:	c8 0e       	add	r12, r24
    35be:	d9 1e       	adc	r13, r25
    35c0:	88 85       	ldd	r24, Y+8	; 0x08
    35c2:	88 2f       	mov	r24, r24
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	81 54       	subi	r24, 0x41	; 65
    35c8:	90 40       	sbci	r25, 0x00	; 0
    35ca:	88 0f       	add	r24, r24
    35cc:	99 1f       	adc	r25, r25
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	fc 01       	movw	r30, r24
    35d4:	ee 5a       	subi	r30, 0xAE	; 174
    35d6:	fc 4f       	sbci	r31, 0xFC	; 252
    35d8:	e0 80       	ld	r14, Z
    35da:	f1 80       	ldd	r15, Z+1	; 0x01
    35dc:	02 81       	ldd	r16, Z+2	; 0x02
    35de:	13 81       	ldd	r17, Z+3	; 0x03
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	88 2f       	mov	r24, r24
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	81 54       	subi	r24, 0x41	; 65
    35e8:	90 40       	sbci	r25, 0x00	; 0
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	fc 01       	movw	r30, r24
    35f4:	ee 5a       	subi	r30, 0xAE	; 174
    35f6:	fc 4f       	sbci	r31, 0xFC	; 252
    35f8:	20 81       	ld	r18, Z
    35fa:	31 81       	ldd	r19, Z+1	; 0x01
    35fc:	42 81       	ldd	r20, Z+2	; 0x02
    35fe:	53 81       	ldd	r21, Z+3	; 0x03
    3600:	c8 01       	movw	r24, r16
    3602:	b7 01       	movw	r22, r14
    3604:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9c 01       	movw	r18, r24
    360e:	ad 01       	movw	r20, r26
    3610:	c6 01       	movw	r24, r12
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	fc 01       	movw	r30, r24
    361c:	ee 5a       	subi	r30, 0xAE	; 174
    361e:	fc 4f       	sbci	r31, 0xFC	; 252
    3620:	20 83       	st	Z, r18
    3622:	31 83       	std	Z+1, r19	; 0x01
    3624:	42 83       	std	Z+2, r20	; 0x02
    3626:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    3628:	28 85       	ldd	r18, Y+8	; 0x08
    362a:	ce 01       	movw	r24, r28
    362c:	04 96       	adiw	r24, 0x04	; 4
    362e:	62 2f       	mov	r22, r18
    3630:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    3634:	47 c0       	rjmp	.+142    	; 0x36c4 <Calc_Postfix+0x3b8>
                        break;
                    case '^':
                        GlobalOperands[op1 - 'A'] =  power(GlobalOperands[op1 - 'A'],GlobalOperands[op2 - 'A']) ;
    3636:	88 85       	ldd	r24, Y+8	; 0x08
    3638:	88 2f       	mov	r24, r24
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	0f 2e       	mov	r0, r31
    363e:	ff eb       	ldi	r31, 0xBF	; 191
    3640:	cf 2e       	mov	r12, r31
    3642:	ff ef       	ldi	r31, 0xFF	; 255
    3644:	df 2e       	mov	r13, r31
    3646:	f0 2d       	mov	r31, r0
    3648:	c8 0e       	add	r12, r24
    364a:	d9 1e       	adc	r13, r25
    364c:	88 85       	ldd	r24, Y+8	; 0x08
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	81 54       	subi	r24, 0x41	; 65
    3654:	90 40       	sbci	r25, 0x00	; 0
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	fc 01       	movw	r30, r24
    3660:	ee 5a       	subi	r30, 0xAE	; 174
    3662:	fc 4f       	sbci	r31, 0xFC	; 252
    3664:	e0 80       	ld	r14, Z
    3666:	f1 80       	ldd	r15, Z+1	; 0x01
    3668:	02 81       	ldd	r16, Z+2	; 0x02
    366a:	13 81       	ldd	r17, Z+3	; 0x03
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	88 2f       	mov	r24, r24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	81 54       	subi	r24, 0x41	; 65
    3674:	90 40       	sbci	r25, 0x00	; 0
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	fc 01       	movw	r30, r24
    3680:	ee 5a       	subi	r30, 0xAE	; 174
    3682:	fc 4f       	sbci	r31, 0xFC	; 252
    3684:	20 81       	ld	r18, Z
    3686:	31 81       	ldd	r19, Z+1	; 0x01
    3688:	42 81       	ldd	r20, Z+2	; 0x02
    368a:	53 81       	ldd	r21, Z+3	; 0x03
    368c:	c8 01       	movw	r24, r16
    368e:	b7 01       	movw	r22, r14
    3690:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <power>
    3694:	9b 01       	movw	r18, r22
    3696:	ac 01       	movw	r20, r24
    3698:	c6 01       	movw	r24, r12
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	fc 01       	movw	r30, r24
    36a4:	ee 5a       	subi	r30, 0xAE	; 174
    36a6:	fc 4f       	sbci	r31, 0xFC	; 252
    36a8:	20 83       	st	Z, r18
    36aa:	31 83       	std	Z+1, r19	; 0x01
    36ac:	42 83       	std	Z+2, r20	; 0x02
    36ae:	53 83       	std	Z+3, r21	; 0x03
                        Push(&st, op1);
    36b0:	28 85       	ldd	r18, Y+8	; 0x08
    36b2:	ce 01       	movw	r24, r28
    36b4:	04 96       	adiw	r24, 0x04	; 4
    36b6:	62 2f       	mov	r22, r18
    36b8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    36bc:	03 c0       	rjmp	.+6      	; 0x36c4 <Calc_Postfix+0x3b8>
                    default:
                        break;
                }
            }
            else{
                return ES_NOK;
    36be:	31 e0       	ldi	r19, 0x01	; 1
    36c0:	3c 87       	std	Y+12, r19	; 0x0c
    36c2:	2a c0       	rjmp	.+84     	; 0x3718 <Calc_Postfix+0x40c>

ES Calc_Postfix(double * Copy_pDoubleResult){
    ES Local_enuErrorState = ES_NOK;
    Stack st;
    Initialize_Stack(&st);
    for (int i = 0; GlobalPostfixExpression[i]; ++i) {
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	9a 81       	ldd	r25, Y+2	; 0x02
    36d2:	fc 01       	movw	r30, r24
    36d4:	e6 5d       	subi	r30, 0xD6	; 214
    36d6:	fc 4f       	sbci	r31, 0xFC	; 252
    36d8:	80 81       	ld	r24, Z
    36da:	88 23       	and	r24, r24
    36dc:	09 f0       	breq	.+2      	; 0x36e0 <Calc_Postfix+0x3d4>
    36de:	31 ce       	rjmp	.-926    	; 0x3342 <Calc_Postfix+0x36>
            else{
                return ES_NOK;
            }
        }
    }
    *Copy_pDoubleResult = GlobalOperands[Top(&st) - 'A'];
    36e0:	ce 01       	movw	r24, r28
    36e2:	04 96       	adiw	r24, 0x04	; 4
    36e4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Top>
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	81 54       	subi	r24, 0x41	; 65
    36ee:	90 40       	sbci	r25, 0x00	; 0
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	fc 01       	movw	r30, r24
    36fa:	ee 5a       	subi	r30, 0xAE	; 174
    36fc:	fc 4f       	sbci	r31, 0xFC	; 252
    36fe:	80 81       	ld	r24, Z
    3700:	91 81       	ldd	r25, Z+1	; 0x01
    3702:	a2 81       	ldd	r26, Z+2	; 0x02
    3704:	b3 81       	ldd	r27, Z+3	; 0x03
    3706:	ea 85       	ldd	r30, Y+10	; 0x0a
    3708:	fb 85       	ldd	r31, Y+11	; 0x0b
    370a:	80 83       	st	Z, r24
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	a2 83       	std	Z+2, r26	; 0x02
    3710:	b3 83       	std	Z+3, r27	; 0x03

    Local_enuErrorState = ES_OK;
    3712:	1b 82       	std	Y+3, r1	; 0x03
    return Local_enuErrorState;
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	8c 87       	std	Y+12, r24	; 0x0c
    3718:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    371a:	2e 96       	adiw	r28, 0x0e	; 14
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	1f 91       	pop	r17
    372c:	0f 91       	pop	r16
    372e:	ff 90       	pop	r15
    3730:	ef 90       	pop	r14
    3732:	df 90       	pop	r13
    3734:	cf 90       	pop	r12
    3736:	08 95       	ret

00003738 <Is_Operator>:
u8 Is_Operator(char character){
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <Is_Operator+0x6>
    373e:	0f 92       	push	r0
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	89 83       	std	Y+1, r24	; 0x01
	return (character == '+' || character == '-' || character == '*' || character == '/' || character == '^');
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	8b 32       	cpi	r24, 0x2B	; 43
    374a:	61 f0       	breq	.+24     	; 0x3764 <Is_Operator+0x2c>
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	8d 32       	cpi	r24, 0x2D	; 45
    3750:	49 f0       	breq	.+18     	; 0x3764 <Is_Operator+0x2c>
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	8a 32       	cpi	r24, 0x2A	; 42
    3756:	31 f0       	breq	.+12     	; 0x3764 <Is_Operator+0x2c>
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	8f 32       	cpi	r24, 0x2F	; 47
    375c:	19 f0       	breq	.+6      	; 0x3764 <Is_Operator+0x2c>
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	8e 35       	cpi	r24, 0x5E	; 94
    3762:	29 f4       	brne	.+10     	; 0x376e <Is_Operator+0x36>
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9b 83       	std	Y+3, r25	; 0x03
    376a:	8a 83       	std	Y+2, r24	; 0x02
    376c:	02 c0       	rjmp	.+4      	; 0x3772 <Is_Operator+0x3a>
    376e:	1b 82       	std	Y+3, r1	; 0x03
    3770:	1a 82       	std	Y+2, r1	; 0x02
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <Is_Open_Brackets>:

u8 Is_Open_Brackets(char character){
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	00 d0       	rcall	.+0      	; 0x3786 <Is_Open_Brackets+0x6>
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	89 83       	std	Y+1, r24	; 0x01
	return character == '(';
    378c:	1a 82       	std	Y+2, r1	; 0x02
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	88 32       	cpi	r24, 0x28	; 40
    3792:	11 f4       	brne	.+4      	; 0x3798 <Is_Open_Brackets+0x18>
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	8a 83       	std	Y+2, r24	; 0x02
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
}
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <Is_Close_Brackets>:

u8 Is_Close_Brackets(char character){
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <Is_Close_Brackets+0x6>
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	89 83       	std	Y+1, r24	; 0x01
	return character == ')';
    37b0:	1a 82       	std	Y+2, r1	; 0x02
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	89 32       	cpi	r24, 0x29	; 41
    37b6:	11 f4       	brne	.+4      	; 0x37bc <Is_Close_Brackets+0x18>
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	8a 83       	std	Y+2, r24	; 0x02
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <Is_Number>:

u8 Is_Number(char character){
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <Is_Number+0x6>
    37ce:	0f 92       	push	r0
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	89 83       	std	Y+1, r24	; 0x01
	return character >= '0' && character <= '9';
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	80 33       	cpi	r24, 0x30	; 48
    37da:	40 f0       	brcs	.+16     	; 0x37ec <Is_Number+0x24>
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	8a 33       	cpi	r24, 0x3A	; 58
    37e0:	28 f4       	brcc	.+10     	; 0x37ec <Is_Number+0x24>
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	9b 83       	std	Y+3, r25	; 0x03
    37e8:	8a 83       	std	Y+2, r24	; 0x02
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <Is_Number+0x28>
    37ec:	1b 82       	std	Y+3, r1	; 0x03
    37ee:	1a 82       	std	Y+2, r1	; 0x02
    37f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	08 95       	ret

000037fe <Validate_Expression>:

ES Validate_Expression(){
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	63 97       	sbiw	r28, 0x13	; 19
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
	double Local_s64Operand = 0, floatweight = 0.1;
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	a0 e0       	ldi	r26, 0x00	; 0
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	8a 87       	std	Y+10, r24	; 0x0a
    381c:	9b 87       	std	Y+11, r25	; 0x0b
    381e:	ac 87       	std	Y+12, r26	; 0x0c
    3820:	bd 87       	std	Y+13, r27	; 0x0d
    3822:	8d ec       	ldi	r24, 0xCD	; 205
    3824:	9c ec       	ldi	r25, 0xCC	; 204
    3826:	ac ec       	ldi	r26, 0xCC	; 204
    3828:	bd e3       	ldi	r27, 0x3D	; 61
    382a:	8e 83       	std	Y+6, r24	; 0x06
    382c:	9f 83       	std	Y+7, r25	; 0x07
    382e:	a8 87       	std	Y+8, r26	; 0x08
    3830:	b9 87       	std	Y+9, r27	; 0x09
	u8 IsFloat = 0, IsNegative = 0, ShadedExpressionIdx = 0, OperandsArrIdx = 0;
    3832:	1d 82       	std	Y+5, r1	; 0x05
    3834:	1c 82       	std	Y+4, r1	; 0x04
    3836:	1b 82       	std	Y+3, r1	; 0x03
    3838:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_ExpIt;
	for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++){
    383a:	19 82       	std	Y+1, r1	; 0x01
    383c:	52 c4       	rjmp	.+2212   	; 0x40e2 <Validate_Expression+0x8e4>
		if(GlobalInputExpression[Local_ExpIt] == '-' || GlobalInputExpression[Local_ExpIt] == '+' ){
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	88 2f       	mov	r24, r24
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	fc 01       	movw	r30, r24
    3846:	ea 54       	subi	r30, 0x4A	; 74
    3848:	fc 4f       	sbci	r31, 0xFC	; 252
    384a:	80 81       	ld	r24, Z
    384c:	8d 32       	cpi	r24, 0x2D	; 45
    384e:	51 f0       	breq	.+20     	; 0x3864 <Validate_Expression+0x66>
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	88 2f       	mov	r24, r24
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	fc 01       	movw	r30, r24
    3858:	ea 54       	subi	r30, 0x4A	; 74
    385a:	fc 4f       	sbci	r31, 0xFC	; 252
    385c:	80 81       	ld	r24, Z
    385e:	8b 32       	cpi	r24, 0x2B	; 43
    3860:	09 f0       	breq	.+2      	; 0x3864 <Validate_Expression+0x66>
    3862:	99 c0       	rjmp	.+306    	; 0x3996 <Validate_Expression+0x198>
			if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1]) || Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3864:	89 81       	ldd	r24, Y+1	; 0x01
    3866:	88 23       	and	r24, r24
    3868:	c1 f0       	breq	.+48     	; 0x389a <Validate_Expression+0x9c>
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	88 2f       	mov	r24, r24
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	fc 01       	movw	r30, r24
    3874:	ea 54       	subi	r30, 0x4A	; 74
    3876:	fc 4f       	sbci	r31, 0xFC	; 252
    3878:	80 81       	ld	r24, Z
    387a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    387e:	88 23       	and	r24, r24
    3880:	61 f4       	brne	.+24     	; 0x389a <Validate_Expression+0x9c>
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	fc 01       	movw	r30, r24
    388c:	ea 54       	subi	r30, 0x4A	; 74
    388e:	fc 4f       	sbci	r31, 0xFC	; 252
    3890:	80 81       	ld	r24, Z
    3892:	0e 94 c0 1b 	call	0x3780	; 0x3780 <Is_Open_Brackets>
    3896:	88 23       	and	r24, r24
    3898:	79 f0       	breq	.+30     	; 0x38b8 <Validate_Expression+0xba>
				if(GlobalInputExpression[Local_ExpIt] == '-') IsNegative ^= 1;
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	88 2f       	mov	r24, r24
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	fc 01       	movw	r30, r24
    38a2:	ea 54       	subi	r30, 0x4A	; 74
    38a4:	fc 4f       	sbci	r31, 0xFC	; 252
    38a6:	80 81       	ld	r24, Z
    38a8:	8d 32       	cpi	r24, 0x2D	; 45
    38aa:	09 f0       	breq	.+2      	; 0x38ae <Validate_Expression+0xb0>
    38ac:	17 c4       	rjmp	.+2094   	; 0x40dc <Validate_Expression+0x8de>
    38ae:	8c 81       	ldd	r24, Y+4	; 0x04
    38b0:	91 e0       	ldi	r25, 0x01	; 1
    38b2:	89 27       	eor	r24, r25
    38b4:	8c 83       	std	Y+4, r24	; 0x04
    38b6:	12 c4       	rjmp	.+2084   	; 0x40dc <Validate_Expression+0x8de>
			}
			else {
                if(!Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	88 2f       	mov	r24, r24
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	fc 01       	movw	r30, r24
    38c2:	ea 54       	subi	r30, 0x4A	; 74
    38c4:	fc 4f       	sbci	r31, 0xFC	; 252
    38c6:	80 81       	ld	r24, Z
    38c8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    38cc:	88 23       	and	r24, r24
    38ce:	09 f0       	breq	.+2      	; 0x38d2 <Validate_Expression+0xd4>
    38d0:	50 c0       	rjmp	.+160    	; 0x3972 <Validate_Expression+0x174>
                    GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	28 2f       	mov	r18, r24
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	8f 5b       	subi	r24, 0xBF	; 191
    38dc:	f9 01       	movw	r30, r18
    38de:	ee 55       	subi	r30, 0x5E	; 94
    38e0:	fc 4f       	sbci	r31, 0xFC	; 252
    38e2:	80 83       	st	Z, r24
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	8f 5f       	subi	r24, 0xFF	; 255
    38e8:	8b 83       	std	Y+3, r24	; 0x03
                    if(IsNegative){
    38ea:	8c 81       	ldd	r24, Y+4	; 0x04
    38ec:	88 23       	and	r24, r24
    38ee:	d1 f0       	breq	.+52     	; 0x3924 <Validate_Expression+0x126>
                        GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    38f0:	8a 81       	ldd	r24, Y+2	; 0x02
    38f2:	68 2f       	mov	r22, r24
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    38f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    38fa:	ac 85       	ldd	r26, Y+12	; 0x0c
    38fc:	bd 85       	ldd	r27, Y+13	; 0x0d
    38fe:	9c 01       	movw	r18, r24
    3900:	ad 01       	movw	r20, r26
    3902:	50 58       	subi	r21, 0x80	; 128
    3904:	cb 01       	movw	r24, r22
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	88 0f       	add	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	fc 01       	movw	r30, r24
    3910:	ee 5a       	subi	r30, 0xAE	; 174
    3912:	fc 4f       	sbci	r31, 0xFC	; 252
    3914:	20 83       	st	Z, r18
    3916:	31 83       	std	Z+1, r19	; 0x01
    3918:	42 83       	std	Z+2, r20	; 0x02
    391a:	53 83       	std	Z+3, r21	; 0x03
    391c:	8a 81       	ldd	r24, Y+2	; 0x02
    391e:	8f 5f       	subi	r24, 0xFF	; 255
    3920:	8a 83       	std	Y+2, r24	; 0x02
    3922:	15 c0       	rjmp	.+42     	; 0x394e <Validate_Expression+0x150>
                    }
                    else {
                        GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	88 2f       	mov	r24, r24
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	88 0f       	add	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	fc 01       	movw	r30, r24
    3934:	ee 5a       	subi	r30, 0xAE	; 174
    3936:	fc 4f       	sbci	r31, 0xFC	; 252
    3938:	8a 85       	ldd	r24, Y+10	; 0x0a
    393a:	9b 85       	ldd	r25, Y+11	; 0x0b
    393c:	ac 85       	ldd	r26, Y+12	; 0x0c
    393e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3940:	80 83       	st	Z, r24
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	a2 83       	std	Z+2, r26	; 0x02
    3946:	b3 83       	std	Z+3, r27	; 0x03
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	8f 5f       	subi	r24, 0xFF	; 255
    394c:	8a 83       	std	Y+2, r24	; 0x02
                    }

                    //For New Number
                    IsFloat = 0, IsNegative = 0;
    394e:	1d 82       	std	Y+5, r1	; 0x05
    3950:	1c 82       	std	Y+4, r1	; 0x04
                    Local_s64Operand = 0,floatweight = 0.1;
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	a0 e0       	ldi	r26, 0x00	; 0
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	8a 87       	std	Y+10, r24	; 0x0a
    395c:	9b 87       	std	Y+11, r25	; 0x0b
    395e:	ac 87       	std	Y+12, r26	; 0x0c
    3960:	bd 87       	std	Y+13, r27	; 0x0d
    3962:	8d ec       	ldi	r24, 0xCD	; 205
    3964:	9c ec       	ldi	r25, 0xCC	; 204
    3966:	ac ec       	ldi	r26, 0xCC	; 204
    3968:	bd e3       	ldi	r27, 0x3D	; 61
    396a:	8e 83       	std	Y+6, r24	; 0x06
    396c:	9f 83       	std	Y+7, r25	; 0x07
    396e:	a8 87       	std	Y+8, r26	; 0x08
    3970:	b9 87       	std	Y+9, r27	; 0x09
                }
                GlobalShaddedExpression[ShadedExpressionIdx++] = GlobalInputExpression[Local_ExpIt];
    3972:	8b 81       	ldd	r24, Y+3	; 0x03
    3974:	28 2f       	mov	r18, r24
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	89 81       	ldd	r24, Y+1	; 0x01
    397a:	88 2f       	mov	r24, r24
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	fc 01       	movw	r30, r24
    3980:	ea 54       	subi	r30, 0x4A	; 74
    3982:	fc 4f       	sbci	r31, 0xFC	; 252
    3984:	80 81       	ld	r24, Z
    3986:	f9 01       	movw	r30, r18
    3988:	ee 55       	subi	r30, 0x5E	; 94
    398a:	fc 4f       	sbci	r31, 0xFC	; 252
    398c:	80 83       	st	Z, r24
    398e:	8b 81       	ldd	r24, Y+3	; 0x03
    3990:	8f 5f       	subi	r24, 0xFF	; 255
    3992:	8b 83       	std	Y+3, r24	; 0x03
    3994:	a3 c3       	rjmp	.+1862   	; 0x40dc <Validate_Expression+0x8de>
            }
		}
		else if(GlobalInputExpression[Local_ExpIt] == '*' || GlobalInputExpression[Local_ExpIt] == '/'){
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	fc 01       	movw	r30, r24
    399e:	ea 54       	subi	r30, 0x4A	; 74
    39a0:	fc 4f       	sbci	r31, 0xFC	; 252
    39a2:	80 81       	ld	r24, Z
    39a4:	8a 32       	cpi	r24, 0x2A	; 42
    39a6:	51 f0       	breq	.+20     	; 0x39bc <Validate_Expression+0x1be>
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	88 2f       	mov	r24, r24
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	fc 01       	movw	r30, r24
    39b0:	ea 54       	subi	r30, 0x4A	; 74
    39b2:	fc 4f       	sbci	r31, 0xFC	; 252
    39b4:	80 81       	ld	r24, Z
    39b6:	8f 32       	cpi	r24, 0x2F	; 47
    39b8:	09 f0       	breq	.+2      	; 0x39bc <Validate_Expression+0x1be>
    39ba:	8d c0       	rjmp	.+282    	; 0x3ad6 <Validate_Expression+0x2d8>
			if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1]) ||  Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
    39be:	88 23       	and	r24, r24
    39c0:	c1 f0       	breq	.+48     	; 0x39f2 <Validate_Expression+0x1f4>
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	fc 01       	movw	r30, r24
    39cc:	ea 54       	subi	r30, 0x4A	; 74
    39ce:	fc 4f       	sbci	r31, 0xFC	; 252
    39d0:	80 81       	ld	r24, Z
    39d2:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    39d6:	88 23       	and	r24, r24
    39d8:	61 f4       	brne	.+24     	; 0x39f2 <Validate_Expression+0x1f4>
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	88 2f       	mov	r24, r24
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	fc 01       	movw	r30, r24
    39e4:	ea 54       	subi	r30, 0x4A	; 74
    39e6:	fc 4f       	sbci	r31, 0xFC	; 252
    39e8:	80 81       	ld	r24, Z
    39ea:	0e 94 c0 1b 	call	0x3780	; 0x3780 <Is_Open_Brackets>
    39ee:	88 23       	and	r24, r24
    39f0:	19 f0       	breq	.+6      	; 0x39f8 <Validate_Expression+0x1fa>
				return ES_SYNTAX_ERROR;
    39f2:	84 e0       	ldi	r24, 0x04	; 4
    39f4:	8b 8b       	std	Y+19, r24	; 0x13
    39f6:	19 c4       	rjmp	.+2098   	; 0x422a <Validate_Expression+0xa2c>
			}
            else{
                if(!Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	fc 01       	movw	r30, r24
    3a02:	ea 54       	subi	r30, 0x4A	; 74
    3a04:	fc 4f       	sbci	r31, 0xFC	; 252
    3a06:	80 81       	ld	r24, Z
    3a08:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    3a0c:	88 23       	and	r24, r24
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <Validate_Expression+0x214>
    3a10:	50 c0       	rjmp	.+160    	; 0x3ab2 <Validate_Expression+0x2b4>
                    GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3a12:	8b 81       	ldd	r24, Y+3	; 0x03
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1a:	8f 5b       	subi	r24, 0xBF	; 191
    3a1c:	f9 01       	movw	r30, r18
    3a1e:	ee 55       	subi	r30, 0x5E	; 94
    3a20:	fc 4f       	sbci	r31, 0xFC	; 252
    3a22:	80 83       	st	Z, r24
    3a24:	8b 81       	ldd	r24, Y+3	; 0x03
    3a26:	8f 5f       	subi	r24, 0xFF	; 255
    3a28:	8b 83       	std	Y+3, r24	; 0x03
                    if(IsNegative){
    3a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2c:	88 23       	and	r24, r24
    3a2e:	d1 f0       	breq	.+52     	; 0x3a64 <Validate_Expression+0x266>
                        GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3a30:	8a 81       	ldd	r24, Y+2	; 0x02
    3a32:	68 2f       	mov	r22, r24
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a3a:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a3c:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a3e:	9c 01       	movw	r18, r24
    3a40:	ad 01       	movw	r20, r26
    3a42:	50 58       	subi	r21, 0x80	; 128
    3a44:	cb 01       	movw	r24, r22
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	fc 01       	movw	r30, r24
    3a50:	ee 5a       	subi	r30, 0xAE	; 174
    3a52:	fc 4f       	sbci	r31, 0xFC	; 252
    3a54:	20 83       	st	Z, r18
    3a56:	31 83       	std	Z+1, r19	; 0x01
    3a58:	42 83       	std	Z+2, r20	; 0x02
    3a5a:	53 83       	std	Z+3, r21	; 0x03
    3a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5e:	8f 5f       	subi	r24, 0xFF	; 255
    3a60:	8a 83       	std	Y+2, r24	; 0x02
    3a62:	15 c0       	rjmp	.+42     	; 0x3a8e <Validate_Expression+0x290>
                    }
                    else {
                        GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3a64:	8a 81       	ldd	r24, Y+2	; 0x02
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	88 0f       	add	r24, r24
    3a6c:	99 1f       	adc	r25, r25
    3a6e:	88 0f       	add	r24, r24
    3a70:	99 1f       	adc	r25, r25
    3a72:	fc 01       	movw	r30, r24
    3a74:	ee 5a       	subi	r30, 0xAE	; 174
    3a76:	fc 4f       	sbci	r31, 0xFC	; 252
    3a78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a7c:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a7e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a80:	80 83       	st	Z, r24
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	a2 83       	std	Z+2, r26	; 0x02
    3a86:	b3 83       	std	Z+3, r27	; 0x03
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	8f 5f       	subi	r24, 0xFF	; 255
    3a8c:	8a 83       	std	Y+2, r24	; 0x02
                    }

                    //For New Number
                    IsFloat = 0, IsNegative = 0;
    3a8e:	1d 82       	std	Y+5, r1	; 0x05
    3a90:	1c 82       	std	Y+4, r1	; 0x04
                    Local_s64Operand = 0,floatweight = 0.1;
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a0 e0       	ldi	r26, 0x00	; 0
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	8a 87       	std	Y+10, r24	; 0x0a
    3a9c:	9b 87       	std	Y+11, r25	; 0x0b
    3a9e:	ac 87       	std	Y+12, r26	; 0x0c
    3aa0:	bd 87       	std	Y+13, r27	; 0x0d
    3aa2:	8d ec       	ldi	r24, 0xCD	; 205
    3aa4:	9c ec       	ldi	r25, 0xCC	; 204
    3aa6:	ac ec       	ldi	r26, 0xCC	; 204
    3aa8:	bd e3       	ldi	r27, 0x3D	; 61
    3aaa:	8e 83       	std	Y+6, r24	; 0x06
    3aac:	9f 83       	std	Y+7, r25	; 0x07
    3aae:	a8 87       	std	Y+8, r26	; 0x08
    3ab0:	b9 87       	std	Y+9, r27	; 0x09
                }
                GlobalShaddedExpression[ShadedExpressionIdx++] = GlobalInputExpression[Local_ExpIt];
    3ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab4:	28 2f       	mov	r18, r24
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	88 2f       	mov	r24, r24
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	fc 01       	movw	r30, r24
    3ac0:	ea 54       	subi	r30, 0x4A	; 74
    3ac2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ac4:	80 81       	ld	r24, Z
    3ac6:	f9 01       	movw	r30, r18
    3ac8:	ee 55       	subi	r30, 0x5E	; 94
    3aca:	fc 4f       	sbci	r31, 0xFC	; 252
    3acc:	80 83       	st	Z, r24
    3ace:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad0:	8f 5f       	subi	r24, 0xFF	; 255
    3ad2:	8b 83       	std	Y+3, r24	; 0x03
    3ad4:	03 c3       	rjmp	.+1542   	; 0x40dc <Validate_Expression+0x8de>

            }

		}
		else if(Is_Operator(GlobalInputExpression[Local_ExpIt])){
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	88 2f       	mov	r24, r24
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	fc 01       	movw	r30, r24
    3ade:	ea 54       	subi	r30, 0x4A	; 74
    3ae0:	fc 4f       	sbci	r31, 0xFC	; 252
    3ae2:	80 81       	ld	r24, Z
    3ae4:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    3ae8:	88 23       	and	r24, r24
    3aea:	09 f4       	brne	.+2      	; 0x3aee <Validate_Expression+0x2f0>
    3aec:	81 c0       	rjmp	.+258    	; 0x3bf0 <Validate_Expression+0x3f2>
			if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1])){
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	88 23       	and	r24, r24
    3af2:	61 f0       	breq	.+24     	; 0x3b0c <Validate_Expression+0x30e>
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	88 2f       	mov	r24, r24
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	fc 01       	movw	r30, r24
    3afe:	ea 54       	subi	r30, 0x4A	; 74
    3b00:	fc 4f       	sbci	r31, 0xFC	; 252
    3b02:	80 81       	ld	r24, Z
    3b04:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    3b08:	88 23       	and	r24, r24
    3b0a:	19 f0       	breq	.+6      	; 0x3b12 <Validate_Expression+0x314>
				return ES_SYNTAX_ERROR;
    3b0c:	84 e0       	ldi	r24, 0x04	; 4
    3b0e:	8b 8b       	std	Y+19, r24	; 0x13
    3b10:	8c c3       	rjmp	.+1816   	; 0x422a <Validate_Expression+0xa2c>
			}
			else{
                if(!Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	88 2f       	mov	r24, r24
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	ea 54       	subi	r30, 0x4A	; 74
    3b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3b20:	80 81       	ld	r24, Z
    3b22:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    3b26:	88 23       	and	r24, r24
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <Validate_Expression+0x32e>
    3b2a:	50 c0       	rjmp	.+160    	; 0x3bcc <Validate_Expression+0x3ce>
                    GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	28 2f       	mov	r18, r24
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	8a 81       	ldd	r24, Y+2	; 0x02
    3b34:	8f 5b       	subi	r24, 0xBF	; 191
    3b36:	f9 01       	movw	r30, r18
    3b38:	ee 55       	subi	r30, 0x5E	; 94
    3b3a:	fc 4f       	sbci	r31, 0xFC	; 252
    3b3c:	80 83       	st	Z, r24
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	8f 5f       	subi	r24, 0xFF	; 255
    3b42:	8b 83       	std	Y+3, r24	; 0x03
                    if(IsNegative){
    3b44:	8c 81       	ldd	r24, Y+4	; 0x04
    3b46:	88 23       	and	r24, r24
    3b48:	d1 f0       	breq	.+52     	; 0x3b7e <Validate_Expression+0x380>
                        GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4c:	68 2f       	mov	r22, r24
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b52:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b54:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b56:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b58:	9c 01       	movw	r18, r24
    3b5a:	ad 01       	movw	r20, r26
    3b5c:	50 58       	subi	r21, 0x80	; 128
    3b5e:	cb 01       	movw	r24, r22
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	fc 01       	movw	r30, r24
    3b6a:	ee 5a       	subi	r30, 0xAE	; 174
    3b6c:	fc 4f       	sbci	r31, 0xFC	; 252
    3b6e:	20 83       	st	Z, r18
    3b70:	31 83       	std	Z+1, r19	; 0x01
    3b72:	42 83       	std	Z+2, r20	; 0x02
    3b74:	53 83       	std	Z+3, r21	; 0x03
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	8f 5f       	subi	r24, 0xFF	; 255
    3b7a:	8a 83       	std	Y+2, r24	; 0x02
    3b7c:	15 c0       	rjmp	.+42     	; 0x3ba8 <Validate_Expression+0x3aa>
                    }
                    else {
                        GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	88 2f       	mov	r24, r24
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	88 0f       	add	r24, r24
    3b86:	99 1f       	adc	r25, r25
    3b88:	88 0f       	add	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	ee 5a       	subi	r30, 0xAE	; 174
    3b90:	fc 4f       	sbci	r31, 0xFC	; 252
    3b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b94:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b96:	ac 85       	ldd	r26, Y+12	; 0x0c
    3b98:	bd 85       	ldd	r27, Y+13	; 0x0d
    3b9a:	80 83       	st	Z, r24
    3b9c:	91 83       	std	Z+1, r25	; 0x01
    3b9e:	a2 83       	std	Z+2, r26	; 0x02
    3ba0:	b3 83       	std	Z+3, r27	; 0x03
    3ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba4:	8f 5f       	subi	r24, 0xFF	; 255
    3ba6:	8a 83       	std	Y+2, r24	; 0x02
                    }

                    //For New Number
                    IsFloat = 0, IsNegative = 0;
    3ba8:	1d 82       	std	Y+5, r1	; 0x05
    3baa:	1c 82       	std	Y+4, r1	; 0x04
                    Local_s64Operand = 0,floatweight = 0.1;
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	a0 e0       	ldi	r26, 0x00	; 0
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	8a 87       	std	Y+10, r24	; 0x0a
    3bb6:	9b 87       	std	Y+11, r25	; 0x0b
    3bb8:	ac 87       	std	Y+12, r26	; 0x0c
    3bba:	bd 87       	std	Y+13, r27	; 0x0d
    3bbc:	8d ec       	ldi	r24, 0xCD	; 205
    3bbe:	9c ec       	ldi	r25, 0xCC	; 204
    3bc0:	ac ec       	ldi	r26, 0xCC	; 204
    3bc2:	bd e3       	ldi	r27, 0x3D	; 61
    3bc4:	8e 83       	std	Y+6, r24	; 0x06
    3bc6:	9f 83       	std	Y+7, r25	; 0x07
    3bc8:	a8 87       	std	Y+8, r26	; 0x08
    3bca:	b9 87       	std	Y+9, r27	; 0x09
                }
                GlobalShaddedExpression[ShadedExpressionIdx++] = GlobalInputExpression[Local_ExpIt];
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	88 2f       	mov	r24, r24
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	fc 01       	movw	r30, r24
    3bda:	ea 54       	subi	r30, 0x4A	; 74
    3bdc:	fc 4f       	sbci	r31, 0xFC	; 252
    3bde:	80 81       	ld	r24, Z
    3be0:	f9 01       	movw	r30, r18
    3be2:	ee 55       	subi	r30, 0x5E	; 94
    3be4:	fc 4f       	sbci	r31, 0xFC	; 252
    3be6:	80 83       	st	Z, r24
    3be8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bea:	8f 5f       	subi	r24, 0xFF	; 255
    3bec:	8b 83       	std	Y+3, r24	; 0x03
    3bee:	76 c2       	rjmp	.+1260   	; 0x40dc <Validate_Expression+0x8de>
			}
		}
		else if(GlobalInputExpression[Local_ExpIt] == '.'){
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	88 2f       	mov	r24, r24
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	ea 54       	subi	r30, 0x4A	; 74
    3bfa:	fc 4f       	sbci	r31, 0xFC	; 252
    3bfc:	80 81       	ld	r24, Z
    3bfe:	8e 32       	cpi	r24, 0x2E	; 46
    3c00:	09 f0       	breq	.+2      	; 0x3c04 <Validate_Expression+0x406>
    3c02:	40 c0       	rjmp	.+128    	; 0x3c84 <Validate_Expression+0x486>
			if(IsFloat || (Local_ExpIt > 0 && Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1]))){
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	88 23       	and	r24, r24
    3c08:	79 f4       	brne	.+30     	; 0x3c28 <Validate_Expression+0x42a>
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	88 23       	and	r24, r24
    3c0e:	79 f0       	breq	.+30     	; 0x3c2e <Validate_Expression+0x430>
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	88 2f       	mov	r24, r24
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	fc 01       	movw	r30, r24
    3c1a:	ea 54       	subi	r30, 0x4A	; 74
    3c1c:	fc 4f       	sbci	r31, 0xFC	; 252
    3c1e:	80 81       	ld	r24, Z
    3c20:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    3c24:	88 23       	and	r24, r24
    3c26:	19 f0       	breq	.+6      	; 0x3c2e <Validate_Expression+0x430>
				return ES_SYNTAX_ERROR;
    3c28:	84 e0       	ldi	r24, 0x04	; 4
    3c2a:	8b 8b       	std	Y+19, r24	; 0x13
    3c2c:	fe c2       	rjmp	.+1532   	; 0x422a <Validate_Expression+0xa2c>
			}
			if(!Local_ExpIt || Is_Number(GlobalInputExpression[Local_ExpIt - 1]) ||Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1]) || Is_Operator(GlobalInputExpression[Local_ExpIt - 1])){
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	88 23       	and	r24, r24
    3c32:	29 f1       	breq	.+74     	; 0x3c7e <Validate_Expression+0x480>
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	88 2f       	mov	r24, r24
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	ea 54       	subi	r30, 0x4A	; 74
    3c40:	fc 4f       	sbci	r31, 0xFC	; 252
    3c42:	80 81       	ld	r24, Z
    3c44:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <Is_Number>
    3c48:	88 23       	and	r24, r24
    3c4a:	c9 f4       	brne	.+50     	; 0x3c7e <Validate_Expression+0x480>
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	88 2f       	mov	r24, r24
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	01 97       	sbiw	r24, 0x01	; 1
    3c54:	fc 01       	movw	r30, r24
    3c56:	ea 54       	subi	r30, 0x4A	; 74
    3c58:	fc 4f       	sbci	r31, 0xFC	; 252
    3c5a:	80 81       	ld	r24, Z
    3c5c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <Is_Open_Brackets>
    3c60:	88 23       	and	r24, r24
    3c62:	69 f4       	brne	.+26     	; 0x3c7e <Validate_Expression+0x480>
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	88 2f       	mov	r24, r24
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	ea 54       	subi	r30, 0x4A	; 74
    3c70:	fc 4f       	sbci	r31, 0xFC	; 252
    3c72:	80 81       	ld	r24, Z
    3c74:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    3c78:	88 23       	and	r24, r24
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <Validate_Expression+0x480>
    3c7c:	2f c2       	rjmp	.+1118   	; 0x40dc <Validate_Expression+0x8de>
				IsFloat = 1;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	8d 83       	std	Y+5, r24	; 0x05
    3c82:	2c c2       	rjmp	.+1112   	; 0x40dc <Validate_Expression+0x8de>
			}
		}
		else if(Is_Number(GlobalInputExpression[Local_ExpIt])){
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	88 2f       	mov	r24, r24
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	ea 54       	subi	r30, 0x4A	; 74
    3c8e:	fc 4f       	sbci	r31, 0xFC	; 252
    3c90:	80 81       	ld	r24, Z
    3c92:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <Is_Number>
    3c96:	88 23       	and	r24, r24
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <Validate_Expression+0x49e>
    3c9a:	80 c0       	rjmp	.+256    	; 0x3d9c <Validate_Expression+0x59e>
			if(Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	88 2f       	mov	r24, r24
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	ea 54       	subi	r30, 0x4A	; 74
    3ca8:	fc 4f       	sbci	r31, 0xFC	; 252
    3caa:	80 81       	ld	r24, Z
    3cac:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    3cb0:	88 23       	and	r24, r24
    3cb2:	19 f0       	breq	.+6      	; 0x3cba <Validate_Expression+0x4bc>
				return ES_SYNTAX_ERROR;
    3cb4:	84 e0       	ldi	r24, 0x04	; 4
    3cb6:	8b 8b       	std	Y+19, r24	; 0x13
    3cb8:	b8 c2       	rjmp	.+1392   	; 0x422a <Validate_Expression+0xa2c>
			}
			else if(IsFloat){
    3cba:	8d 81       	ldd	r24, Y+5	; 0x05
    3cbc:	88 23       	and	r24, r24
    3cbe:	e9 f1       	breq	.+122    	; 0x3d3a <Validate_Expression+0x53c>
				Local_s64Operand += floatweight * (GlobalInputExpression[Local_ExpIt] - '0');
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	88 2f       	mov	r24, r24
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	ea 54       	subi	r30, 0x4A	; 74
    3cca:	fc 4f       	sbci	r31, 0xFC	; 252
    3ccc:	80 81       	ld	r24, Z
    3cce:	88 2f       	mov	r24, r24
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	c0 97       	sbiw	r24, 0x30	; 48
    3cd4:	aa 27       	eor	r26, r26
    3cd6:	97 fd       	sbrc	r25, 7
    3cd8:	a0 95       	com	r26
    3cda:	ba 2f       	mov	r27, r26
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	cd 01       	movw	r24, r26
    3cec:	2e 81       	ldd	r18, Y+6	; 0x06
    3cee:	3f 81       	ldd	r19, Y+7	; 0x07
    3cf0:	48 85       	ldd	r20, Y+8	; 0x08
    3cf2:	59 85       	ldd	r21, Y+9	; 0x09
    3cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	9c 01       	movw	r18, r24
    3cfe:	ad 01       	movw	r20, r26
    3d00:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d02:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d04:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d06:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d08:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	8a 87       	std	Y+10, r24	; 0x0a
    3d12:	9b 87       	std	Y+11, r25	; 0x0b
    3d14:	ac 87       	std	Y+12, r26	; 0x0c
    3d16:	bd 87       	std	Y+13, r27	; 0x0d
				floatweight/=10;
    3d18:	6e 81       	ldd	r22, Y+6	; 0x06
    3d1a:	7f 81       	ldd	r23, Y+7	; 0x07
    3d1c:	88 85       	ldd	r24, Y+8	; 0x08
    3d1e:	99 85       	ldd	r25, Y+9	; 0x09
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e2       	ldi	r20, 0x20	; 32
    3d26:	51 e4       	ldi	r21, 0x41	; 65
    3d28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	8e 83       	std	Y+6, r24	; 0x06
    3d32:	9f 83       	std	Y+7, r25	; 0x07
    3d34:	a8 87       	std	Y+8, r26	; 0x08
    3d36:	b9 87       	std	Y+9, r27	; 0x09
    3d38:	d1 c1       	rjmp	.+930    	; 0x40dc <Validate_Expression+0x8de>
			}
			else{
				Local_s64Operand *= 10;
    3d3a:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d3c:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d40:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	8a 87       	std	Y+10, r24	; 0x0a
    3d54:	9b 87       	std	Y+11, r25	; 0x0b
    3d56:	ac 87       	std	Y+12, r26	; 0x0c
    3d58:	bd 87       	std	Y+13, r27	; 0x0d
				Local_s64Operand += (GlobalInputExpression[Local_ExpIt] - '0');
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	88 2f       	mov	r24, r24
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	fc 01       	movw	r30, r24
    3d62:	ea 54       	subi	r30, 0x4A	; 74
    3d64:	fc 4f       	sbci	r31, 0xFC	; 252
    3d66:	80 81       	ld	r24, Z
    3d68:	88 2f       	mov	r24, r24
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	c0 97       	sbiw	r24, 0x30	; 48
    3d6e:	aa 27       	eor	r26, r26
    3d70:	97 fd       	sbrc	r25, 7
    3d72:	a0 95       	com	r26
    3d74:	ba 2f       	mov	r27, r26
    3d76:	bc 01       	movw	r22, r24
    3d78:	cd 01       	movw	r24, r26
    3d7a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3d7e:	9b 01       	movw	r18, r22
    3d80:	ac 01       	movw	r20, r24
    3d82:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d84:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d86:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d88:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d8a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	8a 87       	std	Y+10, r24	; 0x0a
    3d94:	9b 87       	std	Y+11, r25	; 0x0b
    3d96:	ac 87       	std	Y+12, r26	; 0x0c
    3d98:	bd 87       	std	Y+13, r27	; 0x0d
    3d9a:	a0 c1       	rjmp	.+832    	; 0x40dc <Validate_Expression+0x8de>
			}
		}
        else if(Is_Close_Brackets(GlobalInputExpression[Local_ExpIt])){
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	88 2f       	mov	r24, r24
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	fc 01       	movw	r30, r24
    3da4:	ea 54       	subi	r30, 0x4A	; 74
    3da6:	fc 4f       	sbci	r31, 0xFC	; 252
    3da8:	80 81       	ld	r24, Z
    3daa:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    3dae:	88 23       	and	r24, r24
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <Validate_Expression+0x5b6>
    3db2:	96 c0       	rjmp	.+300    	; 0x3ee0 <Validate_Expression+0x6e2>
            if(!Local_ExpIt || Is_Operator(GlobalInputExpression[Local_ExpIt - 1]) || Is_Open_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	88 23       	and	r24, r24
    3db8:	c1 f0       	breq	.+48     	; 0x3dea <Validate_Expression+0x5ec>
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	88 2f       	mov	r24, r24
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	ea 54       	subi	r30, 0x4A	; 74
    3dc6:	fc 4f       	sbci	r31, 0xFC	; 252
    3dc8:	80 81       	ld	r24, Z
    3dca:	0e 94 9c 1b 	call	0x3738	; 0x3738 <Is_Operator>
    3dce:	88 23       	and	r24, r24
    3dd0:	61 f4       	brne	.+24     	; 0x3dea <Validate_Expression+0x5ec>
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	88 2f       	mov	r24, r24
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	fc 01       	movw	r30, r24
    3ddc:	ea 54       	subi	r30, 0x4A	; 74
    3dde:	fc 4f       	sbci	r31, 0xFC	; 252
    3de0:	80 81       	ld	r24, Z
    3de2:	0e 94 c0 1b 	call	0x3780	; 0x3780 <Is_Open_Brackets>
    3de6:	88 23       	and	r24, r24
    3de8:	19 f0       	breq	.+6      	; 0x3df0 <Validate_Expression+0x5f2>
                return ES_SYNTAX_ERROR;
    3dea:	84 e0       	ldi	r24, 0x04	; 4
    3dec:	8b 8b       	std	Y+19, r24	; 0x13
    3dee:	1d c2       	rjmp	.+1082   	; 0x422a <Validate_Expression+0xa2c>
            }
            else if(Is_Number(GlobalInputExpression[Local_ExpIt - 1]) || IsFloat){
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	88 2f       	mov	r24, r24
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	fc 01       	movw	r30, r24
    3dfa:	ea 54       	subi	r30, 0x4A	; 74
    3dfc:	fc 4f       	sbci	r31, 0xFC	; 252
    3dfe:	80 81       	ld	r24, Z
    3e00:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <Is_Number>
    3e04:	88 23       	and	r24, r24
    3e06:	21 f4       	brne	.+8      	; 0x3e10 <Validate_Expression+0x612>
    3e08:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0a:	88 23       	and	r24, r24
    3e0c:	09 f4       	brne	.+2      	; 0x3e10 <Validate_Expression+0x612>
    3e0e:	5c c0       	rjmp	.+184    	; 0x3ec8 <Validate_Expression+0x6ca>
                GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3e10:	8b 81       	ldd	r24, Y+3	; 0x03
    3e12:	28 2f       	mov	r18, r24
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	8f 5b       	subi	r24, 0xBF	; 191
    3e1a:	f9 01       	movw	r30, r18
    3e1c:	ee 55       	subi	r30, 0x5E	; 94
    3e1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3e20:	80 83       	st	Z, r24
    3e22:	8b 81       	ldd	r24, Y+3	; 0x03
    3e24:	8f 5f       	subi	r24, 0xFF	; 255
    3e26:	8b 83       	std	Y+3, r24	; 0x03
                GlobalShaddedExpression[ShadedExpressionIdx++] = ')';
    3e28:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2a:	88 2f       	mov	r24, r24
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	fc 01       	movw	r30, r24
    3e30:	ee 55       	subi	r30, 0x5E	; 94
    3e32:	fc 4f       	sbci	r31, 0xFC	; 252
    3e34:	89 e2       	ldi	r24, 0x29	; 41
    3e36:	80 83       	st	Z, r24
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	8f 5f       	subi	r24, 0xFF	; 255
    3e3c:	8b 83       	std	Y+3, r24	; 0x03
                if(IsNegative){
    3e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e40:	88 23       	and	r24, r24
    3e42:	d1 f0       	breq	.+52     	; 0x3e78 <Validate_Expression+0x67a>
                    GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	68 2f       	mov	r22, r24
    3e48:	70 e0       	ldi	r23, 0x00	; 0
    3e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e4e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3e50:	bd 85       	ldd	r27, Y+13	; 0x0d
    3e52:	9c 01       	movw	r18, r24
    3e54:	ad 01       	movw	r20, r26
    3e56:	50 58       	subi	r21, 0x80	; 128
    3e58:	cb 01       	movw	r24, r22
    3e5a:	88 0f       	add	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	88 0f       	add	r24, r24
    3e60:	99 1f       	adc	r25, r25
    3e62:	fc 01       	movw	r30, r24
    3e64:	ee 5a       	subi	r30, 0xAE	; 174
    3e66:	fc 4f       	sbci	r31, 0xFC	; 252
    3e68:	20 83       	st	Z, r18
    3e6a:	31 83       	std	Z+1, r19	; 0x01
    3e6c:	42 83       	std	Z+2, r20	; 0x02
    3e6e:	53 83       	std	Z+3, r21	; 0x03
    3e70:	8a 81       	ldd	r24, Y+2	; 0x02
    3e72:	8f 5f       	subi	r24, 0xFF	; 255
    3e74:	8a 83       	std	Y+2, r24	; 0x02
    3e76:	15 c0       	rjmp	.+42     	; 0x3ea2 <Validate_Expression+0x6a4>
                }
                else {
                    GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3e78:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7a:	88 2f       	mov	r24, r24
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	88 0f       	add	r24, r24
    3e84:	99 1f       	adc	r25, r25
    3e86:	fc 01       	movw	r30, r24
    3e88:	ee 5a       	subi	r30, 0xAE	; 174
    3e8a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e90:	ac 85       	ldd	r26, Y+12	; 0x0c
    3e92:	bd 85       	ldd	r27, Y+13	; 0x0d
    3e94:	80 83       	st	Z, r24
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	a2 83       	std	Z+2, r26	; 0x02
    3e9a:	b3 83       	std	Z+3, r27	; 0x03
    3e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ea0:	8a 83       	std	Y+2, r24	; 0x02
                }
                //For New Number
                IsFloat = 0, IsNegative = 0;
    3ea2:	1d 82       	std	Y+5, r1	; 0x05
    3ea4:	1c 82       	std	Y+4, r1	; 0x04
                Local_s64Operand = 0,floatweight = 0.1;
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	8a 87       	std	Y+10, r24	; 0x0a
    3eb0:	9b 87       	std	Y+11, r25	; 0x0b
    3eb2:	ac 87       	std	Y+12, r26	; 0x0c
    3eb4:	bd 87       	std	Y+13, r27	; 0x0d
    3eb6:	8d ec       	ldi	r24, 0xCD	; 205
    3eb8:	9c ec       	ldi	r25, 0xCC	; 204
    3eba:	ac ec       	ldi	r26, 0xCC	; 204
    3ebc:	bd e3       	ldi	r27, 0x3D	; 61
    3ebe:	8e 83       	std	Y+6, r24	; 0x06
    3ec0:	9f 83       	std	Y+7, r25	; 0x07
    3ec2:	a8 87       	std	Y+8, r26	; 0x08
    3ec4:	b9 87       	std	Y+9, r27	; 0x09
    3ec6:	0a c1       	rjmp	.+532    	; 0x40dc <Validate_Expression+0x8de>
            }
            else{
                GlobalShaddedExpression[ShadedExpressionIdx++] = ')';
    3ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eca:	88 2f       	mov	r24, r24
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	fc 01       	movw	r30, r24
    3ed0:	ee 55       	subi	r30, 0x5E	; 94
    3ed2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ed4:	89 e2       	ldi	r24, 0x29	; 41
    3ed6:	80 83       	st	Z, r24
    3ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eda:	8f 5f       	subi	r24, 0xFF	; 255
    3edc:	8b 83       	std	Y+3, r24	; 0x03
    3ede:	fe c0       	rjmp	.+508    	; 0x40dc <Validate_Expression+0x8de>
            }
        }
		else if(Is_Open_Brackets(GlobalInputExpression[Local_ExpIt])){
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	88 2f       	mov	r24, r24
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	ea 54       	subi	r30, 0x4A	; 74
    3eea:	fc 4f       	sbci	r31, 0xFC	; 252
    3eec:	80 81       	ld	r24, Z
    3eee:	0e 94 c0 1b 	call	0x3780	; 0x3780 <Is_Open_Brackets>
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <Validate_Expression+0x6fa>
    3ef6:	f2 c0       	rjmp	.+484    	; 0x40dc <Validate_Expression+0x8de>
			if(Local_ExpIt && Is_Close_Brackets(GlobalInputExpression[Local_ExpIt - 1])){
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	88 23       	and	r24, r24
    3efc:	09 f4       	brne	.+2      	; 0x3f00 <Validate_Expression+0x702>
    3efe:	68 c0       	rjmp	.+208    	; 0x3fd0 <Validate_Expression+0x7d2>
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	88 2f       	mov	r24, r24
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	fc 01       	movw	r30, r24
    3f0a:	ea 54       	subi	r30, 0x4A	; 74
    3f0c:	fc 4f       	sbci	r31, 0xFC	; 252
    3f0e:	80 81       	ld	r24, Z
    3f10:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <Is_Close_Brackets>
    3f14:	88 23       	and	r24, r24
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <Validate_Expression+0x71c>
    3f18:	5b c0       	rjmp	.+182    	; 0x3fd0 <Validate_Expression+0x7d2>
				GlobalShaddedExpression[ShadedExpressionIdx++] = '*';
    3f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1c:	88 2f       	mov	r24, r24
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	fc 01       	movw	r30, r24
    3f22:	ee 55       	subi	r30, 0x5E	; 94
    3f24:	fc 4f       	sbci	r31, 0xFC	; 252
    3f26:	8a e2       	ldi	r24, 0x2A	; 42
    3f28:	80 83       	st	Z, r24
    3f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2c:	8f 5f       	subi	r24, 0xFF	; 255
    3f2e:	8b 83       	std	Y+3, r24	; 0x03
                GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
    3f30:	8b 81       	ldd	r24, Y+3	; 0x03
    3f32:	88 2f       	mov	r24, r24
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	fc 01       	movw	r30, r24
    3f38:	ee 55       	subi	r30, 0x5E	; 94
    3f3a:	fc 4f       	sbci	r31, 0xFC	; 252
    3f3c:	88 e2       	ldi	r24, 0x28	; 40
    3f3e:	80 83       	st	Z, r24
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	8f 5f       	subi	r24, 0xFF	; 255
    3f44:	8b 83       	std	Y+3, r24	; 0x03
                if(IsNegative){
    3f46:	8c 81       	ldd	r24, Y+4	; 0x04
    3f48:	88 23       	and	r24, r24
    3f4a:	d1 f0       	breq	.+52     	; 0x3f80 <Validate_Expression+0x782>
					GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	68 2f       	mov	r22, r24
    3f50:	70 e0       	ldi	r23, 0x00	; 0
    3f52:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f54:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f56:	ac 85       	ldd	r26, Y+12	; 0x0c
    3f58:	bd 85       	ldd	r27, Y+13	; 0x0d
    3f5a:	9c 01       	movw	r18, r24
    3f5c:	ad 01       	movw	r20, r26
    3f5e:	50 58       	subi	r21, 0x80	; 128
    3f60:	cb 01       	movw	r24, r22
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	ee 5a       	subi	r30, 0xAE	; 174
    3f6e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f70:	20 83       	st	Z, r18
    3f72:	31 83       	std	Z+1, r19	; 0x01
    3f74:	42 83       	std	Z+2, r20	; 0x02
    3f76:	53 83       	std	Z+3, r21	; 0x03
    3f78:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7a:	8f 5f       	subi	r24, 0xFF	; 255
    3f7c:	8a 83       	std	Y+2, r24	; 0x02
    3f7e:	15 c0       	rjmp	.+42     	; 0x3faa <Validate_Expression+0x7ac>
				}
				else {
					GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	88 2f       	mov	r24, r24
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	88 0f       	add	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	fc 01       	movw	r30, r24
    3f90:	ee 5a       	subi	r30, 0xAE	; 174
    3f92:	fc 4f       	sbci	r31, 0xFC	; 252
    3f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f98:	ac 85       	ldd	r26, Y+12	; 0x0c
    3f9a:	bd 85       	ldd	r27, Y+13	; 0x0d
    3f9c:	80 83       	st	Z, r24
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	a2 83       	std	Z+2, r26	; 0x02
    3fa2:	b3 83       	std	Z+3, r27	; 0x03
    3fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa6:	8f 5f       	subi	r24, 0xFF	; 255
    3fa8:	8a 83       	std	Y+2, r24	; 0x02
				}
				//For New Number
				IsFloat = 0, IsNegative = 0;
    3faa:	1d 82       	std	Y+5, r1	; 0x05
    3fac:	1c 82       	std	Y+4, r1	; 0x04
				Local_s64Operand = 0,floatweight = 0.1;
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	a0 e0       	ldi	r26, 0x00	; 0
    3fb4:	b0 e0       	ldi	r27, 0x00	; 0
    3fb6:	8a 87       	std	Y+10, r24	; 0x0a
    3fb8:	9b 87       	std	Y+11, r25	; 0x0b
    3fba:	ac 87       	std	Y+12, r26	; 0x0c
    3fbc:	bd 87       	std	Y+13, r27	; 0x0d
    3fbe:	8d ec       	ldi	r24, 0xCD	; 205
    3fc0:	9c ec       	ldi	r25, 0xCC	; 204
    3fc2:	ac ec       	ldi	r26, 0xCC	; 204
    3fc4:	bd e3       	ldi	r27, 0x3D	; 61
    3fc6:	8e 83       	std	Y+6, r24	; 0x06
    3fc8:	9f 83       	std	Y+7, r25	; 0x07
    3fca:	a8 87       	std	Y+8, r26	; 0x08
    3fcc:	b9 87       	std	Y+9, r27	; 0x09
    3fce:	86 c0       	rjmp	.+268    	; 0x40dc <Validate_Expression+0x8de>
			}
			else if(Local_ExpIt && (Is_Number(GlobalInputExpression[Local_ExpIt - 1])|| IsFloat)){
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	88 23       	and	r24, r24
    3fd4:	09 f4       	brne	.+2      	; 0x3fd8 <Validate_Expression+0x7da>
    3fd6:	77 c0       	rjmp	.+238    	; 0x40c6 <Validate_Expression+0x8c8>
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	88 2f       	mov	r24, r24
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	ea 54       	subi	r30, 0x4A	; 74
    3fe4:	fc 4f       	sbci	r31, 0xFC	; 252
    3fe6:	80 81       	ld	r24, Z
    3fe8:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <Is_Number>
    3fec:	88 23       	and	r24, r24
    3fee:	21 f4       	brne	.+8      	; 0x3ff8 <Validate_Expression+0x7fa>
    3ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff2:	88 23       	and	r24, r24
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <Validate_Expression+0x7fa>
    3ff6:	67 c0       	rjmp	.+206    	; 0x40c6 <Validate_Expression+0x8c8>
				GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	28 2f       	mov	r18, r24
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    4000:	8f 5b       	subi	r24, 0xBF	; 191
    4002:	f9 01       	movw	r30, r18
    4004:	ee 55       	subi	r30, 0x5E	; 94
    4006:	fc 4f       	sbci	r31, 0xFC	; 252
    4008:	80 83       	st	Z, r24
    400a:	8b 81       	ldd	r24, Y+3	; 0x03
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	8b 83       	std	Y+3, r24	; 0x03
				GlobalShaddedExpression[ShadedExpressionIdx++] = '*';
    4010:	8b 81       	ldd	r24, Y+3	; 0x03
    4012:	88 2f       	mov	r24, r24
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	fc 01       	movw	r30, r24
    4018:	ee 55       	subi	r30, 0x5E	; 94
    401a:	fc 4f       	sbci	r31, 0xFC	; 252
    401c:	8a e2       	ldi	r24, 0x2A	; 42
    401e:	80 83       	st	Z, r24
    4020:	8b 81       	ldd	r24, Y+3	; 0x03
    4022:	8f 5f       	subi	r24, 0xFF	; 255
    4024:	8b 83       	std	Y+3, r24	; 0x03
                GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
    4026:	8b 81       	ldd	r24, Y+3	; 0x03
    4028:	88 2f       	mov	r24, r24
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	fc 01       	movw	r30, r24
    402e:	ee 55       	subi	r30, 0x5E	; 94
    4030:	fc 4f       	sbci	r31, 0xFC	; 252
    4032:	88 e2       	ldi	r24, 0x28	; 40
    4034:	80 83       	st	Z, r24
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	8f 5f       	subi	r24, 0xFF	; 255
    403a:	8b 83       	std	Y+3, r24	; 0x03
                if(IsNegative){
    403c:	8c 81       	ldd	r24, Y+4	; 0x04
    403e:	88 23       	and	r24, r24
    4040:	d1 f0       	breq	.+52     	; 0x4076 <Validate_Expression+0x878>
					GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	68 2f       	mov	r22, r24
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	8a 85       	ldd	r24, Y+10	; 0x0a
    404a:	9b 85       	ldd	r25, Y+11	; 0x0b
    404c:	ac 85       	ldd	r26, Y+12	; 0x0c
    404e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4050:	9c 01       	movw	r18, r24
    4052:	ad 01       	movw	r20, r26
    4054:	50 58       	subi	r21, 0x80	; 128
    4056:	cb 01       	movw	r24, r22
    4058:	88 0f       	add	r24, r24
    405a:	99 1f       	adc	r25, r25
    405c:	88 0f       	add	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	fc 01       	movw	r30, r24
    4062:	ee 5a       	subi	r30, 0xAE	; 174
    4064:	fc 4f       	sbci	r31, 0xFC	; 252
    4066:	20 83       	st	Z, r18
    4068:	31 83       	std	Z+1, r19	; 0x01
    406a:	42 83       	std	Z+2, r20	; 0x02
    406c:	53 83       	std	Z+3, r21	; 0x03
    406e:	8a 81       	ldd	r24, Y+2	; 0x02
    4070:	8f 5f       	subi	r24, 0xFF	; 255
    4072:	8a 83       	std	Y+2, r24	; 0x02
    4074:	15 c0       	rjmp	.+42     	; 0x40a0 <Validate_Expression+0x8a2>
				}
				else {
					GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    4076:	8a 81       	ldd	r24, Y+2	; 0x02
    4078:	88 2f       	mov	r24, r24
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	fc 01       	movw	r30, r24
    4086:	ee 5a       	subi	r30, 0xAE	; 174
    4088:	fc 4f       	sbci	r31, 0xFC	; 252
    408a:	8a 85       	ldd	r24, Y+10	; 0x0a
    408c:	9b 85       	ldd	r25, Y+11	; 0x0b
    408e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4090:	bd 85       	ldd	r27, Y+13	; 0x0d
    4092:	80 83       	st	Z, r24
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	a2 83       	std	Z+2, r26	; 0x02
    4098:	b3 83       	std	Z+3, r27	; 0x03
    409a:	8a 81       	ldd	r24, Y+2	; 0x02
    409c:	8f 5f       	subi	r24, 0xFF	; 255
    409e:	8a 83       	std	Y+2, r24	; 0x02
				}
				//For New Number
				IsFloat = 0, IsNegative = 0;
    40a0:	1d 82       	std	Y+5, r1	; 0x05
    40a2:	1c 82       	std	Y+4, r1	; 0x04
				Local_s64Operand = 0,floatweight = 0.1;
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	a0 e0       	ldi	r26, 0x00	; 0
    40aa:	b0 e0       	ldi	r27, 0x00	; 0
    40ac:	8a 87       	std	Y+10, r24	; 0x0a
    40ae:	9b 87       	std	Y+11, r25	; 0x0b
    40b0:	ac 87       	std	Y+12, r26	; 0x0c
    40b2:	bd 87       	std	Y+13, r27	; 0x0d
    40b4:	8d ec       	ldi	r24, 0xCD	; 205
    40b6:	9c ec       	ldi	r25, 0xCC	; 204
    40b8:	ac ec       	ldi	r26, 0xCC	; 204
    40ba:	bd e3       	ldi	r27, 0x3D	; 61
    40bc:	8e 83       	std	Y+6, r24	; 0x06
    40be:	9f 83       	std	Y+7, r25	; 0x07
    40c0:	a8 87       	std	Y+8, r26	; 0x08
    40c2:	b9 87       	std	Y+9, r27	; 0x09
    40c4:	0b c0       	rjmp	.+22     	; 0x40dc <Validate_Expression+0x8de>
			}
			else{
				GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
    40c6:	8b 81       	ldd	r24, Y+3	; 0x03
    40c8:	88 2f       	mov	r24, r24
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	fc 01       	movw	r30, r24
    40ce:	ee 55       	subi	r30, 0x5E	; 94
    40d0:	fc 4f       	sbci	r31, 0xFC	; 252
    40d2:	88 e2       	ldi	r24, 0x28	; 40
    40d4:	80 83       	st	Z, r24
    40d6:	8b 81       	ldd	r24, Y+3	; 0x03
    40d8:	8f 5f       	subi	r24, 0xFF	; 255
    40da:	8b 83       	std	Y+3, r24	; 0x03

ES Validate_Expression(){
	double Local_s64Operand = 0, floatweight = 0.1;
	u8 IsFloat = 0, IsNegative = 0, ShadedExpressionIdx = 0, OperandsArrIdx = 0;
    u8 Local_ExpIt;
	for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++){
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	8f 5f       	subi	r24, 0xFF	; 255
    40e0:	89 83       	std	Y+1, r24	; 0x01
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	88 2f       	mov	r24, r24
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	fc 01       	movw	r30, r24
    40ea:	ea 54       	subi	r30, 0x4A	; 74
    40ec:	fc 4f       	sbci	r31, 0xFC	; 252
    40ee:	80 81       	ld	r24, Z
    40f0:	88 23       	and	r24, r24
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <Validate_Expression+0x8f8>
    40f4:	a4 cb       	rjmp	.-2232   	; 0x383e <Validate_Expression+0x40>
			else{
				GlobalShaddedExpression[ShadedExpressionIdx++] = '(';
			}
		}
	}
    if(Local_s64Operand){
    40f6:	6a 85       	ldd	r22, Y+10	; 0x0a
    40f8:	7b 85       	ldd	r23, Y+11	; 0x0b
    40fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    40fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e0       	ldi	r20, 0x00	; 0
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    410a:	88 23       	and	r24, r24
    410c:	09 f4       	brne	.+2      	; 0x4110 <Validate_Expression+0x912>
    410e:	3e c0       	rjmp	.+124    	; 0x418c <Validate_Expression+0x98e>
        GlobalShaddedExpression[ShadedExpressionIdx++] = 'A' + OperandsArrIdx;
    4110:	8b 81       	ldd	r24, Y+3	; 0x03
    4112:	28 2f       	mov	r18, r24
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	8a 81       	ldd	r24, Y+2	; 0x02
    4118:	8f 5b       	subi	r24, 0xBF	; 191
    411a:	f9 01       	movw	r30, r18
    411c:	ee 55       	subi	r30, 0x5E	; 94
    411e:	fc 4f       	sbci	r31, 0xFC	; 252
    4120:	80 83       	st	Z, r24
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
    4124:	8f 5f       	subi	r24, 0xFF	; 255
    4126:	8b 83       	std	Y+3, r24	; 0x03
        if(IsNegative){
    4128:	8c 81       	ldd	r24, Y+4	; 0x04
    412a:	88 23       	and	r24, r24
    412c:	d1 f0       	breq	.+52     	; 0x4162 <Validate_Expression+0x964>
            GlobalOperands[OperandsArrIdx++] = -1 * Local_s64Operand;
    412e:	8a 81       	ldd	r24, Y+2	; 0x02
    4130:	68 2f       	mov	r22, r24
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	8a 85       	ldd	r24, Y+10	; 0x0a
    4136:	9b 85       	ldd	r25, Y+11	; 0x0b
    4138:	ac 85       	ldd	r26, Y+12	; 0x0c
    413a:	bd 85       	ldd	r27, Y+13	; 0x0d
    413c:	9c 01       	movw	r18, r24
    413e:	ad 01       	movw	r20, r26
    4140:	50 58       	subi	r21, 0x80	; 128
    4142:	cb 01       	movw	r24, r22
    4144:	88 0f       	add	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	88 0f       	add	r24, r24
    414a:	99 1f       	adc	r25, r25
    414c:	fc 01       	movw	r30, r24
    414e:	ee 5a       	subi	r30, 0xAE	; 174
    4150:	fc 4f       	sbci	r31, 0xFC	; 252
    4152:	20 83       	st	Z, r18
    4154:	31 83       	std	Z+1, r19	; 0x01
    4156:	42 83       	std	Z+2, r20	; 0x02
    4158:	53 83       	std	Z+3, r21	; 0x03
    415a:	8a 81       	ldd	r24, Y+2	; 0x02
    415c:	8f 5f       	subi	r24, 0xFF	; 255
    415e:	8a 83       	std	Y+2, r24	; 0x02
    4160:	15 c0       	rjmp	.+42     	; 0x418c <Validate_Expression+0x98e>
        }
        else {
            GlobalOperands[OperandsArrIdx++] = Local_s64Operand;
    4162:	8a 81       	ldd	r24, Y+2	; 0x02
    4164:	88 2f       	mov	r24, r24
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	88 0f       	add	r24, r24
    416a:	99 1f       	adc	r25, r25
    416c:	88 0f       	add	r24, r24
    416e:	99 1f       	adc	r25, r25
    4170:	fc 01       	movw	r30, r24
    4172:	ee 5a       	subi	r30, 0xAE	; 174
    4174:	fc 4f       	sbci	r31, 0xFC	; 252
    4176:	8a 85       	ldd	r24, Y+10	; 0x0a
    4178:	9b 85       	ldd	r25, Y+11	; 0x0b
    417a:	ac 85       	ldd	r26, Y+12	; 0x0c
    417c:	bd 85       	ldd	r27, Y+13	; 0x0d
    417e:	80 83       	st	Z, r24
    4180:	91 83       	std	Z+1, r25	; 0x01
    4182:	a2 83       	std	Z+2, r26	; 0x02
    4184:	b3 83       	std	Z+3, r27	; 0x03
    4186:	8a 81       	ldd	r24, Y+2	; 0x02
    4188:	8f 5f       	subi	r24, 0xFF	; 255
    418a:	8a 83       	std	Y+2, r24	; 0x02
        }
    }
    if(OperandsArrIdx == 0 && Local_ExpIt) return ES_SYNTAX_ERROR;
    418c:	8a 81       	ldd	r24, Y+2	; 0x02
    418e:	88 23       	and	r24, r24
    4190:	31 f4       	brne	.+12     	; 0x419e <Validate_Expression+0x9a0>
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	88 23       	and	r24, r24
    4196:	19 f0       	breq	.+6      	; 0x419e <Validate_Expression+0x9a0>
    4198:	84 e0       	ldi	r24, 0x04	; 4
    419a:	8b 8b       	std	Y+19, r24	; 0x13
    419c:	46 c0       	rjmp	.+140    	; 0x422a <Validate_Expression+0xa2c>

    Stack Local_stBrackets;
    char Local_chTmp;
    Initialize_Stack(&Local_stBrackets);
    419e:	ce 01       	movw	r24, r28
    41a0:	0e 96       	adiw	r24, 0x0e	; 14
    41a2:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Initialize_Stack>
    for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++) {
    41a6:	19 82       	std	Y+1, r1	; 0x01
    41a8:	2d c0       	rjmp	.+90     	; 0x4204 <Validate_Expression+0xa06>
        if (GlobalInputExpression[Local_ExpIt] == '(') Push(&Local_stBrackets, ')');
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	88 2f       	mov	r24, r24
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	fc 01       	movw	r30, r24
    41b2:	ea 54       	subi	r30, 0x4A	; 74
    41b4:	fc 4f       	sbci	r31, 0xFC	; 252
    41b6:	80 81       	ld	r24, Z
    41b8:	88 32       	cpi	r24, 0x28	; 40
    41ba:	31 f4       	brne	.+12     	; 0x41c8 <Validate_Expression+0x9ca>
    41bc:	ce 01       	movw	r24, r28
    41be:	0e 96       	adiw	r24, 0x0e	; 14
    41c0:	69 e2       	ldi	r22, 0x29	; 41
    41c2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Push>
    41c6:	1b c0       	rjmp	.+54     	; 0x41fe <Validate_Expression+0xa00>
        else if (GlobalInputExpression[Local_ExpIt] == ')'){
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	88 2f       	mov	r24, r24
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	fc 01       	movw	r30, r24
    41d0:	ea 54       	subi	r30, 0x4A	; 74
    41d2:	fc 4f       	sbci	r31, 0xFC	; 252
    41d4:	80 81       	ld	r24, Z
    41d6:	89 32       	cpi	r24, 0x29	; 41
    41d8:	91 f4       	brne	.+36     	; 0x41fe <Validate_Expression+0xa00>
        	if(!Stack_Empty(&Local_stBrackets)) {
    41da:	ce 01       	movw	r24, r28
    41dc:	0e 96       	adiw	r24, 0x0e	; 14
    41de:	0e 94 2e 0c 	call	0x185c	; 0x185c <Stack_Empty>
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	49 f4       	brne	.+18     	; 0x41f8 <Validate_Expression+0x9fa>
        		Pop(&Local_chTmp, &Local_stBrackets);
    41e6:	ce 01       	movw	r24, r28
    41e8:	42 96       	adiw	r24, 0x12	; 18
    41ea:	9e 01       	movw	r18, r28
    41ec:	22 5f       	subi	r18, 0xF2	; 242
    41ee:	3f 4f       	sbci	r19, 0xFF	; 255
    41f0:	b9 01       	movw	r22, r18
    41f2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Pop>
    41f6:	03 c0       	rjmp	.+6      	; 0x41fe <Validate_Expression+0xa00>
        	}
        	else{
                return ES_SYNTAX_ERROR;
    41f8:	84 e0       	ldi	r24, 0x04	; 4
    41fa:	8b 8b       	std	Y+19, r24	; 0x13
    41fc:	16 c0       	rjmp	.+44     	; 0x422a <Validate_Expression+0xa2c>
    if(OperandsArrIdx == 0 && Local_ExpIt) return ES_SYNTAX_ERROR;

    Stack Local_stBrackets;
    char Local_chTmp;
    Initialize_Stack(&Local_stBrackets);
    for(Local_ExpIt = 0;GlobalInputExpression[Local_ExpIt];Local_ExpIt++) {
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	8f 5f       	subi	r24, 0xFF	; 255
    4202:	89 83       	std	Y+1, r24	; 0x01
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	fc 01       	movw	r30, r24
    420c:	ea 54       	subi	r30, 0x4A	; 74
    420e:	fc 4f       	sbci	r31, 0xFC	; 252
    4210:	80 81       	ld	r24, Z
    4212:	88 23       	and	r24, r24
    4214:	51 f6       	brne	.-108    	; 0x41aa <Validate_Expression+0x9ac>
        	else{
                return ES_SYNTAX_ERROR;
        	}
        }
    }
	if(!Stack_Empty(&Local_stBrackets)) {
    4216:	ce 01       	movw	r24, r28
    4218:	0e 96       	adiw	r24, 0x0e	; 14
    421a:	0e 94 2e 0c 	call	0x185c	; 0x185c <Stack_Empty>
    421e:	00 97       	sbiw	r24, 0x00	; 0
    4220:	19 f4       	brne	.+6      	; 0x4228 <Validate_Expression+0xa2a>
		return ES_SYNTAX_ERROR;
    4222:	84 e0       	ldi	r24, 0x04	; 4
    4224:	8b 8b       	std	Y+19, r24	; 0x13
    4226:	01 c0       	rjmp	.+2      	; 0x422a <Validate_Expression+0xa2c>
	}

	return ES_OK;
    4228:	1b 8a       	std	Y+19, r1	; 0x13
    422a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    422c:	63 96       	adiw	r28, 0x13	; 19
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	cd bf       	out	0x3d, r28	; 61
    4238:	cf 91       	pop	r28
    423a:	df 91       	pop	r29
    423c:	08 95       	ret

0000423e <main>:
#include "..\.\HAL\LCD\LCD_int.h"

#include "Calculator.h"


int main(void){
    423e:	df 93       	push	r29
    4240:	cf 93       	push	r28
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62

	//Initialization
	Math_voidInit();
    4246:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Math_voidInit>
	DIO_enuInit();
    424a:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_enuInit>
	Keypad_enuInit();
    424e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <Keypad_enuInit>
	LCD_enuInit();
    4252:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <LCD_enuInit>

	//APP
	Run_Calculator();
    4256:	0e 94 32 15 	call	0x2a64	; 0x2a64 <Run_Calculator>
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	90 e0       	ldi	r25, 0x00	; 0
}
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <__mulsi3>:
    4264:	62 9f       	mul	r22, r18
    4266:	d0 01       	movw	r26, r0
    4268:	73 9f       	mul	r23, r19
    426a:	f0 01       	movw	r30, r0
    426c:	82 9f       	mul	r24, r18
    426e:	e0 0d       	add	r30, r0
    4270:	f1 1d       	adc	r31, r1
    4272:	64 9f       	mul	r22, r20
    4274:	e0 0d       	add	r30, r0
    4276:	f1 1d       	adc	r31, r1
    4278:	92 9f       	mul	r25, r18
    427a:	f0 0d       	add	r31, r0
    427c:	83 9f       	mul	r24, r19
    427e:	f0 0d       	add	r31, r0
    4280:	74 9f       	mul	r23, r20
    4282:	f0 0d       	add	r31, r0
    4284:	65 9f       	mul	r22, r21
    4286:	f0 0d       	add	r31, r0
    4288:	99 27       	eor	r25, r25
    428a:	72 9f       	mul	r23, r18
    428c:	b0 0d       	add	r27, r0
    428e:	e1 1d       	adc	r30, r1
    4290:	f9 1f       	adc	r31, r25
    4292:	63 9f       	mul	r22, r19
    4294:	b0 0d       	add	r27, r0
    4296:	e1 1d       	adc	r30, r1
    4298:	f9 1f       	adc	r31, r25
    429a:	bd 01       	movw	r22, r26
    429c:	cf 01       	movw	r24, r30
    429e:	11 24       	eor	r1, r1
    42a0:	08 95       	ret

000042a2 <__divmodsi4>:
    42a2:	97 fb       	bst	r25, 7
    42a4:	09 2e       	mov	r0, r25
    42a6:	05 26       	eor	r0, r21
    42a8:	0e d0       	rcall	.+28     	; 0x42c6 <__divmodsi4_neg1>
    42aa:	57 fd       	sbrc	r21, 7
    42ac:	04 d0       	rcall	.+8      	; 0x42b6 <__divmodsi4_neg2>
    42ae:	14 d0       	rcall	.+40     	; 0x42d8 <__udivmodsi4>
    42b0:	0a d0       	rcall	.+20     	; 0x42c6 <__divmodsi4_neg1>
    42b2:	00 1c       	adc	r0, r0
    42b4:	38 f4       	brcc	.+14     	; 0x42c4 <__divmodsi4_exit>

000042b6 <__divmodsi4_neg2>:
    42b6:	50 95       	com	r21
    42b8:	40 95       	com	r20
    42ba:	30 95       	com	r19
    42bc:	21 95       	neg	r18
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	4f 4f       	sbci	r20, 0xFF	; 255
    42c2:	5f 4f       	sbci	r21, 0xFF	; 255

000042c4 <__divmodsi4_exit>:
    42c4:	08 95       	ret

000042c6 <__divmodsi4_neg1>:
    42c6:	f6 f7       	brtc	.-4      	; 0x42c4 <__divmodsi4_exit>
    42c8:	90 95       	com	r25
    42ca:	80 95       	com	r24
    42cc:	70 95       	com	r23
    42ce:	61 95       	neg	r22
    42d0:	7f 4f       	sbci	r23, 0xFF	; 255
    42d2:	8f 4f       	sbci	r24, 0xFF	; 255
    42d4:	9f 4f       	sbci	r25, 0xFF	; 255
    42d6:	08 95       	ret

000042d8 <__udivmodsi4>:
    42d8:	a1 e2       	ldi	r26, 0x21	; 33
    42da:	1a 2e       	mov	r1, r26
    42dc:	aa 1b       	sub	r26, r26
    42de:	bb 1b       	sub	r27, r27
    42e0:	fd 01       	movw	r30, r26
    42e2:	0d c0       	rjmp	.+26     	; 0x42fe <__udivmodsi4_ep>

000042e4 <__udivmodsi4_loop>:
    42e4:	aa 1f       	adc	r26, r26
    42e6:	bb 1f       	adc	r27, r27
    42e8:	ee 1f       	adc	r30, r30
    42ea:	ff 1f       	adc	r31, r31
    42ec:	a2 17       	cp	r26, r18
    42ee:	b3 07       	cpc	r27, r19
    42f0:	e4 07       	cpc	r30, r20
    42f2:	f5 07       	cpc	r31, r21
    42f4:	20 f0       	brcs	.+8      	; 0x42fe <__udivmodsi4_ep>
    42f6:	a2 1b       	sub	r26, r18
    42f8:	b3 0b       	sbc	r27, r19
    42fa:	e4 0b       	sbc	r30, r20
    42fc:	f5 0b       	sbc	r31, r21

000042fe <__udivmodsi4_ep>:
    42fe:	66 1f       	adc	r22, r22
    4300:	77 1f       	adc	r23, r23
    4302:	88 1f       	adc	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	1a 94       	dec	r1
    4308:	69 f7       	brne	.-38     	; 0x42e4 <__udivmodsi4_loop>
    430a:	60 95       	com	r22
    430c:	70 95       	com	r23
    430e:	80 95       	com	r24
    4310:	90 95       	com	r25
    4312:	9b 01       	movw	r18, r22
    4314:	ac 01       	movw	r20, r24
    4316:	bd 01       	movw	r22, r26
    4318:	cf 01       	movw	r24, r30
    431a:	08 95       	ret

0000431c <__prologue_saves__>:
    431c:	2f 92       	push	r2
    431e:	3f 92       	push	r3
    4320:	4f 92       	push	r4
    4322:	5f 92       	push	r5
    4324:	6f 92       	push	r6
    4326:	7f 92       	push	r7
    4328:	8f 92       	push	r8
    432a:	9f 92       	push	r9
    432c:	af 92       	push	r10
    432e:	bf 92       	push	r11
    4330:	cf 92       	push	r12
    4332:	df 92       	push	r13
    4334:	ef 92       	push	r14
    4336:	ff 92       	push	r15
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	cf 93       	push	r28
    433e:	df 93       	push	r29
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	ca 1b       	sub	r28, r26
    4346:	db 0b       	sbc	r29, r27
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	09 94       	ijmp

00004354 <__epilogue_restores__>:
    4354:	2a 88       	ldd	r2, Y+18	; 0x12
    4356:	39 88       	ldd	r3, Y+17	; 0x11
    4358:	48 88       	ldd	r4, Y+16	; 0x10
    435a:	5f 84       	ldd	r5, Y+15	; 0x0f
    435c:	6e 84       	ldd	r6, Y+14	; 0x0e
    435e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4360:	8c 84       	ldd	r8, Y+12	; 0x0c
    4362:	9b 84       	ldd	r9, Y+11	; 0x0b
    4364:	aa 84       	ldd	r10, Y+10	; 0x0a
    4366:	b9 84       	ldd	r11, Y+9	; 0x09
    4368:	c8 84       	ldd	r12, Y+8	; 0x08
    436a:	df 80       	ldd	r13, Y+7	; 0x07
    436c:	ee 80       	ldd	r14, Y+6	; 0x06
    436e:	fd 80       	ldd	r15, Y+5	; 0x05
    4370:	0c 81       	ldd	r16, Y+4	; 0x04
    4372:	1b 81       	ldd	r17, Y+3	; 0x03
    4374:	aa 81       	ldd	r26, Y+2	; 0x02
    4376:	b9 81       	ldd	r27, Y+1	; 0x01
    4378:	ce 0f       	add	r28, r30
    437a:	d1 1d       	adc	r29, r1
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	ed 01       	movw	r28, r26
    4388:	08 95       	ret

0000438a <malloc>:
    438a:	cf 93       	push	r28
    438c:	df 93       	push	r29
    438e:	bc 01       	movw	r22, r24
    4390:	82 30       	cpi	r24, 0x02	; 2
    4392:	91 05       	cpc	r25, r1
    4394:	10 f4       	brcc	.+4      	; 0x439a <malloc+0x10>
    4396:	62 e0       	ldi	r22, 0x02	; 2
    4398:	70 e0       	ldi	r23, 0x00	; 0
    439a:	a0 91 cc 03 	lds	r26, 0x03CC
    439e:	b0 91 cd 03 	lds	r27, 0x03CD
    43a2:	ed 01       	movw	r28, r26
    43a4:	e0 e0       	ldi	r30, 0x00	; 0
    43a6:	f0 e0       	ldi	r31, 0x00	; 0
    43a8:	40 e0       	ldi	r20, 0x00	; 0
    43aa:	50 e0       	ldi	r21, 0x00	; 0
    43ac:	21 c0       	rjmp	.+66     	; 0x43f0 <malloc+0x66>
    43ae:	88 81       	ld	r24, Y
    43b0:	99 81       	ldd	r25, Y+1	; 0x01
    43b2:	86 17       	cp	r24, r22
    43b4:	97 07       	cpc	r25, r23
    43b6:	69 f4       	brne	.+26     	; 0x43d2 <malloc+0x48>
    43b8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ba:	9b 81       	ldd	r25, Y+3	; 0x03
    43bc:	30 97       	sbiw	r30, 0x00	; 0
    43be:	19 f0       	breq	.+6      	; 0x43c6 <malloc+0x3c>
    43c0:	93 83       	std	Z+3, r25	; 0x03
    43c2:	82 83       	std	Z+2, r24	; 0x02
    43c4:	04 c0       	rjmp	.+8      	; 0x43ce <malloc+0x44>
    43c6:	90 93 cd 03 	sts	0x03CD, r25
    43ca:	80 93 cc 03 	sts	0x03CC, r24
    43ce:	fe 01       	movw	r30, r28
    43d0:	34 c0       	rjmp	.+104    	; 0x443a <malloc+0xb0>
    43d2:	68 17       	cp	r22, r24
    43d4:	79 07       	cpc	r23, r25
    43d6:	38 f4       	brcc	.+14     	; 0x43e6 <malloc+0x5c>
    43d8:	41 15       	cp	r20, r1
    43da:	51 05       	cpc	r21, r1
    43dc:	19 f0       	breq	.+6      	; 0x43e4 <malloc+0x5a>
    43de:	84 17       	cp	r24, r20
    43e0:	95 07       	cpc	r25, r21
    43e2:	08 f4       	brcc	.+2      	; 0x43e6 <malloc+0x5c>
    43e4:	ac 01       	movw	r20, r24
    43e6:	fe 01       	movw	r30, r28
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	9b 81       	ldd	r25, Y+3	; 0x03
    43ec:	9c 01       	movw	r18, r24
    43ee:	e9 01       	movw	r28, r18
    43f0:	20 97       	sbiw	r28, 0x00	; 0
    43f2:	e9 f6       	brne	.-70     	; 0x43ae <malloc+0x24>
    43f4:	41 15       	cp	r20, r1
    43f6:	51 05       	cpc	r21, r1
    43f8:	a9 f1       	breq	.+106    	; 0x4464 <malloc+0xda>
    43fa:	ca 01       	movw	r24, r20
    43fc:	86 1b       	sub	r24, r22
    43fe:	97 0b       	sbc	r25, r23
    4400:	04 97       	sbiw	r24, 0x04	; 4
    4402:	08 f4       	brcc	.+2      	; 0x4406 <malloc+0x7c>
    4404:	ba 01       	movw	r22, r20
    4406:	e0 e0       	ldi	r30, 0x00	; 0
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	2a c0       	rjmp	.+84     	; 0x4460 <malloc+0xd6>
    440c:	8d 91       	ld	r24, X+
    440e:	9c 91       	ld	r25, X
    4410:	11 97       	sbiw	r26, 0x01	; 1
    4412:	84 17       	cp	r24, r20
    4414:	95 07       	cpc	r25, r21
    4416:	f9 f4       	brne	.+62     	; 0x4456 <malloc+0xcc>
    4418:	64 17       	cp	r22, r20
    441a:	75 07       	cpc	r23, r21
    441c:	81 f4       	brne	.+32     	; 0x443e <malloc+0xb4>
    441e:	12 96       	adiw	r26, 0x02	; 2
    4420:	8d 91       	ld	r24, X+
    4422:	9c 91       	ld	r25, X
    4424:	13 97       	sbiw	r26, 0x03	; 3
    4426:	30 97       	sbiw	r30, 0x00	; 0
    4428:	19 f0       	breq	.+6      	; 0x4430 <malloc+0xa6>
    442a:	93 83       	std	Z+3, r25	; 0x03
    442c:	82 83       	std	Z+2, r24	; 0x02
    442e:	04 c0       	rjmp	.+8      	; 0x4438 <malloc+0xae>
    4430:	90 93 cd 03 	sts	0x03CD, r25
    4434:	80 93 cc 03 	sts	0x03CC, r24
    4438:	fd 01       	movw	r30, r26
    443a:	32 96       	adiw	r30, 0x02	; 2
    443c:	4f c0       	rjmp	.+158    	; 0x44dc <malloc+0x152>
    443e:	ca 01       	movw	r24, r20
    4440:	86 1b       	sub	r24, r22
    4442:	97 0b       	sbc	r25, r23
    4444:	fd 01       	movw	r30, r26
    4446:	e8 0f       	add	r30, r24
    4448:	f9 1f       	adc	r31, r25
    444a:	61 93       	st	Z+, r22
    444c:	71 93       	st	Z+, r23
    444e:	02 97       	sbiw	r24, 0x02	; 2
    4450:	8d 93       	st	X+, r24
    4452:	9c 93       	st	X, r25
    4454:	43 c0       	rjmp	.+134    	; 0x44dc <malloc+0x152>
    4456:	fd 01       	movw	r30, r26
    4458:	82 81       	ldd	r24, Z+2	; 0x02
    445a:	93 81       	ldd	r25, Z+3	; 0x03
    445c:	9c 01       	movw	r18, r24
    445e:	d9 01       	movw	r26, r18
    4460:	10 97       	sbiw	r26, 0x00	; 0
    4462:	a1 f6       	brne	.-88     	; 0x440c <malloc+0x82>
    4464:	80 91 ca 03 	lds	r24, 0x03CA
    4468:	90 91 cb 03 	lds	r25, 0x03CB
    446c:	89 2b       	or	r24, r25
    446e:	41 f4       	brne	.+16     	; 0x4480 <malloc+0xf6>
    4470:	80 91 6a 01 	lds	r24, 0x016A
    4474:	90 91 6b 01 	lds	r25, 0x016B
    4478:	90 93 cb 03 	sts	0x03CB, r25
    447c:	80 93 ca 03 	sts	0x03CA, r24
    4480:	40 91 6c 01 	lds	r20, 0x016C
    4484:	50 91 6d 01 	lds	r21, 0x016D
    4488:	41 15       	cp	r20, r1
    448a:	51 05       	cpc	r21, r1
    448c:	41 f4       	brne	.+16     	; 0x449e <malloc+0x114>
    448e:	4d b7       	in	r20, 0x3d	; 61
    4490:	5e b7       	in	r21, 0x3e	; 62
    4492:	80 91 68 01 	lds	r24, 0x0168
    4496:	90 91 69 01 	lds	r25, 0x0169
    449a:	48 1b       	sub	r20, r24
    449c:	59 0b       	sbc	r21, r25
    449e:	20 91 ca 03 	lds	r18, 0x03CA
    44a2:	30 91 cb 03 	lds	r19, 0x03CB
    44a6:	24 17       	cp	r18, r20
    44a8:	35 07       	cpc	r19, r21
    44aa:	b0 f4       	brcc	.+44     	; 0x44d8 <malloc+0x14e>
    44ac:	ca 01       	movw	r24, r20
    44ae:	82 1b       	sub	r24, r18
    44b0:	93 0b       	sbc	r25, r19
    44b2:	86 17       	cp	r24, r22
    44b4:	97 07       	cpc	r25, r23
    44b6:	80 f0       	brcs	.+32     	; 0x44d8 <malloc+0x14e>
    44b8:	ab 01       	movw	r20, r22
    44ba:	4e 5f       	subi	r20, 0xFE	; 254
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	84 17       	cp	r24, r20
    44c0:	95 07       	cpc	r25, r21
    44c2:	50 f0       	brcs	.+20     	; 0x44d8 <malloc+0x14e>
    44c4:	42 0f       	add	r20, r18
    44c6:	53 1f       	adc	r21, r19
    44c8:	50 93 cb 03 	sts	0x03CB, r21
    44cc:	40 93 ca 03 	sts	0x03CA, r20
    44d0:	f9 01       	movw	r30, r18
    44d2:	61 93       	st	Z+, r22
    44d4:	71 93       	st	Z+, r23
    44d6:	02 c0       	rjmp	.+4      	; 0x44dc <malloc+0x152>
    44d8:	e0 e0       	ldi	r30, 0x00	; 0
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	cf 01       	movw	r24, r30
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	08 95       	ret

000044e4 <free>:
    44e4:	cf 93       	push	r28
    44e6:	df 93       	push	r29
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	09 f4       	brne	.+2      	; 0x44ee <free+0xa>
    44ec:	50 c0       	rjmp	.+160    	; 0x458e <free+0xaa>
    44ee:	ec 01       	movw	r28, r24
    44f0:	22 97       	sbiw	r28, 0x02	; 2
    44f2:	1b 82       	std	Y+3, r1	; 0x03
    44f4:	1a 82       	std	Y+2, r1	; 0x02
    44f6:	a0 91 cc 03 	lds	r26, 0x03CC
    44fa:	b0 91 cd 03 	lds	r27, 0x03CD
    44fe:	10 97       	sbiw	r26, 0x00	; 0
    4500:	09 f1       	breq	.+66     	; 0x4544 <free+0x60>
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	50 e0       	ldi	r21, 0x00	; 0
    4506:	ac 17       	cp	r26, r28
    4508:	bd 07       	cpc	r27, r29
    450a:	08 f1       	brcs	.+66     	; 0x454e <free+0x6a>
    450c:	bb 83       	std	Y+3, r27	; 0x03
    450e:	aa 83       	std	Y+2, r26	; 0x02
    4510:	fe 01       	movw	r30, r28
    4512:	21 91       	ld	r18, Z+
    4514:	31 91       	ld	r19, Z+
    4516:	e2 0f       	add	r30, r18
    4518:	f3 1f       	adc	r31, r19
    451a:	ae 17       	cp	r26, r30
    451c:	bf 07       	cpc	r27, r31
    451e:	79 f4       	brne	.+30     	; 0x453e <free+0x5a>
    4520:	8d 91       	ld	r24, X+
    4522:	9c 91       	ld	r25, X
    4524:	11 97       	sbiw	r26, 0x01	; 1
    4526:	28 0f       	add	r18, r24
    4528:	39 1f       	adc	r19, r25
    452a:	2e 5f       	subi	r18, 0xFE	; 254
    452c:	3f 4f       	sbci	r19, 0xFF	; 255
    452e:	39 83       	std	Y+1, r19	; 0x01
    4530:	28 83       	st	Y, r18
    4532:	12 96       	adiw	r26, 0x02	; 2
    4534:	8d 91       	ld	r24, X+
    4536:	9c 91       	ld	r25, X
    4538:	13 97       	sbiw	r26, 0x03	; 3
    453a:	9b 83       	std	Y+3, r25	; 0x03
    453c:	8a 83       	std	Y+2, r24	; 0x02
    453e:	41 15       	cp	r20, r1
    4540:	51 05       	cpc	r21, r1
    4542:	71 f4       	brne	.+28     	; 0x4560 <free+0x7c>
    4544:	d0 93 cd 03 	sts	0x03CD, r29
    4548:	c0 93 cc 03 	sts	0x03CC, r28
    454c:	20 c0       	rjmp	.+64     	; 0x458e <free+0xaa>
    454e:	12 96       	adiw	r26, 0x02	; 2
    4550:	8d 91       	ld	r24, X+
    4552:	9c 91       	ld	r25, X
    4554:	13 97       	sbiw	r26, 0x03	; 3
    4556:	ad 01       	movw	r20, r26
    4558:	00 97       	sbiw	r24, 0x00	; 0
    455a:	11 f0       	breq	.+4      	; 0x4560 <free+0x7c>
    455c:	dc 01       	movw	r26, r24
    455e:	d3 cf       	rjmp	.-90     	; 0x4506 <free+0x22>
    4560:	fa 01       	movw	r30, r20
    4562:	d3 83       	std	Z+3, r29	; 0x03
    4564:	c2 83       	std	Z+2, r28	; 0x02
    4566:	21 91       	ld	r18, Z+
    4568:	31 91       	ld	r19, Z+
    456a:	e2 0f       	add	r30, r18
    456c:	f3 1f       	adc	r31, r19
    456e:	ce 17       	cp	r28, r30
    4570:	df 07       	cpc	r29, r31
    4572:	69 f4       	brne	.+26     	; 0x458e <free+0xaa>
    4574:	88 81       	ld	r24, Y
    4576:	99 81       	ldd	r25, Y+1	; 0x01
    4578:	28 0f       	add	r18, r24
    457a:	39 1f       	adc	r19, r25
    457c:	2e 5f       	subi	r18, 0xFE	; 254
    457e:	3f 4f       	sbci	r19, 0xFF	; 255
    4580:	fa 01       	movw	r30, r20
    4582:	31 83       	std	Z+1, r19	; 0x01
    4584:	20 83       	st	Z, r18
    4586:	8a 81       	ldd	r24, Y+2	; 0x02
    4588:	9b 81       	ldd	r25, Y+3	; 0x03
    458a:	93 83       	std	Z+3, r25	; 0x03
    458c:	82 83       	std	Z+2, r24	; 0x02
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	08 95       	ret

00004594 <_exit>:
    4594:	f8 94       	cli

00004596 <__stop_program>:
    4596:	ff cf       	rjmp	.-2      	; 0x4596 <__stop_program>
